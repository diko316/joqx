{"version":3,"file":"joqx.min.js","sources":["../src/executor.js","../src/intent/registry.js","../src/transformer/registry.js","../src/compile/symbol/base.js","../src/compile/symbol/registry.js","../src/helper/string.js","../src/context/helper.js","../src/compile/terminal.js","../src/compile/rule.js","../src/compile.js","../src/api.js","../node_modules/rollup-plugin-node-globals/src/global.js","../src/parser/index.js","../src/compile/symbol/native.js","../src/compile/symbol/undefined.js","../src/compile/symbol/null.js","../src/compile/symbol/string.js","../src/compile/symbol/number.js","../src/compile/symbol/boolean.js","../src/compile/symbol/collection.js","../src/compile/symbol/array.js","../src/compile/symbol/identifier.js","../src/compile/symbol/jsonpath.js","../src/compile/symbol/object.js","../src/compile/symbol/arguments.js","../src/compile/symbol/call.js","../src/compile/symbol/transformer.js","../src/compile/symbol/block.js","../src/compile/symbol.js","../src/compile/class.js","../src/index.js"],"sourcesContent":["'use strict';\n\nimport { thenable } from \"libcore\";\n\nexport\n    function promiseGuard(method) {\n\n        function executor(helper, s1, s2, s3, s4, s5, s6, s7, s8) {\n            if (thenable(s1)) {\n                return s1.then(function (s1) {\n                    return method.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);\n                });\n            }\n\n            return method.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);\n        }\n\n        return executor;\n    }","'use strict';\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport { promiseGuard } from \"../executor.js\";\n\nconst REGISTRY = createRegistry(),\n    NAME_RE = /[a-zA-Z\\$][a-zA-Z0-9\\$]*(\\-[a-zA-Z0-9\\$]+)*/;\n\n\nexport\n    function register(name, intent) {\n        var registry = REGISTRY;\n\n        if (!string(name)) {\n            throw new Error(\"Invalid intent [name] parameter.\");\n        }\n        else if (!NAME_RE.test(name)) {\n            throw new Error(\"Malformed intent [name] parameter: \" + name);\n        }\n\n        if (!method(intent)) {\n            throw new Error(\"Invalid [intent] Function parameter named: \" +\n                            name);\n        }\n\n        if (registry.exists(name)) {\n            throw new Error(\"Invalid [intent] named: \" + name +\n                            \" already exist\");\n        }\n\n        registry.set(name, promiseGuard(intent));\n\n    }\n\n\nexport\n    function exists(name) {\n        return REGISTRY.exists(name);\n    }\n\nexport\n    function get(name) {\n        var registry = REGISTRY;\n        return registry.exists(name) ? registry.get(name) : null;\n    }\n    ","'use strict';\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport { promiseGuard } from \"../executor.js\";\n\n\nconst REGISTRY = createRegistry(),\n    NAME_RE = /[a-zA-Z\\_\\$][a-zA-Z0-9\\_\\$]*(\\.[a-zA-Z\\_\\$][a-zA-Z0-9\\_\\$]*)*/;\n\n\nexport\n    function register(name, transformer) {\n        var registry = REGISTRY;\n\n        if (!string(name)) {\n            throw new Error(\"Invalid transformer [name] parameter.\");\n        }\n        else if (!NAME_RE.test(name)) {\n            throw new Error(\"Malformed transformer [name] parameter: \" + name);\n        }\n\n        if (!method(transformer)) {\n            throw new Error(\"Invalid [transformer] Function parameter named: \" +\n                            name);\n        }\n\n        if (registry.exists(name)) {\n            throw new Error(\"Invalid [transformer] named: \" + name +\n                            \" already exist\");\n        }\n\n        registry.set(name, promiseGuard(transformer));\n\n    }\n\n\nexport\n    function exists(name) {\n        return REGISTRY.exists(name);\n    }\n\nexport\n    function get(name) {\n        var registry = REGISTRY;\n        return registry.exists(name) ? registry.get(name) : null;\n    }\n","'use strict';\n\nimport {\n            string,\n            array\n            \n        } from \"libcore\";\n\nfunction Symbol(compiler) {\n    this.compiler = compiler;\n    this.type = this.type;\n\n    this.pendingCodes = [];\n}\n\nSymbol.prototype = {\n    constructor: Symbol,\n    id: null,\n    \n    autoDeclare: false,\n    declared: false,\n    value: null,\n    declareCode: null,\n\n    autoFinalize: false,\n    finalizeCode: null,\n    constant: false,\n\n    finalized: false,\n    initialized: false,\n\n    inFixCode: null,\n    postFixCode: null,\n\n    onInitialize: function (compiler, value, constantify) {\n        var symbols = compiler.symbols,\n            index = symbols.length,\n            id = 's' + index;\n\n        this.id = id;\n\n        // register\n        this.constant = constantify;\n        this.value = value;\n        this.references = [];\n\n        if (constantify) {\n            symbols.splice(0, 0, id);\n        }\n        else {\n            symbols[index] = id;\n        }\n\n        compiler.symbolConfig[id] = this;\n\n    },\n\n    onDeclare: function () {\n        var list = this.references,\n            len = list.length,\n            c = -1;\n        var item, value;\n\n        for (; len--;) {\n            item = list[++c];\n            item.declare();\n        }\n\n        value = this.getDeclarationValue();\n\n        if (value) {\n            this.generateCodeLines([[this.id, ' = ', value]]);\n        }\n    },\n\n    onDeclarePostFix: function (postfix) {\n        this.generateCodeLines(postfix);\n    },\n\n    onDeclareInfix: function (infix) {\n        this.generateCodeLines(infix);\n    },\n\n    initialize: function (value, constantify) {\n        if (!this.initialized) {\n            this.initialized = true;\n            \n            this.onInitialize(this.compiler,\n                                value,\n                                constantify === true || constantify === false ?\n                                    constantify : this.constant);\n\n            if (this.autoDeclare) {\n                this.declare();\n            }\n        }\n    },\n\n    declare: function () {\n        var compiler = this.compiler,\n            postfix = this.postFixCode,\n            infix = this.inFixCode;\n\n        // run declaration\n        if (!this.declared) {\n            this.declared = true;\n\n            this.onDeclare(compiler);\n        }\n\n        // run infix\n        if (infix) {\n            this.onDeclareInfix(infix);\n\n            delete this.inFixCode;\n        }\n        \n        // postfix code\n        if (postfix) {\n            this.onDeclarePostFix(postfix);\n\n            // run once\n            delete this.postFixCode;\n\n            // should redeclare when needed again\n            delete this.declared;\n        }\n\n        return this;\n\n    },\n\n    redeclare: function () {\n        if (this.declared) {\n            this.declared = false;\n        }\n        return this.declare();\n    },\n\n    addDependency: function (symbol) {\n        var list = this.references;\n\n        if (!(symbol instanceof Symbol)) {\n            throw new Error(\"Invalid [symbol] dependency.\");\n        }\n\n        list[list.length] = symbol;\n\n        return this;\n    },\n\n    typeofSymbol: function () {\n        return this.createVariableOfMe('typeof ' + this.id);\n    },\n\n    notSymbol: function () {\n        return this.createVariableOfMe('!' + this.id);\n    },\n\n    \n\n    getDeclarationValue: function () {\n        return this.getCodeValue();\n    },\n\n    getCodeValue: function () {\n        return this.value;\n    },\n\n    generateCodeLines: function (value, force) {\n        var compiler = this.compiler,\n            isArray = array,\n            isString = string,\n            pending = this.pendingCodes,\n            commit = this.declared || force === true;\n        var c, l, item, pl;\n\n        if (isString(value)) {\n            value = [[value]];\n        }\n\n        if (isArray(value)) {\n            pl = pending.length;\n            for (c = -1, l = value.length; l--;) {\n                item = value[++c];\n                if (isArray(item) || isString(item)) {\n                    pending[pl++] = item;\n                }\n            }\n        }\n\n        // commit\n        if (commit) {\n            for (c = -1, l = pending.length; l--;) {\n                compiler.appendCode(pending[++c]);\n            }\n            pending.splice(0, pending.length);\n        }\n\n        return this;\n    },\n\n    generateInfix: function (code) {\n        var current = this.inFixCode,\n            isArray = array,\n            isString = string;\n        var c, l, item, cl;\n\n        if (!current) {\n            current = this.inFixCode = [];\n        }\n        \n        if (isString(code)) {\n            code = [code];\n        }\n\n        if (isArray(code)) {\n            cl = current.length;\n            for (c = -1, l = code.length; l--;) {\n                item = code[++c];\n                if (isArray(item) || isString(item)) {\n                    current[cl++] = item;\n                }\n            }\n        }\n\n    },\n\n    generatePostFix: function (code) {\n        var current = this.postFixCode,\n            isArray = array,\n            isString = string;\n        var c, l, item, cl;\n\n        if (!current) {\n            current = this.postFixCode = [];\n        }\n        \n        if (isString(code)) {\n            code = [code];\n        }\n\n        if (isArray(code)) {\n            cl = current.length;\n            for (c = -1, l = code.length; l--;) {\n                item = code[++c];\n                if (isArray(item) || isString(item)) {\n                    current[cl++] = item;\n                }\n            }\n        }\n    },\n\n    getHelperId: function () {\n        return this.compiler.helperSymbol.id;\n    },\n\n    getContextId: function () {\n        return this.compiler.contextSymbol.id;\n    },\n\n    createVariableOfMe: function (value) {\n        var identifier;\n\n        if (array(value)) {\n            value = value.join('');\n        }\n\n        if (!string(value)) {\n            value = this.id;\n        }\n\n        identifier = this.compiler.createSymbol(value, \"identifier\");\n        identifier.symbolAccess = true;\n        identifier.addDependency(this);\n\n        return identifier;\n\n    }\n\n\n};\n\nexport default Symbol;","'use strict';\n\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport Symbol from \"./base.js\";\n\nvar INVALID_TYPE = \"Invalid [type] parameter.\",\n    INVALID_CLASS = \"Invalid Symbol [Class] parameter.\",\n    INVALID_NON_EXISTENT_TYPE = \"Symbol do not exist from [type] parameter\",\n    REGISTRY = createRegistry();\n\nfunction instantiate(type, compiler) {\n    var registry = REGISTRY;\n    var Class;\n\n    if (!string(type)) {\n        throw new Error(INVALID_TYPE);\n    }\n\n    Class = registry.get(type);\n\n    if (!Class) {\n        throw new Error(INVALID_NON_EXISTENT_TYPE);\n    }\n\n    return new Class(compiler);\n    \n}\n\nfunction register(type, Class) {\n    var Base = Symbol;\n\n    if (!string(type)) {\n        throw new Error(INVALID_TYPE);\n    }\n\n    if (!method(Class) ||\n        !(Class === Base || (Class.prototype instanceof Base))) {\n        throw new Error(INVALID_CLASS);\n    }\n    \n    REGISTRY.set(Class.prototype.type = type,\n                Class);\n}\n\nexport {\n    Symbol as Base,\n    instantiate,\n    register\n};","'use strict';\n\nimport {\n            jsonParsePath\n        } from \"libcore\";\nimport {\n            string,\n            number\n        } from \"libcore\";\n\nvar UTF_PAD = '0000',\n    NUMERIC_RE = /^([1-9][0-9]*|0)$/g,\n    ESCAPE_CHARS = {\n        0: '0',\n        8: 'b',\n        9: 't',\n        10: 'n',\n        11: 'v',\n        12: 'f',\n        13: 'r',\n        34: '\"',\n        39: \"'\",\n        91: \"[\",\n        92: '\\\\',\n        93: \"]\"\n    };\n\nexport {\n            jsonParsePath as jsonParse\n        };\n\nexport\n    function escapeString(subject) {\n        var escapeIndex = ESCAPE_CHARS,\n            backslash = '\\\\',\n            utf = backslash + \"u\",\n            pad = UTF_PAD,\n            pl = pad.length,\n            l = subject.length,\n            out = Array.prototype.slice.call(subject, 0);\n        var code;\n\n        out.length = l;\n\n        for (; l--;) {\n            code = subject.charCodeAt(l);\n            if (code in escapeIndex) {\n                out[l] = backslash + escapeIndex[code];\n\n            }\n            else if (code < 32 || code > 126) {\n                code = code.toString(16);\n                out[l] = utf +\n                            pad.substring(0, pl - code.length) +\n                            code.toLowerCase();\n            }\n        }\n\n        return out.join('');\n    }\n\nexport\n    function numeric(subject) {\n        return string(subject) ?\n                    NUMERIC_RE.test(subject) :\n                    number(subject);\n    }\n\nexport\n    function jsonRecodeArrayPath(jsonString, raw) {\n        var path = jsonParsePath(jsonString),\n            cescape = escapeString,\n            l = path && path.length;\n\n        if (l) {\n            for (; l--;) {\n                path[l] = '\"' + cescape(path[l]) + '\"';\n            }\n            return raw === true ? path : '[' + path.join(',') + ']';\n        }\n        return raw === true ? [] : '[]';\n    }\n\n","'use strict';\n\nimport {\n            string,\n            number,\n            contains,\n            jsonFill,\n            jsonFind,\n            jsonUnset,\n            thenable\n        } from \"libcore\";\n\nimport {\n            numeric,\n            escapeString\n        } from \"../helper/string.js\";\n\n\nimport {\n            get as getTransformer\n        } from \"../transformer/registry.js\";\n\nimport {\n            get as getIntent\n        } from \"../intent/registry.js\";\n\n\n\nfunction Helper() {\n    this.transformCache = {};\n    this.intentCache = {};\n}\n\nHelper.prototype = {\n\n    constructor: Helper,\n\n    contains: contains,\n    number: number,\n\n    validProperty: function (property) {\n        return string(property) || number(property);\n    },\n\n    get: function (subject, paths) {\n        \n        return jsonFind(this.createJsonPath(paths), subject);\n        \n    },\n\n    set: function (subject, paths, value) {\n\n        jsonFill(this.createJsonPath(paths), subject, value);\n\n        return value;\n        \n    },\n\n    unset: function (subject, paths) {\n        \n        return jsonUnset(this.createJsonPath(paths), subject);\n        \n    },\n\n    createJsonPath: function (paths) {\n        var strEscape = escapeString,\n            isNumeric = numeric,\n            l = paths.length;\n        var item;\n\n        paths = paths.slice(0);\n\n        // create path\n        for (; l--;) {\n            item = paths[l];\n            // quote\n            paths[l] = '[' +\n                        (isNumeric(item) ?\n                                item :\n                                '\"' + strEscape(item) + '\"') + ']';\n        }\n\n        return paths.join('');\n    },\n\n    getTransformer: function(name) {\n        var access = ':' + name,\n            list = this.transformCache;\n        var found;\n\n        if (access in list) {\n            return list[access];\n        }\n\n        found = getTransformer(name);\n        if (!found) {\n            throw new Error(\"Transformer named \" + name + \" do not exist.\");\n        }\n\n        return (list[access] = found);\n\n    },\n\n    getIntent: function(name) {\n        var access = ':' + name,\n            list = this.intentCache;\n        var found;\n\n        if (access in list) {\n            return list[access];\n        }\n\n        found = getIntent(name);\n        if (!found) {\n            throw new Error(\"Intent named \" + name + \" do not exist.\");\n        }\n\n        return (list[access] = found);\n    },\n\n    intent: function (name, value) {\n        return this.getIntent(name)(this, value);\n    },\n\n    transform: function (name, value) {\n        return this.getTransformer(name)(this, value);\n    },\n\n    formatReturn: function (value) {\n        return thenable(value) ?\n                    value : Promise.resolve(value);\n    },\n\n    reject: function (error) {\n        return Promise.reject(error);\n    }\n\n    \n};\n\nexport { Helper };\n\nexport default Helper;","'use strict';\n\nvar TYPE_NUMBER = 'number';\n\nfunction compileTerminal(context, lexeme) {\n    var cache = lexeme.value,\n        name = lexeme.name,\n        value = cache;\n\n    switch (lexeme.name) {\n    case \"decimal\":\n        value = context.createSymbol(value, TYPE_NUMBER);\n        break;\n\n    case \"hex\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 16),\n                        TYPE_NUMBER);\n        break;\n\n    case \"octal\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 8),\n                        TYPE_NUMBER);\n        break;\n\n    case \"binary\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 2),\n                        TYPE_NUMBER);\n        break;\n        \n    case \"string\":\n    case \"boolean\":\n    case \"null\":\n    case \"undefined\":\n    case \"identifier\":\n    case \"jsonpath\":\n        value = context.createSymbol(value, name);\n        break;\n    }\n    \n\n    if (cache !== value) {\n        context.updateIterator(value);\n    }\n}\n\n\n// identifier\nexport default compileTerminal;\n","'use strict';\n\n\n\nimport {\n            //jsonRecodeArrayPath,\n            escapeString\n        } from \"../helper/string.js\";\n\nvar TYPE_ARGUMENTS = \"arguments\",\n    TYPE_IDENTIFIER = \"identifier\";\n\nexport\n    function compileRule(compiler, lexeme) {\n        var cache = lexeme.value,\n            value = cache;\n        var condition, item1, item2;\n        \n        switch (lexeme.name) {\n        // relay all\n        case \"Number\":\n        case \"Javascript\":\n            value = value[0];\n            break;\n\n        default:\n            switch (lexeme.rule) {\n            // relay rules\n            case \"2:Literal\":\n            case \"3:Literal\":\n            case \"4:Literal\":\n            case \"5:Literal\":\n            case \"6:Literal\":\n            case \"7:Literal\":\n            case \"1:Primary\":\n            case \"2:Primary\":\n            case \"3:Primary\":\n            case \"4:Primary\":\n            case \"5:Primary\":\n            case \"1:Updatable\":\n            case \"1:PostFix\":\n            case \"1:Unary\":\n            case \"1:Exponential\":\n            case \"1:Multiplicative\":\n            case \"1:Additive\":\n            case \"1:Relational\":\n            case \"1:Equality\":\n            case \"1:LogicalAnd\":\n            case \"1:LogicalOr\":\n            case \"1:Conditional\":\n            case \"1:Assignment\":\n            \n            case \"1:Javascript\":\n            case \"2:Javascript\":\n            case \"1:Transform\":\n                value = value[0];\n                break;\n\n            // void\n            case \"1:Void\":\n                value = compiler.createSymbol(\"void(\" + value[1].id + ')',\n                                                TYPE_IDENTIFIER).\n                                setSymbolAccess().\n                                addDependency(value[1]);\n                break;\n            \n            // this\n            case \"1:Literal\":\n                value = compiler.createSymbol(compiler.contextSymbol.id,\n                                                TYPE_IDENTIFIER).\n                                setSymbolAccess();\n                break;\n\n\n            // relay group\n            case \"1:Group\":\n                value = value[1];\n                break;\n            \n            // array\n            case \"1:Array\":\n                value = compiler.createSymbol(\"[]\",\n                                                TYPE_IDENTIFIER).\n                            setSymbolAccess();\n                break;\n\n            case \"2:Array\": // relay Elements\n                value = value[1];\n                break;\n\n            case \"1:Elements\":\n                value = compiler.createSymbol(null, \"array\").\n                            append(value[0]);\n                break;\n\n            case \"2:Elements\":\n                value = value[0].\n                            append(value[2]);\n                break;\n\n            // object\n            case \"1:Object\":\n                value = compiler.createSymbol(\"{}\", TYPE_IDENTIFIER).\n                            setSymbolAccess();\n                break;\n\n            case \"2:Object\":\n                value = value[1];\n                break;\n\n            case \"1:Properties\":\n                value = value[0];\n                value = compiler.createSymbol(null, \"object\").\n                            append(value[1], value[0]);\n                break;\n            \n            case \"2:Properties\":\n                item1 = value[2];\n                value = value[0].append(item1[1], item1[0]);\n                break;\n\n            case \"1:Property\": // relay\n            case \"2:Property\": // relay\n            case \"3:Property\": // relay\n                value = [value[0].value, value[2]];\n                \n                break;\n            \n            \n            // arguments\n            case \"1:Arguments\": // relay\n                value = compiler.createSymbol(null, TYPE_ARGUMENTS);\n                break;\n\n            case \"2:Arguments\": // relay\n                value = value[1];\n                break;\n\n            case \"1:ArgumentList\":\n                value = compiler.createSymbol(null, TYPE_ARGUMENTS).\n                            append(value[0]);\n                break;\n\n            case \"2:ArgumentList\":\n                value = value[0].append(value[2]);\n                break;\n\n            // function call\n            case \"6:Primary\":\n                value = compiler.createSymbol(null, \"call\").\n                            useReference(value[0]).\n                            useArguments(value[1]);\n                break;\n            // new object\n            case \"7:Primary\":\n                value = value[1].instantiate();\n                break;\n\n            // direct access is a property of context symbol\n            case \"2:Updatable\":\n                value = compiler.contextSymbol.access(value[0], true);\n                break;\n\n            case \"3:Updatable\":\n                value = value[0].access(value[2], true);\n                break;\n\n            case \"4:Updatable\":\n                value = value[0].access(value[2], false);\n                break;\n\n            \n\n            // ++\n            case \"2:PostFix\":\n                value = value[0].increment(true);\n                break;\n\n            // -- \n            case \"3:PostFix\":\n                value = value[0].decrement(true);\n                break;\n\n\n            // ++ infix\n            case \"2:Unary\":\n                value = value[1].increment(false);\n                break;\n\n            // -- infix\n            case \"3:Unary\":\n                value = value[1].decrement(false);\n                break;\n            \n            // positive sign\n            case \"4:Unary\":\n                value = value[1].positive(false);\n                break;\n\n            // negative sign\n            case \"5:Unary\":\n                value = value[1].negative(false);\n                break;\n\n            // typeof\n            case \"6:Unary\":\n                value = value[1].typeofSymbol();\n                break;\n\n            // !not\n            case \"7:Unary\":\n                value = value[1].notSymbol();\n                break;\n\n            // ***\n            case \"2:Exponential\":\n                value = value[0].exponential(value[2]);\n                break;\n            \n            // *\n            case \"2:Multiplicative\":\n                value = value[0].multiplication(value[2]);\n                break;\n\n            // /\n            case \"3:Multiplicative\":\n                value = value[0].division(value[2]);\n                break;\n\n            // %\n            case \"4:Multiplicative\":\n                value = value[0].modulo(value[2]);\n                break;\n\n            // -\n            case \"2:Additive\":\n                value = value[0].subtraction(value[2]);\n                break;\n\n            // +\n            case \"3:Additive\":\n                value = value[0].addition(value[2]);\n                break;\n            \n            // <\n            case \"2:Relational\":\n            case \"3:Relational\":\n                value = value[0].lt(value[2]);\n                break;\n            \n            // >\n            case \"4:Relational\":\n            case \"5:Relational\":\n                value = value[0].gt(value[2]);\n                break;\n\n            // <=\n            case \"6:Relational\":\n            case \"7:Relational\":\n                value = value[0].lte(value[2]);\n                break;\n\n            // >=\n            case \"8:Relational\":\n            case \"9:Relational\":\n                value = value[0].gte(value[2]);\n                break;\n\n            case \"10:Relational\":\n                value = value[0].instanceOf(value[2]);\n                break;\n\n            case \"11:Relational\":\n                value = value[0].inOp(value[2]);\n                break;\n\n            case \"2:Equality\":\n                value = value[0].equal(value[2]);\n                break;\n\n            case \"3:Equality\":\n                value = value[0].notEqual(value[2]);\n                break;\n\n            case \"4:Equality\":\n                value = value[0].sequal(value[2]);\n                break;\n\n            case \"5:Equality\":\n                value = value[0].notSequal(value[2]);\n                break;\n\n            case \"2:LogicalAnd\":\n            case \"3:LogicalAnd\":\n                value = value[0].and(value[2]);\n                break;\n\n            case \"2:LogicalOr\":\n            case \"3:LogicalOr\":\n                value = value[0].or(value[2]);\n                break;\n\n            case \"2:Conditional\":\n                item1 = value[2];\n                item2 = value[4];\n                condition = value[0];\n\n                value = compiler.createSymbol(null, TYPE_IDENTIFIER).\n                            setSymbolAccess().\n                            addDependency(condition);\n\n                item1 = compiler.createSymbol(null, \"block\").\n                                setStatement([\n                                    'if (', condition.id, ')'\n                                ]).\n                                setResultIdentifier(value.id).\n                                addDependency(item1);\n                \n                item2 = compiler.createSymbol(null, \"block\").\n                                setStatement('else').\n                                setResultIdentifier(value.id).\n                                addDependency(item2);\n\n                value.addDependency(item1).\n                    addDependency(item2);\n\n                break;\n\n            // assignment\n            case \"2:Assignment\":\n            case \"3:Assignment\":\n            case \"4:Assignment\":\n            case \"5:Assignment\":\n            case \"6:Assignment\":\n            case \"7:Assignment\":\n            case \"8:Assignment\":\n                value = value[0].assign(value[2], value[1]);\n                //value = assign(context, value[1], value[0], value[2]);\n\n                break;\n            \n            // delete statement\n            case \"1:Delete\":\n                value = value[1].unset();\n                break;\n\n            // transformer namespace\n            case \"1:Namespace\":\n                value = value[0].setSymbolAccess();\n                break;\n\n            case \"2:Namespace\":\n                value = value[0].setValue(value[0].value +\n                                            '.' +\n                                            value[2].value);\n                break;\n\n            // transformer\n            case \"1:Transformer\": // relay\n                value = compiler.createSymbol(null, \"transformer\").\n                                useReference(value[0]);\n                break;\n\n            case \"2:Transformer\": // relay\n                value = compiler.createSymbol(null, \"transformer\").\n                                useReference(value[0]).\n                                useArguments(value[1]);\n                break;\n\n            // transform\n            case \"2:Transform\":\n                value = value[2].setBaseArgument(value[0]);\n                break;\n\n            // last\n            case \"1:Joqx\":\n                value = value[0];\n                break;\n\n            case \"2:Joqx\":\n                item1 = value[0];\n                item2 = value[1];\n                value = compiler.createSymbol(compiler.helperSymbol.id +\n                                '.intent(\"' +\n                                    escapeString(item1.\n                                        substring(1, item1.length)) + '\",' +\n                                        item2.id + ')',\n                                TYPE_IDENTIFIER).\n                            setSymbolAccess().\n                            addDependency(item2);\n                // console.log(\"intent \", value[0]);\n                // value = value[1];\n                break;\n\n            case \"1:Joqx'\":\n                value = value[0];\n                value.declare();\n                compiler.appendCode([\n                    value.id, ' = ', compiler.helperSymbol.id,\n                                '.formatReturn(', value.id, ')'\n                ]);\n                compiler.nullFill(value.id);\n                compiler.appendCode([\n                    'return ', value.id\n                ]);\n            }\n        }\n\n        // update lexeme value\n        if (cache !== value) {\n            compiler.updateIterator(value);\n        }\n    }\n\n\n\nexport default compileRule;","'use strict';\n\nimport { string } from \"libcore\";\n\nimport { iterator } from \"./parser/index.js\";\n\nimport { Compile } from \"./compile/class.js\";\n\nimport { Helper } from \"./context/helper.js\";\n\nimport handleTerminal from \"./compile/terminal.js\";\n\nimport handleRule from \"./compile/rule.js\";\n\nconst helper = new Helper();\n\nfunction compile(subject) {\n    var F = compile.constructor,\n        compileTerminal = handleTerminal,\n        compileRule = handleRule,\n        compiled = null,\n        walk = iterator;\n\n    var lexeme, generated, compiler;\n\n    function exec(contextObject) {\n        try {\n            return compiled(helper, contextObject);\n        }\n        catch (e) {\n            console.warn(e);\n        }\n        \n        return undefined;\n    }\n\n    if (!string(subject)) {\n        throw new Error(\"Invalid String [subject] parameter.\");\n    }\n\n    compiler = new Compile(walk);\n    \n    walk.reset();\n    walk.set(subject);\n\n    walk.completed = false;\n\n    lexeme = walk.next();\n\n    for (; lexeme; lexeme = walk.next()) {\n        \n        // for terminal\n        (lexeme.terminal ?\n            compileTerminal :\n            compileRule)(compiler, lexeme);\n    }\n\n    if (!walk.error && walk.completed) {\n\n        generated = compiler.generate();\n\n        //console.log(\"source: \", subject, \"\\n compiled: \\n\", generated);\n\n        compiled = new F('helper, context', generated);\n\n        return exec;\n    \n    }\n\n    return null;\n\n    \n\n}\n\nexport default compile;\n","'use strict';\n\n// test\nimport { register as regIntent } from \"./intent/registry.js\";\n\nimport { register as regTransformer } from \"./transformer/registry.js\";\n\nimport compile from \"./compile.js\";\n\n\nconst API = {\n            intent: intent,\n            transformer: transformer,\n            compile: compile\n        };\n\nexport default API;\n\nexport {\n            compile\n        };\n\nexport\n    function intent(name, intentMethod) {\n        regIntent(name, intentMethod);\n        return API;\n    }\n\nexport\n    function transformer(name, transformerMethod) {\n        regTransformer(name, transformerMethod);\n        return API;\n    }\n\n\n","export default typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {}\n","'use strict';\n\n\nimport Parser from \"libcore-parser-lalr\";\n\n\nimport data from \"./states.json\";\n\nexport\n    const   parser = Parser.load(data),\n            iterator = parser.iterator();\n\nexport default iterator;\n\n","'use strict';\n\n\nimport Base from \"./base.js\";\n\nvar INVALID_ACCESS = \"Invalid object access in [reference] parameter. \",\n    INVALID_ACCESS_NOT_ALLOWED = \"Unable to access property. \",\n    INVALID_UPDATE_ACCESS_OBJECT = \"Invalid Object to update access. \",\n    INVALID_ACCESS_UPDATE = \"Unable to update access of object. \";\n\nexport default\n    class Native extends Base {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.reference =\n                this.autoDeclare = \n                this.allowAccess = true;\n\n            this.finalizeOnAccess = true;\n\n            this.allowBinaryOperation = [\n                '**',\n                '*',\n                '/',\n                '%',\n                '+',\n                '-',\n                '<',\n                '>',\n                '<=',\n                '>=',\n                'instanceof',\n                'in',\n                '==',\n                '===',\n                '!=',\n                '!==',\n                '&&',\n                '||'\n            ];\n\n        }\n\n        onAccess() {\n            if (this.finalizeOnAccess) {\n                this.declare();\n            }\n        }\n\n        createUpdateAccessSymbol(from, directAccess) {\n            var identifier;\n\n            // pray that runtime can generate string\n            this.declare();\n\n            // create identifier\n            identifier = this.createVariableOfMe();\n            identifier.directAccess = directAccess;\n            identifier.accessParent = from;\n            \n            return identifier;\n            \n        }\n\n        access(reference, directAccess) {\n\n            if (!(reference instanceof Base)) {\n                throw new Error(INVALID_ACCESS);\n            }\n\n            if (!this.allowAccess) {\n                throw new Error(INVALID_ACCESS_NOT_ALLOWED);\n            }\n            \n            directAccess = directAccess === true;\n\n            this.onAccess(reference, directAccess);\n\n            // update access\n            return reference.updateAccess(this, directAccess);\n\n        }\n\n        updateAccess(from, directAccess) {\n\n            if (!(from instanceof Base)) {\n                throw new Error(INVALID_UPDATE_ACCESS_OBJECT);\n            }\n\n            if (!this.allowAccessUpdate) {\n                throw new Error(INVALID_ACCESS_UPDATE + from.type);\n            }\n\n            return this.createUpdateAccessSymbol(from, directAccess);\n\n        }\n\n        assign() {\n            throw new Error(\"Invalid Assignment\");\n        }\n\n        instantiate() {\n            throw new Error(\"Invalid Instantiation\");\n        }\n\n        unset() {\n            throw new Error(\"Invalid Delete statement\");\n        }\n\n// arithmetic\n        binaryOperation(operand, operation) {\n            var allow = this.allowBinaryOperation;\n            var symbol;\n\n            if (!(operand instanceof Base)) {\n                throw new Error(\"Invalid [operand] parameter.\");\n            }\n\n            if (allow.indexOf(operation) === -1) {\n                throw new Error(\"Operation not allowed \" + operation +\n                                \" for \" + operand.type);\n            }\n\n            // apply operation\n            switch (operation) {\n            case '**':\n                symbol = this.createVariableOfMe(['Math.pow(', this.id, ',',\n                                                            operand.id, ')']);\n                break;\n\n            default:\n                symbol = this.createVariableOfMe([this.id, ' ',\n                                                operation, ' ',\n                                                operand.id]);\n            }\n\n            return symbol.addDependency(operand);\n\n\n        }\n\n        exponential(operand) {\n            return this.binaryOperation(operand, '**');\n        }\n\n        multiplication(operand) {\n            return this.binaryOperation(operand, '*');\n        }\n\n        division(operand) {\n            return this.binaryOperation(operand, '/');\n        }\n\n        modulo(operand) {\n            return this.binaryOperation(operand, '%');\n        }\n\n        addition(operand) {\n            return this.binaryOperation(operand, '+');\n        }\n\n        subtraction(operand) {\n            return this.binaryOperation(operand, '-');\n        }\n\n        lt(operand) {\n            return this.binaryOperation(operand, '<');\n        }\n\n        lte(operand) {\n            return this.binaryOperation(operand, '<=');\n        }\n\n        gt(operand) {\n            return this.binaryOperation(operand, '>');\n        }\n\n        gte(operand) {\n            return this.binaryOperation(operand, '>=');\n        }\n\n        instanceOf(operand) {\n            return this.binaryOperation(operand, 'instanceof');\n        }\n\n        inOp(operand) {\n            return this.binaryOperation(operand, 'in');\n        }\n\n        equal(operand) {\n            return this.binaryOperation(operand, '==');\n        }\n\n        sequal(operand) {\n            return this.binaryOperation(operand, '===');\n        }\n\n        notEqual(operand) {\n            return this.binaryOperation(operand, '!=');\n        }\n\n        notSequal(operand) {\n            return this.binaryOperation(operand, '!==');\n        }\n\n        and(operand) {\n            return this.binaryOperation(operand, '&&');\n        }\n\n        or(operand) {\n            return this.binaryOperation(operand, '||');\n        }\n\n        guard() {\n\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class UndefinedSymbol extends Base {\n        \n        constructor(compiler) {\n            super(compiler);\n            this.allowAccess = \n                this.autoDeclare = false;\n            \n        }\n        \n    }","'use strict';\n\n\nimport UndefinedSymbol from \"./undefined.js\";\n\n\nexport default\n    class NullSymbol extends UndefinedSymbol {\n        \n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class StringSymbol extends Base {\n        \n    }","'use strict';\n\nimport { string } from \"libcore\";\n\nimport Base from \"./native.js\";\n\nvar SIGN_RE = /[\\-\\+]/g;\n\n\nexport default\n    class NumberSymbol extends Base {\n\n        positive() {\n            var value = this.value;\n\n            if (string(value)) {\n                this.value = '+' + value.replace(SIGN_RE, '');\n                this.redeclare();\n            }\n\n            return this;\n        }\n\n        negative() {\n            var value = this.value;\n\n            if (string(value)) {\n                this.value = '-' + value.replace(SIGN_RE, '');\n                this.redeclare();\n            }\n\n\n            return this;\n        }\n\n\n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class BooleanSymbol extends Base {\n        \n    }","'use strict';\n\nimport Base from \"./base.js\";\n\nimport NativeObject from \"./native.js\";\n\nvar INVALID_ITEM = \"Invalid Symbol [item] parameter.\",\n    INVALID_NOT_ALLOWED_ITEM = \"Appending Symbol [item] is not allowed.\";\n\n\nexport default\n    class Collection extends NativeObject {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare = false;\n\n            this.data = [];\n\n        }\n\n        allowAppend() {\n            return true;\n        }\n\n        append(item) {\n            var list = this.data;\n\n            if (!(item instanceof Base)) {\n                throw new Error(INVALID_ITEM);\n            }\n\n            if (!this.allowAppend(item)) {\n                throw new Error(INVALID_NOT_ALLOWED_ITEM + item.type);\n            }\n\n            list[list.length] = item;\n\n            return this;\n\n        }\n\n        getCodeValue() {\n            var data = this.data,\n                c = -1,\n                l = data.length,\n                generated = [];\n            var symbol;\n\n            for (; l--;) {\n                symbol = data[++c];\n                symbol.declare();\n                generated[c] = this.generateItemCode(symbol, c);\n                \n            }\n\n            return generated.join(',');\n\n        }\n\n        generateItemCode(symbol) {\n            return symbol.id;\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./collection.js\";\n\n\nexport default\n    class Array extends Base {\n\n        getCodeValue() {\n            return '[' + super.getCodeValue() + ']';\n        }\n        \n    }","'use strict';\n\nimport { string } from \"libcore\";\n\nimport Base from \"./base.js\";\n\nimport NativeSymbol from \"./native.js\";\n\n\nexport default\n    class Identifier extends NativeSymbol {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare =\n                this.directAccess = \n                this.symbolAccess =\n                this.finalizeOnAccess = \n                this.disableValueRecode = false;\n\n            this.accessParent = null;\n\n            this.references = [];\n            \n            this.allowAccess = \n                this.allowAccessUpdate = true;\n\n            this.accessOrigin = null;\n\n        }\n\n        setAccessOrigin(item) {\n            this.accessOrigin = item;\n            return this;\n        }\n\n        setSymbolAccess(isSymbolAccess) {\n            this.symbolAccess = isSymbolAccess !== false;\n            return this;\n        }\n\n        setFinalizeOnAccess(isFinalizedOnAccess) {\n            this.finalizeOnAccess = isFinalizedOnAccess !== false;\n            return this;\n        }\n\n        // do not declare\n        getDeclarationValue() {\n            // if (this.disableValueRecode) {\n            //     return '';\n            // }\n            \n            return this.symbolAccess ?\n                        this.getCodeValue() :\n                        this.getAccessCodeValue();\n        }\n\n        setValue(value) {\n            this.value = value;\n            return this;\n        }\n\n        getCodeValue() {\n            var value = this.value;\n            \n            return string(value) ?\n                        this.symbolAccess ?\n                            value :\n                            '\"' + value + '\"' :\n                        null;\n        }\n\n        getAccessCodeValue() {\n            return ([\n                this.getHelperId(), \".get(\",\n                            this.getAccessOrigin(), ',',\n                            this.generateJSONPathArray(), ')'\n            ]).join('');\n        }\n\n        getAccessOrigin() {\n            var item = this.accessOrigin;\n            return string(item) ? item : this.getContextId();\n        }\n\n        generateJSONPathArray() {\n            var current = this,\n                list = [];\n            var next;\n\n            for (; current.accessParent; current = next) {\n                list.unshift(current.getCodeValue());\n\n                next = current.accessParent;\n\n                if (next && next.type === \"jsonpath\") {\n                    list.unshift.apply(list, next.getPathParts());\n                    break;\n                }\n\n            }\n\n            return '[' + list.join(',') + ']';\n\n        }\n\n        createUpdateAccessSymbol(from, directAccess) {\n            // if not direct access, resolve value and create another identifier\n            if (!directAccess) {\n                return super.createUpdateAccessSymbol(from, directAccess);\n            }\n            \n            this.directAccess = directAccess;\n            this.accessParent = from;\n            \n            // reuse me\n            return this;\n            \n        }\n\n        \n\n        assign(source, operator) {\n            var jsonPath = this.generateJSONPathArray(),\n                helper = this.getHelperId(),\n                context = this.getContextId(),\n                codes = [],\n                line = 0,\n                sourceId = source.id,\n                id = this.id,\n                sourceReference = sourceId;\n\n            // source should be finalized if not yet finalized\n            this.addDependency(source);\n\n\n            codes[line++] = ['// assign'];\n            \n            // for arithmetic assignment\n            if (string(operator)) {\n\n                operator = operator.substring(0, operator.length - 1);\n\n                switch (operator) {\n                case '**':\n                    sourceReference = 'Math.pow(' + id + ', ' + sourceId + ')';\n                    break;\n\n                case '*':\n                case '/':\n                case '%':\n                case '+':\n                case '-':\n                    sourceReference = id + ' ' + operator + ' ' + sourceId;\n                }\n            }\n\n\n            // assign\n            codes[line++] = [\n                id, ' = ', helper, '.set(', context, ',',\n                                            jsonPath, ',',\n                                            sourceReference, ')'\n            ];\n            \n            this.generateInfix(codes);\n\n            return this;\n        }\n\n        instantiate() {\n            var symbol = this.createVariableOfMe([\n                                    'new ' + this.id\n                                ],\n                                \"identifier\");\n            return symbol;\n        }\n\n        unset() {\n            this.generateInfix([[\n                this.getHelperId(), '.unset(', this.getContextId(), ',',\n                                    this.generateJSONPathArray(), ')'\n            ]]);\n            return this;\n        }\n\n        increment(postfix) {\n\n            if (postfix) {\n                this.generatePostFix([[\n                        this.getHelperId(), '.set(', this.getContextId(), ',',\n                                            this.generateJSONPathArray(), ',',\n                                            this.id, ' + 1)'\n                    ]]);\n\n                this.declared = false;\n\n\n            }\n            // infix is normal call to assign with += operator\n            else {\n                this.assign(this.compiler.createSymbol('1', \"number\"), '+=');\n            }\n            \n\n            return this;\n\n        }\n\n        decrement(postfix) {\n            \n            if (postfix) {\n                this.generatePostFix([[\n                        this.getHelperId(), '.set(', this.getContextId(), ',',\n                                            this.generateJSONPathArray(), ',',\n                                            this.id, ' - 1)'\n                    ]]);\n\n            }\n            // infix is normal call to assign with += operator\n            else {\n                this.assign(this.compiler.createSymbol('1', \"number\"), '-=');\n            }\n\n            return this;\n\n        }\n\n\n        \n\n\n        \n    }","'use strict';\n\n\nimport IdentifierSymbol from \"./identifier.js\";\n\nimport {\n            jsonRecodeArrayPath\n            \n        } from \"../../helper/string.js\";\n\n\nexport default\n    class JsonPath extends IdentifierSymbol {\n        constructor(compiler) {\n            super(compiler);\n\n            this.symbolAccess = true;\n        }\n\n        getCodeValue() {\n            return this.getAccessCodeValue();\n        }\n\n        getPathParts() {\n            var path = this.value;\n            path = path.substring(1, path.length);\n            return jsonRecodeArrayPath(path, true);\n        }\n\n        generateJSONPathArray() {\n            var path = this.value;\n            path = path.substring(1, path.length);\n            return jsonRecodeArrayPath(path);\n            \n        }\n\n        assign(source, operator) {\n            return super.assign(source, operator);\n        }\n    }","'use strict';\n\n\nimport CollectionSymbol from \"./collection.js\";\n\n\nexport default\n    class ObjectSymbol extends CollectionSymbol {\n\n        constructor(compiler) {\n            super(compiler);\n            this.dataAccess = [];\n\n        }\n\n        append(item, name) {\n            var list = this.dataAccess;\n            list[list.length] = name;\n            return super.append(item);\n        }\n        \n        getCodeValue() {\n            return '{' + super.getCodeValue() + '}';\n        }\n\n        generateItemCode(symbol, c) {\n            var name = this.dataAccess[c];\n            return name + ':' + symbol.id;\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./collection.js\";\n\n\nexport default\n    class Arguments extends Base {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare = false;\n\n        }\n\n        // arguments should not be declared\n        getDeclarationValue() {\n            return null;\n        }\n        \n    }","'use strict';\n\nimport NativeObject from \"./native.js\";\n\nimport Identifier from \"./identifier.js\";\n\nimport ArgumentSymbol from \"./arguments.js\";\n\nvar INVALID_ARGUMENTS = \"Invalid Arguments [symbol] parameter.\",\n    INVALID_CALLABLE = \"Invalid Callable [symbol] parameter. \",\n    INVALID_NOT_CALLABLE = \"Reference [symbol] is not callable. \";\n\n\nexport default\n    class CallSymbol extends Identifier {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare =\n                this.autoFinalize = false;\n\n            this.reference = \n                this.arguments = null;\n\n            this.constructorCall = false;\n            this.disableContext = false;\n        }\n\n        onUseReference() {\n\n        }\n\n        onUseArguments() {\n\n        }\n\n        instantiate() {\n            this.constructorCall = true;\n            return this;\n        }\n\n        getDeclarationValue() {\n            var reference = this.reference,\n                args = this.arguments;\n\n            if (reference) {\n                reference.declare();\n\n                args = this.getArgumentsCode();\n\n                return (this.constructorCall ?\n                            [\n                                'new ', reference.id, '(', args, ')'\n                            ] :\n                            [\n                                reference.id, '.call(', args, ')'\n                            ]).join('');\n\n            }\n            return null;\n\n        }\n\n        getArgumentsCode() {\n            var args = this.arguments;\n\n            args = args ?\n                        args.getCodeValue() : '';\n\n            return this.constructorCall ?\n                        args :\n                        this.getCallContext() + (args ? ',' + args : '');\n\n        }\n\n        getCallContext() {\n            var reference = this.reference;\n            var parent;\n\n            if (reference && reference.type === \"identifier\") {\n                parent = reference.accessParent;\n                if (parent) {\n                    parent.declare();\n                    return parent.id;\n                }\n            }\n\n            return this.getContextId();\n        }\n\n        useReference(symbol) {\n            if (!(symbol instanceof NativeObject)) {\n                throw new Error(INVALID_CALLABLE);\n            }\n\n            switch (symbol) {\n            case \"number\":\n                throw new Error(INVALID_NOT_CALLABLE);\n            }\n\n            this.reference = symbol;\n            this.onUseReference(symbol);\n\n            return this;\n        }\n\n        useArguments(symbol) {\n            if (!(symbol instanceof ArgumentSymbol)) {\n                throw new Error(INVALID_ARGUMENTS);\n            }\n\n            this.arguments = symbol;\n            this.onUseArguments(symbol);\n\n            return this;\n        }\n        \n    }","'use strict';\n\nimport CallSymbol from \"./call.js\";\n\n\nexport default\n    class TransformerCallSymbol extends CallSymbol {\n        constructor(compiler) {\n            super(compiler);\n\n            this.baseArgument = null;\n        }\n\n        onUseReference(symbol) {\n            symbol.setValue(\n                this.compiler.helperSymbol.id +\n                '.getTransformer(\"' + symbol.value + '\")');\n        }\n\n        setBaseArgument(item) {\n            this.addDependency(item).baseArgument = item;\n            return this;\n        }\n\n        getDeclarationValue() {\n            var reference = this.reference,\n                args = this.arguments;\n\n            if (reference) {\n                reference.declare();\n\n                args = this.getArgumentsCode();\n\n                return ([ reference.id, '(', args, ')']).join('');\n\n            }\n            return null;\n\n        }\n\n        getArgumentsCode() {\n            var args = this.arguments,\n                base = this.baseArgument;\n\n            args = args ?\n                        args.getCodeValue() : '';\n\n            if (base) {\n                args = args ?\n                             base.id + ',' + args :\n                             base.id;\n            }\n\n            return this.compiler.helperSymbol.id + (args ? ',' + args : '');\n\n        }\n    }","'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nimport IdentifierSymbol from \"./identifier.js\";\n\n\nclass BlockSymbol extends IdentifierSymbol {\n\n    constructor(compiler) {\n        super(compiler);\n        this.blockStatement = null;\n        this.resultIdentifier = null;\n    }\n\n\n    onDeclare() {\n        var statement = this.blockStatement;\n\n        statement = statement ? statement.join('') : '';\n\n        this.generateCodeLines([statement + '{ // start of block']);\n\n        super.onDeclare();\n\n        this.generateCodeLines([\n            this.getBlockResultCode()\n        ]);\n\n        this.generateCodeLines(['} // end of block']);\n    }\n\n    getDeclarationValue() {\n        return null;\n    }\n\n    getBlockResultCode() {\n        var list = this.references,\n            identifier = this.resultIdentifier,\n            len = list.length;\n        var symbol, code;\n\n        if (len) {\n            symbol = list[len - 1];\n            code =  this.id + ' = ' + symbol.id;\n        }\n        else {\n            code = this.id + ' = undefined';\n        }\n        \n        return identifier ? identifier + ' = ' + code : code;\n    }\n\n    setStatement(statement) {\n        if (string(statement)) {\n            statement = [statement];\n        }\n\n        if (array(statement)) {\n            this.blockStatement = statement;\n        }\n        return this;\n    }\n\n    setResultIdentifier(id) {\n        if (string(id)) {\n            this.resultIdentifier = id;\n        }\n        return this;\n    }\n\n    \n}\n\n\nexport default BlockSymbol;","'use strict';\n\n\nimport { register } from \"./symbol/registry.js\";\n\nimport Base from \"./symbol/base.js\";\nimport NullSymbol from \"./symbol/null.js\";\nimport UndefinedSymbol from \"./symbol/undefined.js\";\n\nimport StringSymbol from \"./symbol/string.js\";\nimport NumberSymbol from \"./symbol/number.js\";\nimport BooleanSymbol from \"./symbol/boolean.js\";\nimport ArraySymbol from \"./symbol/array.js\";\nimport JsonPath from \"./symbol/jsonpath.js\";\n\nimport ObjectSymbol from \"./symbol/object.js\";\nimport CallSymbol from \"./symbol/call.js\";\n\nimport Identifier from \"./symbol/identifier.js\";\nimport Arguments from \"./symbol/arguments.js\";\n\nimport Transformer from \"./symbol/transformer.js\";\nimport Block from \"./symbol/block.js\";\n\n\nregister(\"default\", Base);\n\nregister(\"null\", NullSymbol);\nregister(\"undefined\", UndefinedSymbol);\n\nregister(\"string\", StringSymbol);\nregister(\"number\", NumberSymbol);\nregister(\"boolean\", BooleanSymbol);\n\nregister(\"array\", ArraySymbol);\nregister(\"object\", ObjectSymbol);\nregister(\"call\", CallSymbol);\n\nregister(\"identifier\", Identifier);\nregister(\"jsonpath\", JsonPath);\n\nregister(\"arguments\", Arguments);\nregister(\"transformer\", Transformer);\nregister(\"block\", Block);\n\n\n\nexport * from \"./symbol/registry.js\";\n","'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nimport { instantiate } from \"./symbol.js\";\n\nexport\n    class Compile {\n        constructor(iterator) {\n            var identifierType = \"identifier\";\n            var context, helper;\n\n            this.constantLookup = {};\n            this.symbolConfig = {};\n            this.symbols = [];\n            this.code = [];\n            this.iterator = iterator;\n\n            this.lineFeed = \"\\n\";\n            this.defaultSymbolType = \"mixed\";\n\n            this.errorCount = 0;\n            this.errorMessages = [];\n\n            this.contextSymbol = context = this.createSymbol('context',\n                                                            identifierType);\n\n            this.helperSymbol = helper = this.createSymbol('helper',\n                                                            identifierType);\n            \n            // these are final symbols\n            context.symbolAccess =\n                helper.symbolAccess = true;\n\n            context.declare();\n            helper.declare();\n            \n        }\n\n        createSymbol(value, type, constantify) {\n            var symbol = instantiate(type, this);\n\n            symbol.initialize(value, constantify);\n\n            return symbol;\n        }\n        \n        getSymbol(id) {\n            var symbols = this.symbols,\n                index = symbols.indexOf(id);\n\n            return index !== -1 ? this.symbolConfig[id] : null;\n        }\n\n        updateIterator(value) {\n            this.iterator.update(value);\n        }\n\n        appendCode() {\n            var list = this.code,\n                len = list.length,\n                args = arguments,\n                c = -1,\n                l = args.length,\n                isString = string,\n                isArray = array;\n\n            var item;\n\n            for (; l--;) {\n                item = args[++c];\n                if (isArray(item)) {\n                    item = item.join('');\n                }\n                else if (!isString(item)) {\n                    continue;\n                }\n\n                list[len++] = item;\n            }\n\n        }\n\n        reportError(errorMessage, fatal) {\n            var list = this.errorMessages;\n\n            list[list.length] = errorMessage;\n            if (fatal === true) {\n                this.errorCount++;\n                console.error(errorMessage);\n            }\n            else {\n                console.warn(errorMessage);\n            }\n\n        }\n\n        nullFill(ignoreSymbols) {\n            var symbols = this.symbols;\n            var l, index;\n            if (string(ignoreSymbols)) {\n                ignoreSymbols = [ignoreSymbols];\n            }\n\n            // filter\n            if (array(ignoreSymbols)) {\n                symbols = symbols.slice(0);\n                for (l = ignoreSymbols.length; l--;) {\n                    index = symbols.indexOf(ignoreSymbols[l]);\n                    if (index !== -1) {\n                        symbols.splice(index, 1);\n                    }\n                }\n                \n            }\n\n            this.appendCode(symbols.join(' = ') + ' = null');\n\n            return this;\n        }\n\n        generate() {\n            var symbols = this.symbols.slice(0),\n                configs = this.symbolConfig,\n                c = -1,\n                l = symbols.length,\n                code = this.code.slice(0);\n           var symbol, config;\n\n            // declare variables\n            for (; l--;) {\n                symbol = symbols[++c];\n                config = configs[symbol];\n                if (config.constant) {\n                    symbols[c] = symbol + ' = ' + config.value;\n                }\n            }\n\n            // add try catch\n            if (code.length) {\n                code.splice(2, 0, 'try { // catch all errors');\n                code.splice(code.length, 0,\n                    '} catch (e) { // end try',\n                        'return ' + this.helperSymbol.id + '.reject(e)', \n                    '} // end catch');\n            }\n\n            // declare variables\n            if (symbols.length) {\n                code.splice(0, 0, 'var ' + symbols.join(','));\n            }\n\n            return code.length ?\n                        code.join(';' + this.lineFeed) + \";\" : \"\";\n        }\n    }\n\n\nexport default Compile;","'use strict';\n\nimport * as API from \"./api.js\";\n\nglobal.joqx = API;\n\nexport * from \"./api.js\";\n\nexport default API;\n"],"names":["promiseGuard","method","helper","s1","s2","s3","s4","s5","s6","s7","s8","thenable","then","call","register","name","intent","registry","REGISTRY","string","Error","NAME_RE","test","exists","set","get","transformer","Symbol","compiler","this","type","pendingCodes","instantiate","Class","INVALID_TYPE","INVALID_NON_EXISTENT_TYPE","Base","prototype","INVALID_CLASS","escapeString","subject","code","escapeIndex","ESCAPE_CHARS","pad","UTF_PAD","pl","length","l","out","Array","slice","charCodeAt","toString","backslash","substring","toLowerCase","join","numeric","NUMERIC_RE","number","jsonRecodeArrayPath","jsonString","raw","path","jsonParsePath","cescape","Helper","transformCache","intentCache","compileTerminal","context","lexeme","cache","value","createSymbol","TYPE_NUMBER","parseInt","updateIterator","compileRule","condition","item1","item2","rule","id","TYPE_IDENTIFIER","setSymbolAccess","addDependency","contextSymbol","append","TYPE_ARGUMENTS","useReference","useArguments","access","increment","decrement","positive","negative","typeofSymbol","notSymbol","exponential","multiplication","division","modulo","subtraction","addition","lt","gt","lte","gte","instanceOf","inOp","equal","notEqual","sequal","notSequal","and","or","setStatement","setResultIdentifier","assign","unset","setValue","setBaseArgument","helperSymbol","declare","appendCode","nullFill","compile","generated","F","constructor","handleTerminal","handleRule","compiled","walk","iterator","Compile","reset","completed","next","terminal","error","generate","contextObject","e","console","warn","intentMethod","regIntent","API","transformerMethod","regTransformer","global","self","window","createRegistry","Parser","load","data","autoDeclare","declared","declareCode","autoFinalize","finalizeCode","constant","finalized","initialized","inFixCode","postFixCode","onInitialize","constantify","symbols","index","references","splice","symbolConfig","onDeclare","list","len","c","getDeclarationValue","generateCodeLines","onDeclarePostFix","postfix","onDeclareInfix","infix","initialize","redeclare","symbol","createVariableOfMe","getCodeValue","force","item","isArray","array","isString","pending","commit","generateInfix","cl","current","generatePostFix","getHelperId","getContextId","identifier","symbolAccess","Native","super","reference","allowAccess","finalizeOnAccess","allowBinaryOperation","onAccess","createUpdateAccessSymbol","from","directAccess","accessParent","updateAccess","allowAccessUpdate","binaryOperation","operand","operation","allow","indexOf","guard","UndefinedSymbol","NullSymbol","StringSymbol","SIGN_RE","NumberSymbol","replace","BooleanSymbol","Collection","allowAppend","generateItemCode","NativeObject","Identifier","disableValueRecode","accessOrigin","setAccessOrigin","isSymbolAccess","setFinalizeOnAccess","isFinalizedOnAccess","getAccessCodeValue","getAccessOrigin","generateJSONPathArray","unshift","apply","getPathParts","source","operator","jsonPath","codes","line","sourceId","sourceReference","NativeSymbol","0","8","9","10","11","12","13","34","39","91","92","93","JsonPath","IdentifierSymbol","ObjectSymbol","dataAccess","CollectionSymbol","Arguments","CallSymbol","arguments","constructorCall","disableContext","onUseReference","onUseArguments","args","getArgumentsCode","getCallContext","parent","ArgumentSymbol","TransformerCallSymbol","baseArgument","base","BlockSymbol","blockStatement","resultIdentifier","statement","getBlockResultCode","ArraySymbol","Transformer","Block","constantLookup","lineFeed","defaultSymbolType","errorCount","errorMessages","getSymbol","update","reportError","errorMessage","fatal","ignoreSymbols","config","configs","contains","validProperty","property","paths","jsonFind","createJsonPath","jsonFill","jsonUnset","strEscape","isNumeric","getTransformer","found","getIntent","transform","formatReturn","Promise","resolve","reject","joqx"],"mappings":"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"}