{"version":3,"file":"joqx.min.js","sources":["../src/executor.js","../src/intent/registry.js","../src/transformer/registry.js","../src/compile/symbol/base.js","../src/compile/symbol/registry.js","../src/helper/string.js","../src/helper/promise.js","../src/context/helper.js","../src/compile/terminal.js","../src/compile/rule.js","../src/compiler.js","../src/api.js","../node_modules/rollup-plugin-node-globals/src/global.js","../src/parser/index.js","../src/compile/symbol/native.js","../src/compile/symbol/undefined.js","../src/compile/symbol/null.js","../src/compile/symbol/string.js","../src/compile/symbol/number.js","../src/compile/symbol/boolean.js","../src/compile/symbol/collection.js","../src/compile/symbol/array.js","../src/compile/symbol/identifier.js","../src/compile/symbol/jsonpath.js","../src/compile/symbol/object.js","../src/compile/symbol/arguments.js","../src/compile/symbol/call.js","../src/compile/symbol/transformer.js","../src/compile/symbol/block.js","../src/compile/symbol.js","../src/compile/class.js","../src/index.js"],"sourcesContent":["'use strict';\n\nimport { thenable } from \"libcore\";\n\nexport\n    function promiseGuard(method) {\n\n        function executor(helper, s1, s2, s3, s4, s5, s6, s7, s8) {\n            if (thenable(s1)) {\n                return s1.then(function (s1) {\n                    return method.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);\n                });\n            }\n\n            return method.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);\n        }\n\n        return executor;\n    }","'use strict';\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport { promiseGuard } from \"../executor.js\";\n\nconst NAME_RE = /[a-zA-Z\\$][a-zA-Z0-9\\$]*(\\-[a-zA-Z0-9\\$]+)*/;\n\nfunction Intent() {\n    this.registry = createRegistry();\n}\n\nIntent.prototype = {\n\n    register: function (name, intent) {\n        var registry = this.registry;\n        \n        if (!string(name)) {\n            throw new Error(\"Invalid intent [name] parameter.\");\n        }\n        else if (!NAME_RE.test(name)) {\n            throw new Error(\"Malformed intent [name] parameter: \" + name);\n        }\n\n        if (!method(intent)) {\n            throw new Error(\"Invalid [intent] Function parameter named: \" +\n                            name);\n        }\n\n        if (registry.exists(name)) {\n            throw new Error(\"Invalid [intent] named: \" + name +\n                            \" already exist\");\n        }\n\n        registry.set(name, promiseGuard(intent));\n\n        return this;\n    },\n\n    exists: function (name) {\n        return this.registry.exists(name);\n    },\n\n    get: function (name) {\n        var registry = this.registry;\n        return registry.exists(name) ? registry.get(name) : null;\n    },\n\n    run: function (name, value) {\n        var registry = this.registry;\n\n        return registry.exists(name) ? registry.get(name)(value) : void(0);\n    }\n};\n\nexport { Intent };\n","'use strict';\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport { promiseGuard } from \"../executor.js\";\n\n\nconst NAME_RE = /[a-zA-Z\\_\\$][a-zA-Z0-9\\_\\$]*(\\.[a-zA-Z\\_\\$][a-zA-Z0-9\\_\\$]*)*/;\n\nfunction Transformer() {\n    this.registry = createRegistry();\n}\n\nTransformer.prototype = {\n\n    register: function (name, transformer) {\n        var registry = this.registry;\n        \n        if (!string(name)) {\n            throw new Error(\"Invalid transformer [name] parameter.\");\n        }\n        else if (!NAME_RE.test(name)) {\n            throw new Error(\"Malformed transformer [name] parameter: \" + name);\n        }\n\n        if (!method(transformer)) {\n            throw new Error(\"Invalid [transformer] Function parameter named: \" +\n                            name);\n        }\n\n        if (registry.exists(name)) {\n            throw new Error(\"Invalid [transformer] named: \" + name +\n                            \" already exist\");\n        }\n\n        registry.set(name, promiseGuard(transformer));\n\n        return this;\n    },\n\n    exists: function (name) {\n        return this.registry.exists(name);\n    },\n\n    get: function (name) {\n        var registry = this.registry;\n        return registry.exists(name) ? registry.get(name) : null;\n    }\n\n};\n\n\nexport { Transformer };","'use strict';\n\nimport {\n            string,\n            array\n            \n        } from \"libcore\";\n\nfunction Symbol(compiler) {\n    this.compiler = compiler;\n    this.type = this.type;\n\n    this.pendingCodes = [];\n}\n\nSymbol.prototype = {\n    constructor: Symbol,\n    id: null,\n    \n    autoDeclare: false,\n    declared: false,\n    value: null,\n    declareCode: null,\n\n    autoFinalize: false,\n    finalizeCode: null,\n    constant: false,\n\n    finalized: false,\n    initialized: false,\n\n    inFixCode: null,\n    postFixCode: null,\n\n    onInitialize: function (compiler, value, constantify) {\n        var symbols = compiler.symbols,\n            index = symbols.length,\n            id = 's' + index;\n\n        this.id = id;\n\n        // register\n        this.constant = constantify;\n        this.value = value;\n        this.references = [];\n\n        if (constantify) {\n            symbols.splice(0, 0, id);\n        }\n        else {\n            symbols[index] = id;\n        }\n\n        compiler.symbolConfig[id] = this;\n\n    },\n\n    onDeclare: function () {\n        var list = this.references,\n            len = list.length,\n            c = -1;\n        var item, value;\n\n        for (; len--;) {\n            item = list[++c];\n            item.declare();\n        }\n\n        value = this.getDeclarationValue();\n\n        if (value) {\n            this.generateCodeLines([[this.id, ' = ', value]]);\n        }\n    },\n\n    onDeclarePostFix: function (postfix) {\n        this.generateCodeLines(postfix);\n    },\n\n    onDeclareInfix: function (infix) {\n        this.generateCodeLines(infix);\n    },\n\n    initialize: function (value, constantify) {\n        if (!this.initialized) {\n            this.initialized = true;\n            \n            this.onInitialize(this.compiler,\n                                value,\n                                constantify === true || constantify === false ?\n                                    constantify : this.constant);\n\n            if (this.autoDeclare) {\n                this.declare();\n            }\n        }\n    },\n\n    declare: function () {\n        var compiler = this.compiler,\n            postfix = this.postFixCode,\n            infix = this.inFixCode;\n\n        // run declaration\n        if (!this.declared) {\n            this.declared = true;\n\n            this.onDeclare(compiler);\n        }\n\n        // run infix\n        if (infix) {\n            this.onDeclareInfix(infix);\n\n            delete this.inFixCode;\n        }\n        \n        // postfix code\n        if (postfix) {\n            this.onDeclarePostFix(postfix);\n\n            // run once\n            delete this.postFixCode;\n\n            // should redeclare when needed again\n            delete this.declared;\n        }\n\n        return this;\n\n    },\n\n    redeclare: function () {\n        if (this.declared) {\n            this.declared = false;\n        }\n        return this.declare();\n    },\n\n    addDependency: function (symbol) {\n        var list = this.references;\n\n        if (!(symbol instanceof Symbol)) {\n            throw new Error(\"Invalid [symbol] dependency.\");\n        }\n\n        list[list.length] = symbol;\n\n        return this;\n    },\n\n    typeofSymbol: function () {\n        return this.createVariableOfMe('typeof ' + this.id);\n    },\n\n    notSymbol: function () {\n        return this.createVariableOfMe('!' + this.id);\n    },\n\n    \n\n    getDeclarationValue: function () {\n        return this.getCodeValue();\n    },\n\n    getCodeValue: function () {\n        return this.value;\n    },\n\n    generateCodeLines: function (value, force) {\n        var compiler = this.compiler,\n            isArray = array,\n            isString = string,\n            pending = this.pendingCodes,\n            commit = this.declared || force === true;\n        var c, l, item, pl;\n\n        if (isString(value)) {\n            value = [[value]];\n        }\n\n        if (isArray(value)) {\n            pl = pending.length;\n            for (c = -1, l = value.length; l--;) {\n                item = value[++c];\n                if (isArray(item) || isString(item)) {\n                    pending[pl++] = item;\n                }\n            }\n        }\n\n        // commit\n        if (commit) {\n            for (c = -1, l = pending.length; l--;) {\n                compiler.appendCode(pending[++c]);\n            }\n            pending.splice(0, pending.length);\n        }\n\n        return this;\n    },\n\n    generateInfix: function (code) {\n        var current = this.inFixCode,\n            isArray = array,\n            isString = string;\n        var c, l, item, cl;\n\n        if (!current) {\n            current = this.inFixCode = [];\n        }\n        \n        if (isString(code)) {\n            code = [code];\n        }\n\n        if (isArray(code)) {\n            cl = current.length;\n            for (c = -1, l = code.length; l--;) {\n                item = code[++c];\n                if (isArray(item) || isString(item)) {\n                    current[cl++] = item;\n                }\n            }\n        }\n\n    },\n\n    generatePostFix: function (code) {\n        var current = this.postFixCode,\n            isArray = array,\n            isString = string;\n        var c, l, item, cl;\n\n        if (!current) {\n            current = this.postFixCode = [];\n        }\n        \n        if (isString(code)) {\n            code = [code];\n        }\n\n        if (isArray(code)) {\n            cl = current.length;\n            for (c = -1, l = code.length; l--;) {\n                item = code[++c];\n                if (isArray(item) || isString(item)) {\n                    current[cl++] = item;\n                }\n            }\n        }\n    },\n\n    getHelperId: function () {\n        return this.compiler.helperSymbol.id;\n    },\n\n    getContextId: function () {\n        return this.compiler.contextSymbol.id;\n    },\n\n    createVariableOfMe: function (value) {\n        var identifier;\n\n        if (array(value)) {\n            value = value.join('');\n        }\n\n        if (!string(value)) {\n            value = this.id;\n        }\n\n        identifier = this.compiler.createSymbol(value, \"identifier\");\n        identifier.symbolAccess = true;\n        identifier.addDependency(this);\n\n        return identifier;\n\n    }\n\n\n};\n\nexport default Symbol;","'use strict';\n\n\nimport {\n            string,\n            method,\n            createRegistry\n        } from \"libcore\";\n\nimport Symbol from \"./base.js\";\n\nvar INVALID_TYPE = \"Invalid [type] parameter.\",\n    INVALID_CLASS = \"Invalid Symbol [Class] parameter.\",\n    INVALID_NON_EXISTENT_TYPE = \"Symbol do not exist from [type] parameter\",\n    REGISTRY = createRegistry();\n\nfunction instantiate(type, compiler) {\n    var registry = REGISTRY;\n    var Class;\n\n    if (!string(type)) {\n        throw new Error(INVALID_TYPE);\n    }\n\n    Class = registry.get(type);\n\n    if (!Class) {\n        throw new Error(INVALID_NON_EXISTENT_TYPE);\n    }\n\n    return new Class(compiler);\n    \n}\n\nfunction register(type, Class) {\n    var Base = Symbol;\n\n    if (!string(type)) {\n        throw new Error(INVALID_TYPE);\n    }\n\n    if (!method(Class) ||\n        !(Class === Base || (Class.prototype instanceof Base))) {\n        throw new Error(INVALID_CLASS);\n    }\n    \n    REGISTRY.set(Class.prototype.type = type,\n                Class);\n}\n\nexport {\n    Symbol as Base,\n    instantiate,\n    register\n};","'use strict';\n\nimport {\n            jsonParsePath\n        } from \"libcore\";\nimport {\n            string,\n            number\n        } from \"libcore\";\n\nvar UTF_PAD = '0000',\n    NUMERIC_RE = /^([1-9][0-9]*|0)$/g,\n    ESCAPE_CHARS = {\n        0: '0',\n        8: 'b',\n        9: 't',\n        10: 'n',\n        11: 'v',\n        12: 'f',\n        13: 'r',\n        34: '\"',\n        39: \"'\",\n        91: \"[\",\n        92: '\\\\',\n        93: \"]\"\n    };\n\nexport {\n            jsonParsePath as jsonParse\n        };\n\nexport\n    function escapeString(subject) {\n        var escapeIndex = ESCAPE_CHARS,\n            backslash = '\\\\',\n            utf = backslash + \"u\",\n            pad = UTF_PAD,\n            pl = pad.length,\n            l = subject.length,\n            out = Array.prototype.slice.call(subject, 0);\n        var code;\n\n        out.length = l;\n\n        for (; l--;) {\n            code = subject.charCodeAt(l);\n            if (code in escapeIndex) {\n                out[l] = backslash + escapeIndex[code];\n\n            }\n            else if (code < 32 || code > 126) {\n                code = code.toString(16);\n                out[l] = utf +\n                            pad.substring(0, pl - code.length) +\n                            code.toLowerCase();\n            }\n        }\n\n        return out.join('');\n    }\n\nexport\n    function numeric(subject) {\n        return string(subject) ?\n                    NUMERIC_RE.test(subject) :\n                    number(subject);\n    }\n\nexport\n    function jsonRecodeArrayPath(jsonString, raw) {\n        var path = jsonParsePath(jsonString),\n            cescape = escapeString,\n            l = path && path.length;\n\n        if (l) {\n            for (; l--;) {\n                path[l] = '\"' + cescape(path[l]) + '\"';\n            }\n            return raw === true ? path : '[' + path.join(',') + ']';\n        }\n        return raw === true ? [] : '[]';\n    }\n\n","'use strict';\n\nimport {\n            method,\n            thenable\n        } from 'libcore';\n\nfunction FakePromise(value) {\n\n    function then(onFulfill, onReject) {\n        var subject = value,\n            isFunction = method,\n            canFulfill = isFunction(onFulfill);\n\n        if (thenable(subject)) {\n            return subject.then(onFulfill, onReject);\n        }\n\n        if (canFulfill) {\n            subject = onFulfill(subject);\n        }\n\n        return new FakePromise(subject);\n        \n    }\n\n    this.then = then;\n}\n\n\nexport { FakePromise };","'use strict';\n\nimport {\n            string,\n            number,\n            contains,\n            jsonFill,\n            jsonFind,\n            jsonUnset,\n            thenable\n        } from \"libcore\";\n\nimport {\n            numeric,\n            escapeString\n        } from \"../helper/string.js\";\n\nimport { FakePromise } from \"../helper/promise.js\";\n\n\nimport { Transformer } from \"../transformer/registry.js\";\n\nimport { Intent } from \"../intent/registry.js\";\n\nfunction Helper(intent, transformer) {\n    var IntentClass = Intent,\n        TransformerClass = Transformer;\n\n    this.intentRegistry = intent instanceof IntentClass ?\n                                    intent : new Intent();\n\n    this.transformerRegistry = transformer instanceof TransformerClass ?\n                                    transformer : new TransformerClass();\n\n    this.transformCache = {};\n    this.intentCache = {};\n}\n\nHelper.prototype = {\n\n    constructor: Helper,\n\n    transformerRegistry: null,\n    intentRegistry: null,\n\n    contains: contains,\n    number: number,\n\n    validProperty: function (property) {\n        return string(property) || number(property);\n    },\n\n    get: function (subject, paths) {\n        \n        return jsonFind(this.createJsonPath(paths), subject);\n        \n    },\n\n    set: function (subject, paths, value) {\n\n        jsonFill(this.createJsonPath(paths), subject, value);\n\n        return value;\n        \n    },\n\n    unset: function (subject, paths) {\n        \n        return jsonUnset(this.createJsonPath(paths), subject);\n        \n    },\n\n    createJsonPath: function (paths) {\n        var strEscape = escapeString,\n            isNumeric = numeric,\n            l = paths.length;\n        var item;\n\n        paths = paths.slice(0);\n\n        // create path\n        for (; l--;) {\n            item = paths[l];\n            // quote\n            paths[l] = '[' +\n                        (isNumeric(item) ?\n                                item :\n                                '\"' + strEscape(item) + '\"') + ']';\n        }\n\n        return paths.join('');\n    },\n\n    getTransformer: function(name) {\n        var access = ':' + name,\n            list = this.transformCache;\n        var found;\n\n        if (access in list) {\n            return list[access];\n        }\n\n        found = this.transformerRegistry.get(name);\n        if (!found) {\n            throw new Error(\"Transformer named \" + name + \" do not exist.\");\n        }\n\n        return (list[access] = found);\n\n    },\n\n    getIntent: function(name) {\n        var access = ':' + name,\n            list = this.intentCache;\n        var found;\n\n        if (access in list) {\n            return list[access];\n        }\n\n        found = this.intentRegistry.get(name);\n        if (!found) {\n            throw new Error(\"Intent named \" + name + \" do not exist.\");\n        }\n\n        return (list[access] = found);\n    },\n\n    intent: function (name, value) {\n        return this.getIntent(name)(this, value);\n    },\n\n    transform: function (name, value) {\n        return this.getTransformer(name)(this, value);\n    },\n\n    formatReturn: function (value, rawValue) {\n\n        if (rawValue === true) {\n            return value;\n        }\n\n        return thenable(value) ? value : new FakePromise(value);\n    },\n\n    reject: function (error) {\n        return Promise.reject(error);\n    }\n\n    \n};\n\nexport { Helper };\n\nexport default Helper;\n","'use strict';\n\nvar TYPE_NUMBER = 'number';\n\nfunction compileTerminal(context, lexeme) {\n    var cache = lexeme.value,\n        name = lexeme.name,\n        value = cache;\n\n    switch (lexeme.name) {\n    case \"decimal\":\n        value = context.createSymbol(value, TYPE_NUMBER);\n        break;\n\n    case \"hex\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 16),\n                        TYPE_NUMBER);\n        break;\n\n    case \"octal\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 8),\n                        TYPE_NUMBER);\n        break;\n\n    case \"binary\":\n        value = context.createSymbol('' +\n                        parseInt(value.substring(2, value.length), 2),\n                        TYPE_NUMBER);\n        break;\n        \n    case \"string\":\n    case \"boolean\":\n    case \"null\":\n    case \"undefined\":\n    case \"identifier\":\n    case \"jsonpath\":\n        value = context.createSymbol(value, name);\n        break;\n    }\n    \n\n    if (cache !== value) {\n        context.updateIterator(value);\n    }\n}\n\n\n// identifier\nexport default compileTerminal;\n","'use strict';\n\n\n\nimport {\n            //jsonRecodeArrayPath,\n            escapeString\n        } from \"../helper/string.js\";\n\nvar TYPE_ARGUMENTS = \"arguments\",\n    TYPE_IDENTIFIER = \"identifier\";\n\nexport\n    function compileRule(compiler, lexeme) {\n        var cache = lexeme.value,\n            value = cache;\n        var condition, item1, item2;\n        \n        switch (lexeme.name) {\n        // relay all\n        case \"Number\":\n        case \"Javascript\":\n            value = value[0];\n            break;\n\n        default:\n            switch (lexeme.rule) {\n            // relay rules\n            case \"2:Literal\":\n            case \"3:Literal\":\n            case \"4:Literal\":\n            case \"5:Literal\":\n            case \"6:Literal\":\n            case \"7:Literal\":\n            case \"1:Primary\":\n            case \"2:Primary\":\n            case \"3:Primary\":\n            case \"4:Primary\":\n            case \"5:Primary\":\n            case \"1:Updatable\":\n            case \"1:PostFix\":\n            case \"1:Unary\":\n            case \"1:Exponential\":\n            case \"1:Multiplicative\":\n            case \"1:Additive\":\n            case \"1:Relational\":\n            case \"1:Equality\":\n            case \"1:LogicalAnd\":\n            case \"1:LogicalOr\":\n            case \"1:Conditional\":\n            case \"1:Assignment\":\n            \n            case \"1:Javascript\":\n            case \"2:Javascript\":\n            case \"1:Transform\":\n                value = value[0];\n                break;\n\n            // void\n            case \"1:Void\":\n                value = compiler.createSymbol(\"void(\" + value[1].id + ')',\n                                                TYPE_IDENTIFIER).\n                                setSymbolAccess().\n                                addDependency(value[1]);\n                break;\n            \n            // this\n            case \"1:Literal\":\n                value = compiler.createSymbol(compiler.contextSymbol.id,\n                                                TYPE_IDENTIFIER).\n                                setSymbolAccess();\n                break;\n\n\n            // relay group\n            case \"1:Group\":\n                value = value[1];\n                break;\n            \n            // array\n            case \"1:Array\":\n                value = compiler.createSymbol(\"[]\",\n                                                TYPE_IDENTIFIER).\n                            setSymbolAccess();\n                break;\n\n            case \"2:Array\": // relay Elements\n                value = value[1];\n                break;\n\n            case \"1:Elements\":\n                value = compiler.createSymbol(null, \"array\").\n                            append(value[0]);\n                break;\n\n            case \"2:Elements\":\n                value = value[0].\n                            append(value[2]);\n                break;\n\n            // object\n            case \"1:Object\":\n                value = compiler.createSymbol(\"{}\", TYPE_IDENTIFIER).\n                            setSymbolAccess();\n                break;\n\n            case \"2:Object\":\n                value = value[1];\n                break;\n\n            case \"1:Properties\":\n                value = value[0];\n                value = compiler.createSymbol(null, \"object\").\n                            append(value[1], value[0]);\n                break;\n            \n            case \"2:Properties\":\n                item1 = value[2];\n                value = value[0].append(item1[1], item1[0]);\n                break;\n\n            case \"1:Property\": // relay\n            case \"2:Property\": // relay\n            case \"3:Property\": // relay\n                value = [value[0].value, value[2]];\n                \n                break;\n            \n            \n            // arguments\n            case \"1:Arguments\": // relay\n                value = compiler.createSymbol(null, TYPE_ARGUMENTS);\n                break;\n\n            case \"2:Arguments\": // relay\n                value = value[1];\n                break;\n\n            case \"1:ArgumentList\":\n                value = compiler.createSymbol(null, TYPE_ARGUMENTS).\n                            append(value[0]);\n                break;\n\n            case \"2:ArgumentList\":\n                value = value[0].append(value[2]);\n                break;\n\n            // function call\n            case \"6:Primary\":\n                value = compiler.createSymbol(null, \"call\").\n                            useReference(value[0]).\n                            useArguments(value[1]);\n                break;\n            // new object\n            case \"7:Primary\":\n                value = value[1].instantiate();\n                break;\n\n            // direct access is a property of context symbol\n            case \"2:Updatable\":\n                value = compiler.contextSymbol.access(value[0], true);\n                break;\n\n            case \"3:Updatable\":\n                value = value[0].access(value[2], true);\n                break;\n\n            case \"4:Updatable\":\n                value = value[0].access(value[2], false);\n                break;\n\n            \n\n            // ++\n            case \"2:PostFix\":\n                value = value[0].increment(true);\n                break;\n\n            // -- \n            case \"3:PostFix\":\n                value = value[0].decrement(true);\n                break;\n\n\n            // ++ infix\n            case \"2:Unary\":\n                value = value[1].increment(false);\n                break;\n\n            // -- infix\n            case \"3:Unary\":\n                value = value[1].decrement(false);\n                break;\n            \n            // positive sign\n            case \"4:Unary\":\n                value = value[1].positive(false);\n                break;\n\n            // negative sign\n            case \"5:Unary\":\n                value = value[1].negative(false);\n                break;\n\n            // typeof\n            case \"6:Unary\":\n                value = value[1].typeofSymbol();\n                break;\n\n            // !not\n            case \"7:Unary\":\n                value = value[1].notSymbol();\n                break;\n\n            // ***\n            case \"2:Exponential\":\n                value = value[0].exponential(value[2]);\n                break;\n            \n            // *\n            case \"2:Multiplicative\":\n                value = value[0].multiplication(value[2]);\n                break;\n\n            // /\n            case \"3:Multiplicative\":\n                value = value[0].division(value[2]);\n                break;\n\n            // %\n            case \"4:Multiplicative\":\n                value = value[0].modulo(value[2]);\n                break;\n\n            // -\n            case \"2:Additive\":\n                value = value[0].subtraction(value[2]);\n                break;\n\n            // +\n            case \"3:Additive\":\n                value = value[0].addition(value[2]);\n                break;\n            \n            // <\n            case \"2:Relational\":\n            case \"3:Relational\":\n                value = value[0].lt(value[2]);\n                break;\n            \n            // >\n            case \"4:Relational\":\n            case \"5:Relational\":\n                value = value[0].gt(value[2]);\n                break;\n\n            // <=\n            case \"6:Relational\":\n            case \"7:Relational\":\n                value = value[0].lte(value[2]);\n                break;\n\n            // >=\n            case \"8:Relational\":\n            case \"9:Relational\":\n                value = value[0].gte(value[2]);\n                break;\n\n            case \"10:Relational\":\n                value = value[0].instanceOf(value[2]);\n                break;\n\n            case \"11:Relational\":\n                value = value[0].inOp(value[2]);\n                break;\n\n            case \"2:Equality\":\n                value = value[0].equal(value[2]);\n                break;\n\n            case \"3:Equality\":\n                value = value[0].notEqual(value[2]);\n                break;\n\n            case \"4:Equality\":\n                value = value[0].sequal(value[2]);\n                break;\n\n            case \"5:Equality\":\n                value = value[0].notSequal(value[2]);\n                break;\n\n            case \"2:LogicalAnd\":\n            case \"3:LogicalAnd\":\n                value = value[0].and(value[2]);\n                break;\n\n            case \"2:LogicalOr\":\n            case \"3:LogicalOr\":\n                value = value[0].or(value[2]);\n                break;\n\n            case \"2:Conditional\":\n                item1 = value[2];\n                item2 = value[4];\n                condition = value[0];\n\n                value = compiler.createSymbol(null, TYPE_IDENTIFIER).\n                            setSymbolAccess().\n                            addDependency(condition);\n\n                item1 = compiler.createSymbol(null, \"block\").\n                                setStatement([\n                                    'if (', condition.id, ')'\n                                ]).\n                                setResultIdentifier(value.id).\n                                addDependency(item1);\n                \n                item2 = compiler.createSymbol(null, \"block\").\n                                setStatement('else').\n                                setResultIdentifier(value.id).\n                                addDependency(item2);\n\n                value.addDependency(item1).\n                    addDependency(item2);\n\n                break;\n\n            // assignment\n            case \"2:Assignment\":\n            case \"3:Assignment\":\n            case \"4:Assignment\":\n            case \"5:Assignment\":\n            case \"6:Assignment\":\n            case \"7:Assignment\":\n            case \"8:Assignment\":\n                value = value[0].assign(value[2], value[1]);\n                //value = assign(context, value[1], value[0], value[2]);\n\n                break;\n            \n            // delete statement\n            case \"1:Delete\":\n                value = value[1].unset();\n                break;\n\n            // transformer namespace\n            case \"1:Namespace\":\n                value = value[0].setSymbolAccess();\n                break;\n\n            case \"2:Namespace\":\n                value = value[0].setValue(value[0].value +\n                                            '.' +\n                                            value[2].value);\n                break;\n\n            // transformer\n            case \"1:Transformer\": // relay\n                value = compiler.createSymbol(null, \"transformer\").\n                                useReference(value[0]);\n                break;\n\n            case \"2:Transformer\": // relay\n                value = compiler.createSymbol(null, \"transformer\").\n                                useReference(value[0]).\n                                useArguments(value[1]);\n                break;\n\n            // transform\n            case \"2:Transform\":\n                value = value[2].setBaseArgument(value[0]);\n                break;\n\n            // last\n            case \"1:Joqx\":\n                value = value[0];\n                break;\n\n            case \"2:Joqx\":\n                item1 = value[0];\n                item2 = value[1];\n                value = compiler.createSymbol(compiler.helperSymbol.id +\n                                '.intent(\"' +\n                                    escapeString(item1.\n                                        substring(1, item1.length)) + '\",' +\n                                        item2.id + ')',\n                                TYPE_IDENTIFIER).\n                            setSymbolAccess().\n                            addDependency(item2);\n                // console.log(\"intent \", value[0]);\n                // value = value[1];\n                break;\n\n            case \"1:Joqx'\":\n                value = value[0];\n                value.declare();\n                compiler.appendCode([\n                    value.id, ' = ', compiler.helperSymbol.id,\n                                '.formatReturn(', value.id, ', rawResult)'\n                ]);\n                compiler.nullFill(value.id);\n                compiler.appendCode([\n                    'return ', value.id\n                ]);\n            }\n        }\n\n        // update lexeme value\n        if (cache !== value) {\n            compiler.updateIterator(value);\n        }\n    }\n\n\n\nexport default compileRule;","'use strict';\n\nimport { string } from \"libcore\";\n\nimport { iterator } from \"./parser/index.js\";\n\nimport { Compile } from \"./compile/class.js\";\n\nimport { Helper } from \"./context/helper.js\";\n\nimport handleTerminal from \"./compile/terminal.js\";\n\nimport handleRule from \"./compile/rule.js\";\n\nconst   executor = handleTerminal.constructor;\n\nfunction Compiler(intent, transformer) {\n    this.helper = new Helper(intent, transformer);\n}\n\nCompiler.prototype = {\n\n    intent: function (name, intent) {\n        this.helper.intentRegistry.register(name, intent);\n\n        return this;\n    },\n\n    transformer: function (name, transformer) {\n\n        this.helper.transformerRegistry.register(name, transformer);\n\n        return this;\n\n    },\n\n    build: function (subject) {\n        var compileTerminal = handleTerminal,\n            compileRule = handleRule,\n            walk = iterator;\n\n        var lexeme, generated, compiler;\n\n        if (!string(subject)) {\n            throw new Error(\"Invalid String [subject] parameter.\");\n        }\n\n        compiler = new Compile(walk);\n        \n        walk.reset();\n        walk.set(subject);\n\n        walk.completed = false;\n\n        lexeme = walk.next();\n\n        for (; lexeme; lexeme = walk.next()) {\n            \n            // for terminal\n            (lexeme.terminal ?\n                compileTerminal :\n                compileRule)(compiler, lexeme);\n        }\n\n        if (!walk.error && walk.completed) {\n\n            generated = compiler.generate();\n\n            return generated;\n        \n        }\n\n        return null;\n    },\n\n    compile: function (subject) {\n        var F = executor,\n            me = this,\n            generated = this.build(subject),\n            compiled = null;\n    \n        function exec(contextObject, rawResult) {\n            try {\n                return compiled(me.helper, contextObject, rawResult);\n            }\n            catch (e) {\n                console.warn(e);\n            }\n            \n            return undefined;\n        }\n    \n        if (!generated) {\n            throw new Error(\"Unable to compile due to JIT errors.\");\n        }\n\n        compiled = new F('helper, context, rawResult', generated);\n\n        return exec;\n    \n    }\n\n};\n\nexport { Compiler };\n\n","'use strict';\n\nimport { Intent } from \"./intent/registry.js\";\n\nimport { Transformer } from \"./transformer/registry.js\";\n\nimport { Compiler } from \"./compiler.js\";\n\nconst   DEFAULT_COMPILER = new Compiler(),\n\n        API = {\n            Intent: Intent,\n            Transformer: Transformer,\n            \n            createCompiler: createCompiler,\n            createTransformer: createTransformer,\n            createIntent: createIntent,\n\n            intent: intent,\n            transformer: transformer,\n            compile: compile\n        };\n\nexport default API;\n\nexport {\n            Intent,\n            Transformer\n    };\n\nexport\n    function createIntent() {\n        return new Transformer();\n    }\n\nexport\n    function createTransformer() {\n        return new Transformer();\n    }\n\nexport\n    function createCompiler(intent, transformer) {\n        return new Compiler(intent, transformer);\n    }\n\nexport\n    function compile(subject) {\n        return DEFAULT_COMPILER.compile(subject);\n    }\n\nexport\n    function intent(name, intentMethod) {\n        DEFAULT_COMPILER.intent(name, intentMethod);\n        return API;\n    }\n\nexport\n    function transformer(name, transformerMethod) {\n        DEFAULT_COMPILER.transformer(name, transformerMethod);\n        return API;\n    }\n\n\n","export default typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {}\n","'use strict';\n\n\nimport Parser from \"libcore-parser-lalr\";\n\n\nimport data from \"./states.json\";\n\nexport\n    const   parser = Parser.load(data),\n            iterator = parser.iterator();\n\nexport default iterator;\n\n","'use strict';\n\n\nimport Base from \"./base.js\";\n\nvar INVALID_ACCESS = \"Invalid object access in [reference] parameter. \",\n    INVALID_ACCESS_NOT_ALLOWED = \"Unable to access property. \",\n    INVALID_UPDATE_ACCESS_OBJECT = \"Invalid Object to update access. \",\n    INVALID_ACCESS_UPDATE = \"Unable to update access of object. \";\n\nexport default\n    class Native extends Base {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.reference =\n                this.autoDeclare = \n                this.allowAccess = true;\n\n            this.finalizeOnAccess = true;\n\n            this.allowBinaryOperation = [\n                '**',\n                '*',\n                '/',\n                '%',\n                '+',\n                '-',\n                '<',\n                '>',\n                '<=',\n                '>=',\n                'instanceof',\n                'in',\n                '==',\n                '===',\n                '!=',\n                '!==',\n                '&&',\n                '||'\n            ];\n\n        }\n\n        onAccess() {\n            if (this.finalizeOnAccess) {\n                this.declare();\n            }\n        }\n\n        createUpdateAccessSymbol(from, directAccess) {\n            var identifier;\n\n            // pray that runtime can generate string\n            this.declare();\n\n            // create identifier\n            identifier = this.createVariableOfMe();\n            identifier.directAccess = directAccess;\n            identifier.accessParent = from;\n            \n            return identifier;\n            \n        }\n\n        access(reference, directAccess) {\n\n            if (!(reference instanceof Base)) {\n                throw new Error(INVALID_ACCESS);\n            }\n\n            if (!this.allowAccess) {\n                throw new Error(INVALID_ACCESS_NOT_ALLOWED);\n            }\n            \n            directAccess = directAccess === true;\n\n            this.onAccess(reference, directAccess);\n\n            // update access\n            return reference.updateAccess(this, directAccess);\n\n        }\n\n        updateAccess(from, directAccess) {\n\n            if (!(from instanceof Base)) {\n                throw new Error(INVALID_UPDATE_ACCESS_OBJECT);\n            }\n\n            if (!this.allowAccessUpdate) {\n                throw new Error(INVALID_ACCESS_UPDATE + from.type);\n            }\n\n            return this.createUpdateAccessSymbol(from, directAccess);\n\n        }\n\n        assign() {\n            throw new Error(\"Invalid Assignment\");\n        }\n\n        instantiate() {\n            throw new Error(\"Invalid Instantiation\");\n        }\n\n        unset() {\n            throw new Error(\"Invalid Delete statement\");\n        }\n\n// arithmetic\n        binaryOperation(operand, operation) {\n            var allow = this.allowBinaryOperation;\n            var symbol;\n\n            if (!(operand instanceof Base)) {\n                throw new Error(\"Invalid [operand] parameter.\");\n            }\n\n            if (allow.indexOf(operation) === -1) {\n                throw new Error(\"Operation not allowed \" + operation +\n                                \" for \" + operand.type);\n            }\n\n            // apply operation\n            switch (operation) {\n            case '**':\n                symbol = this.createVariableOfMe(['Math.pow(', this.id, ',',\n                                                            operand.id, ')']);\n                break;\n\n            default:\n                symbol = this.createVariableOfMe([this.id, ' ',\n                                                operation, ' ',\n                                                operand.id]);\n            }\n\n            return symbol.addDependency(operand);\n\n\n        }\n\n        exponential(operand) {\n            return this.binaryOperation(operand, '**');\n        }\n\n        multiplication(operand) {\n            return this.binaryOperation(operand, '*');\n        }\n\n        division(operand) {\n            return this.binaryOperation(operand, '/');\n        }\n\n        modulo(operand) {\n            return this.binaryOperation(operand, '%');\n        }\n\n        addition(operand) {\n            return this.binaryOperation(operand, '+');\n        }\n\n        subtraction(operand) {\n            return this.binaryOperation(operand, '-');\n        }\n\n        lt(operand) {\n            return this.binaryOperation(operand, '<');\n        }\n\n        lte(operand) {\n            return this.binaryOperation(operand, '<=');\n        }\n\n        gt(operand) {\n            return this.binaryOperation(operand, '>');\n        }\n\n        gte(operand) {\n            return this.binaryOperation(operand, '>=');\n        }\n\n        instanceOf(operand) {\n            return this.binaryOperation(operand, 'instanceof');\n        }\n\n        inOp(operand) {\n            return this.binaryOperation(operand, 'in');\n        }\n\n        equal(operand) {\n            return this.binaryOperation(operand, '==');\n        }\n\n        sequal(operand) {\n            return this.binaryOperation(operand, '===');\n        }\n\n        notEqual(operand) {\n            return this.binaryOperation(operand, '!=');\n        }\n\n        notSequal(operand) {\n            return this.binaryOperation(operand, '!==');\n        }\n\n        and(operand) {\n            return this.binaryOperation(operand, '&&');\n        }\n\n        or(operand) {\n            return this.binaryOperation(operand, '||');\n        }\n\n        guard() {\n\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class UndefinedSymbol extends Base {\n        \n        constructor(compiler) {\n            super(compiler);\n            this.allowAccess = \n                this.autoDeclare = false;\n            \n        }\n        \n    }","'use strict';\n\n\nimport UndefinedSymbol from \"./undefined.js\";\n\n\nexport default\n    class NullSymbol extends UndefinedSymbol {\n        \n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class StringSymbol extends Base {\n        \n    }","'use strict';\n\nimport { string } from \"libcore\";\n\nimport Base from \"./native.js\";\n\nvar SIGN_RE = /[\\-\\+]/g;\n\n\nexport default\n    class NumberSymbol extends Base {\n\n        positive() {\n            var value = this.value;\n\n            if (string(value)) {\n                this.value = '+' + value.replace(SIGN_RE, '');\n                this.redeclare();\n            }\n\n            return this;\n        }\n\n        negative() {\n            var value = this.value;\n\n            if (string(value)) {\n                this.value = '-' + value.replace(SIGN_RE, '');\n                this.redeclare();\n            }\n\n\n            return this;\n        }\n\n\n    }","'use strict';\n\n\nimport Base from \"./native.js\";\n\n\nexport default\n    class BooleanSymbol extends Base {\n        \n    }","'use strict';\n\nimport Base from \"./base.js\";\n\nimport NativeObject from \"./native.js\";\n\nvar INVALID_ITEM = \"Invalid Symbol [item] parameter.\",\n    INVALID_NOT_ALLOWED_ITEM = \"Appending Symbol [item] is not allowed.\";\n\n\nexport default\n    class Collection extends NativeObject {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare = false;\n\n            this.data = [];\n\n        }\n\n        allowAppend() {\n            return true;\n        }\n\n        append(item) {\n            var list = this.data;\n\n            if (!(item instanceof Base)) {\n                throw new Error(INVALID_ITEM);\n            }\n\n            if (!this.allowAppend(item)) {\n                throw new Error(INVALID_NOT_ALLOWED_ITEM + item.type);\n            }\n\n            list[list.length] = item;\n\n            return this;\n\n        }\n\n        getCodeValue() {\n            var data = this.data,\n                c = -1,\n                l = data.length,\n                generated = [];\n            var symbol;\n\n            for (; l--;) {\n                symbol = data[++c];\n                symbol.declare();\n                generated[c] = this.generateItemCode(symbol, c);\n                \n            }\n\n            return generated.join(',');\n\n        }\n\n        generateItemCode(symbol) {\n            return symbol.id;\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./collection.js\";\n\n\nexport default\n    class Array extends Base {\n\n        getCodeValue() {\n            return '[' + super.getCodeValue() + ']';\n        }\n        \n    }","'use strict';\n\nimport { string } from \"libcore\";\n\nimport Base from \"./base.js\";\n\nimport NativeSymbol from \"./native.js\";\n\n\nexport default\n    class Identifier extends NativeSymbol {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare =\n                this.directAccess = \n                this.symbolAccess =\n                this.finalizeOnAccess = \n                this.disableValueRecode = false;\n\n            this.accessParent = null;\n\n            this.references = [];\n            \n            this.allowAccess = \n                this.allowAccessUpdate = true;\n\n            this.accessOrigin = null;\n\n        }\n\n        setAccessOrigin(item) {\n            this.accessOrigin = item;\n            return this;\n        }\n\n        setSymbolAccess(isSymbolAccess) {\n            this.symbolAccess = isSymbolAccess !== false;\n            return this;\n        }\n\n        setFinalizeOnAccess(isFinalizedOnAccess) {\n            this.finalizeOnAccess = isFinalizedOnAccess !== false;\n            return this;\n        }\n\n        // do not declare\n        getDeclarationValue() {\n            // if (this.disableValueRecode) {\n            //     return '';\n            // }\n            \n            return this.symbolAccess ?\n                        this.getCodeValue() :\n                        this.getAccessCodeValue();\n        }\n\n        setValue(value) {\n            this.value = value;\n            return this;\n        }\n\n        getCodeValue() {\n            var value = this.value;\n            \n            return string(value) ?\n                        this.symbolAccess ?\n                            value :\n                            '\"' + value + '\"' :\n                        null;\n        }\n\n        getAccessCodeValue() {\n            return ([\n                this.getHelperId(), \".get(\",\n                            this.getAccessOrigin(), ',',\n                            this.generateJSONPathArray(), ')'\n            ]).join('');\n        }\n\n        getAccessOrigin() {\n            var item = this.accessOrigin;\n            return string(item) ? item : this.getContextId();\n        }\n\n        generateJSONPathArray() {\n            var current = this,\n                list = [];\n            var next;\n\n            for (; current.accessParent; current = next) {\n                list.unshift(current.getCodeValue());\n\n                next = current.accessParent;\n\n                if (next && next.type === \"jsonpath\") {\n                    list.unshift.apply(list, next.getPathParts());\n                    break;\n                }\n\n            }\n\n            return '[' + list.join(',') + ']';\n\n        }\n\n        createUpdateAccessSymbol(from, directAccess) {\n            // if not direct access, resolve value and create another identifier\n            if (!directAccess) {\n                return super.createUpdateAccessSymbol(from, directAccess);\n            }\n            \n            this.directAccess = directAccess;\n            this.accessParent = from;\n            \n            // reuse me\n            return this;\n            \n        }\n\n        \n\n        assign(source, operator) {\n            var jsonPath = this.generateJSONPathArray(),\n                helper = this.getHelperId(),\n                context = this.getContextId(),\n                codes = [],\n                line = 0,\n                sourceId = source.id,\n                id = this.id,\n                sourceReference = sourceId;\n\n            // source should be finalized if not yet finalized\n            this.addDependency(source);\n\n\n            codes[line++] = ['// assign'];\n            \n            // for arithmetic assignment\n            if (string(operator)) {\n\n                operator = operator.substring(0, operator.length - 1);\n\n                switch (operator) {\n                case '**':\n                    sourceReference = 'Math.pow(' + id + ', ' + sourceId + ')';\n                    break;\n\n                case '*':\n                case '/':\n                case '%':\n                case '+':\n                case '-':\n                    sourceReference = id + ' ' + operator + ' ' + sourceId;\n                }\n            }\n\n\n            // assign\n            codes[line++] = [\n                id, ' = ', helper, '.set(', context, ',',\n                                            jsonPath, ',',\n                                            sourceReference, ')'\n            ];\n            \n            this.generateInfix(codes);\n\n            return this;\n        }\n\n        instantiate() {\n            var symbol = this.createVariableOfMe([\n                                    'new ' + this.id\n                                ],\n                                \"identifier\");\n            return symbol;\n        }\n\n        unset() {\n            this.generateInfix([[\n                this.getHelperId(), '.unset(', this.getContextId(), ',',\n                                    this.generateJSONPathArray(), ')'\n            ]]);\n            return this;\n        }\n\n        increment(postfix) {\n\n            if (postfix) {\n                this.generatePostFix([[\n                        this.getHelperId(), '.set(', this.getContextId(), ',',\n                                            this.generateJSONPathArray(), ',',\n                                            this.id, ' + 1)'\n                    ]]);\n\n                this.declared = false;\n\n\n            }\n            // infix is normal call to assign with += operator\n            else {\n                this.assign(this.compiler.createSymbol('1', \"number\"), '+=');\n            }\n            \n\n            return this;\n\n        }\n\n        decrement(postfix) {\n            \n            if (postfix) {\n                this.generatePostFix([[\n                        this.getHelperId(), '.set(', this.getContextId(), ',',\n                                            this.generateJSONPathArray(), ',',\n                                            this.id, ' - 1)'\n                    ]]);\n\n            }\n            // infix is normal call to assign with += operator\n            else {\n                this.assign(this.compiler.createSymbol('1', \"number\"), '-=');\n            }\n\n            return this;\n\n        }\n\n\n        \n\n\n        \n    }","'use strict';\n\n\nimport IdentifierSymbol from \"./identifier.js\";\n\nimport {\n            jsonRecodeArrayPath\n            \n        } from \"../../helper/string.js\";\n\n\nexport default\n    class JsonPath extends IdentifierSymbol {\n        constructor(compiler) {\n            super(compiler);\n\n            this.symbolAccess = true;\n        }\n\n        getCodeValue() {\n            return this.getAccessCodeValue();\n        }\n\n        getPathParts() {\n            var path = this.value;\n            path = path.substring(1, path.length);\n            return jsonRecodeArrayPath(path, true);\n        }\n\n        generateJSONPathArray() {\n            var path = this.value;\n            path = path.substring(1, path.length);\n            return jsonRecodeArrayPath(path);\n            \n        }\n\n        assign(source, operator) {\n            return super.assign(source, operator);\n        }\n    }","'use strict';\n\n\nimport CollectionSymbol from \"./collection.js\";\n\n\nexport default\n    class ObjectSymbol extends CollectionSymbol {\n\n        constructor(compiler) {\n            super(compiler);\n            this.dataAccess = [];\n\n        }\n\n        append(item, name) {\n            var list = this.dataAccess;\n            list[list.length] = name;\n            return super.append(item);\n        }\n        \n        getCodeValue() {\n            return '{' + super.getCodeValue() + '}';\n        }\n\n        generateItemCode(symbol, c) {\n            var name = this.dataAccess[c];\n            return name + ':' + symbol.id;\n        }\n        \n    }","'use strict';\n\n\nimport Base from \"./collection.js\";\n\n\nexport default\n    class Arguments extends Base {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare = false;\n\n        }\n\n        // arguments should not be declared\n        getDeclarationValue() {\n            return null;\n        }\n        \n    }","'use strict';\n\nimport NativeObject from \"./native.js\";\n\nimport Identifier from \"./identifier.js\";\n\nimport ArgumentSymbol from \"./arguments.js\";\n\nvar INVALID_ARGUMENTS = \"Invalid Arguments [symbol] parameter.\",\n    INVALID_CALLABLE = \"Invalid Callable [symbol] parameter. \",\n    INVALID_NOT_CALLABLE = \"Reference [symbol] is not callable. \";\n\n\nexport default\n    class CallSymbol extends Identifier {\n\n        constructor(compiler) {\n            super(compiler);\n\n            this.autoDeclare =\n                this.autoFinalize = false;\n\n            this.reference = \n                this.arguments = null;\n\n            this.constructorCall = false;\n            this.disableContext = false;\n        }\n\n        onUseReference() {\n\n        }\n\n        onUseArguments() {\n\n        }\n\n        instantiate() {\n            this.constructorCall = true;\n            return this;\n        }\n\n        getDeclarationValue() {\n            var reference = this.reference,\n                args = this.arguments;\n\n            if (reference) {\n                reference.declare();\n\n                args = this.getArgumentsCode();\n\n                return (this.constructorCall ?\n                            [\n                                'new ', reference.id, '(', args, ')'\n                            ] :\n                            [\n                                reference.id, '.call(', args, ')'\n                            ]).join('');\n\n            }\n            return null;\n\n        }\n\n        getArgumentsCode() {\n            var args = this.arguments;\n\n            args = args ?\n                        args.getCodeValue() : '';\n\n            return this.constructorCall ?\n                        args :\n                        this.getCallContext() + (args ? ',' + args : '');\n\n        }\n\n        getCallContext() {\n            var reference = this.reference;\n            var parent;\n\n            if (reference && reference.type === \"identifier\") {\n                parent = reference.accessParent;\n                if (parent) {\n                    parent.declare();\n                    return parent.id;\n                }\n            }\n\n            return this.getContextId();\n        }\n\n        useReference(symbol) {\n            if (!(symbol instanceof NativeObject)) {\n                throw new Error(INVALID_CALLABLE);\n            }\n\n            switch (symbol) {\n            case \"number\":\n                throw new Error(INVALID_NOT_CALLABLE);\n            }\n\n            this.reference = symbol;\n            this.onUseReference(symbol);\n\n            return this;\n        }\n\n        useArguments(symbol) {\n            if (!(symbol instanceof ArgumentSymbol)) {\n                throw new Error(INVALID_ARGUMENTS);\n            }\n\n            this.arguments = symbol;\n            this.onUseArguments(symbol);\n\n            return this;\n        }\n        \n    }","'use strict';\n\nimport CallSymbol from \"./call.js\";\n\n\nexport default\n    class TransformerCallSymbol extends CallSymbol {\n        constructor(compiler) {\n            super(compiler);\n\n            this.baseArgument = null;\n        }\n\n        onUseReference(symbol) {\n            symbol.setValue(\n                this.compiler.helperSymbol.id +\n                '.getTransformer(\"' + symbol.value + '\")');\n        }\n\n        setBaseArgument(item) {\n            this.addDependency(item).baseArgument = item;\n            return this;\n        }\n\n        getDeclarationValue() {\n            var reference = this.reference,\n                args = this.arguments;\n\n            if (reference) {\n                reference.declare();\n\n                args = this.getArgumentsCode();\n\n                return ([ reference.id, '(', args, ')']).join('');\n\n            }\n            return null;\n\n        }\n\n        getArgumentsCode() {\n            var args = this.arguments,\n                base = this.baseArgument;\n\n            args = args ?\n                        args.getCodeValue() : '';\n\n            if (base) {\n                args = args ?\n                             base.id + ',' + args :\n                             base.id;\n            }\n\n            return this.compiler.helperSymbol.id + (args ? ',' + args : '');\n\n        }\n    }","'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nimport IdentifierSymbol from \"./identifier.js\";\n\n\nclass BlockSymbol extends IdentifierSymbol {\n\n    constructor(compiler) {\n        super(compiler);\n        this.blockStatement = null;\n        this.resultIdentifier = null;\n    }\n\n\n    onDeclare() {\n        var statement = this.blockStatement;\n\n        statement = statement ? statement.join('') : '';\n\n        this.generateCodeLines([statement + '{ // start of block']);\n\n        super.onDeclare();\n\n        this.generateCodeLines([\n            this.getBlockResultCode()\n        ]);\n\n        this.generateCodeLines(['} // end of block']);\n    }\n\n    getDeclarationValue() {\n        return null;\n    }\n\n    getBlockResultCode() {\n        var list = this.references,\n            identifier = this.resultIdentifier,\n            len = list.length;\n        var symbol, code;\n\n        if (len) {\n            symbol = list[len - 1];\n            code =  this.id + ' = ' + symbol.id;\n        }\n        else {\n            code = this.id + ' = undefined';\n        }\n        \n        return identifier ? identifier + ' = ' + code : code;\n    }\n\n    setStatement(statement) {\n        if (string(statement)) {\n            statement = [statement];\n        }\n\n        if (array(statement)) {\n            this.blockStatement = statement;\n        }\n        return this;\n    }\n\n    setResultIdentifier(id) {\n        if (string(id)) {\n            this.resultIdentifier = id;\n        }\n        return this;\n    }\n\n    \n}\n\n\nexport default BlockSymbol;","'use strict';\n\n\nimport { register } from \"./symbol/registry.js\";\n\nimport Base from \"./symbol/base.js\";\nimport NullSymbol from \"./symbol/null.js\";\nimport UndefinedSymbol from \"./symbol/undefined.js\";\n\nimport StringSymbol from \"./symbol/string.js\";\nimport NumberSymbol from \"./symbol/number.js\";\nimport BooleanSymbol from \"./symbol/boolean.js\";\nimport ArraySymbol from \"./symbol/array.js\";\nimport JsonPath from \"./symbol/jsonpath.js\";\n\nimport ObjectSymbol from \"./symbol/object.js\";\nimport CallSymbol from \"./symbol/call.js\";\n\nimport Identifier from \"./symbol/identifier.js\";\nimport Arguments from \"./symbol/arguments.js\";\n\nimport Transformer from \"./symbol/transformer.js\";\nimport Block from \"./symbol/block.js\";\n\n\nregister(\"default\", Base);\n\nregister(\"null\", NullSymbol);\nregister(\"undefined\", UndefinedSymbol);\n\nregister(\"string\", StringSymbol);\nregister(\"number\", NumberSymbol);\nregister(\"boolean\", BooleanSymbol);\n\nregister(\"array\", ArraySymbol);\nregister(\"object\", ObjectSymbol);\nregister(\"call\", CallSymbol);\n\nregister(\"identifier\", Identifier);\nregister(\"jsonpath\", JsonPath);\n\nregister(\"arguments\", Arguments);\nregister(\"transformer\", Transformer);\nregister(\"block\", Block);\n\n\n\nexport * from \"./symbol/registry.js\";\n","'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nimport { instantiate } from \"./symbol.js\";\n\nexport\n    class Compile {\n        constructor(iterator) {\n            var identifierType = \"identifier\";\n            var context, helper;\n\n            this.constantLookup = {};\n            this.symbolConfig = {};\n            this.symbols = [];\n            this.code = [];\n            this.iterator = iterator;\n\n            this.lineFeed = \"\\n\";\n            this.defaultSymbolType = \"mixed\";\n\n            this.errorCount = 0;\n            this.errorMessages = [];\n\n            this.contextSymbol = context = this.createSymbol('context',\n                                                            identifierType);\n\n            this.helperSymbol = helper = this.createSymbol('helper',\n                                                            identifierType);\n            \n            // these are final symbols\n            context.symbolAccess =\n                helper.symbolAccess = true;\n\n            context.declare();\n            helper.declare();\n            \n        }\n\n        createSymbol(value, type, constantify) {\n            var symbol = instantiate(type, this);\n\n            symbol.initialize(value, constantify);\n\n            return symbol;\n        }\n        \n        getSymbol(id) {\n            var symbols = this.symbols,\n                index = symbols.indexOf(id);\n\n            return index !== -1 ? this.symbolConfig[id] : null;\n        }\n\n        updateIterator(value) {\n            this.iterator.update(value);\n        }\n\n        appendCode() {\n            var list = this.code,\n                len = list.length,\n                args = arguments,\n                c = -1,\n                l = args.length,\n                isString = string,\n                isArray = array;\n\n            var item;\n\n            for (; l--;) {\n                item = args[++c];\n                if (isArray(item)) {\n                    item = item.join('');\n                }\n                else if (!isString(item)) {\n                    continue;\n                }\n\n                list[len++] = item;\n            }\n\n        }\n\n        reportError(errorMessage, fatal) {\n            var list = this.errorMessages;\n\n            list[list.length] = errorMessage;\n            if (fatal === true) {\n                this.errorCount++;\n                console.error(errorMessage);\n            }\n            else {\n                console.warn(errorMessage);\n            }\n\n        }\n\n        nullFill(ignoreSymbols) {\n            var symbols = this.symbols;\n            var l, index;\n            if (string(ignoreSymbols)) {\n                ignoreSymbols = [ignoreSymbols];\n            }\n\n            // filter\n            if (array(ignoreSymbols)) {\n                symbols = symbols.slice(0);\n                for (l = ignoreSymbols.length; l--;) {\n                    index = symbols.indexOf(ignoreSymbols[l]);\n                    if (index !== -1) {\n                        symbols.splice(index, 1);\n                    }\n                }\n                \n            }\n\n            this.appendCode(symbols.join(' = ') + ' = null');\n\n            return this;\n        }\n\n        generate() {\n            var symbols = this.symbols.slice(0),\n                configs = this.symbolConfig,\n                c = -1,\n                l = symbols.length,\n                code = this.code.slice(0);\n           var symbol, config;\n\n            // declare variables\n            for (; l--;) {\n                symbol = symbols[++c];\n                config = configs[symbol];\n                if (config.constant) {\n                    symbols[c] = symbol + ' = ' + config.value;\n                }\n            }\n\n            // add try catch\n            if (code.length) {\n                code.splice(2, 0, 'try { // catch all errors');\n                code.splice(code.length, 0,\n                    '} catch (e) { // end try',\n                        'return ' + this.helperSymbol.id + '.reject(e)', \n                    '} // end catch');\n            }\n\n            // declare variables\n            if (symbols.length) {\n                code.splice(0, 0, 'var ' + symbols.join(','));\n            }\n\n            return code.length ?\n                        code.join(';' + this.lineFeed) + \";\" : \"\";\n        }\n    }\n\n\nexport default Compile;","'use strict';\n\nimport * as API from \"./api.js\";\n\nglobal.joqx = API;\n\nexport * from \"./api.js\";\n\nexport default API;\n"],"names":["promiseGuard","method","helper","s1","s2","s3","s4","s5","s6","s7","s8","thenable","then","call","Intent","this","registry","createRegistry","Transformer","Symbol","compiler","type","pendingCodes","register","Class","Base","string","Error","INVALID_TYPE","prototype","INVALID_CLASS","REGISTRY","set","escapeString","subject","code","escapeIndex","ESCAPE_CHARS","pad","UTF_PAD","pl","length","l","out","Array","slice","charCodeAt","toString","backslash","substring","toLowerCase","join","numeric","NUMERIC_RE","test","number","jsonRecodeArrayPath","jsonString","raw","path","jsonParsePath","cescape","FakePromise","value","onFulfill","onReject","canFulfill","isFunction","Helper","intent","transformer","IntentClass","TransformerClass","intentRegistry","transformerRegistry","transformCache","intentCache","compileTerminal","context","lexeme","cache","name","createSymbol","TYPE_NUMBER","parseInt","updateIterator","compileRule","condition","item1","item2","rule","id","TYPE_IDENTIFIER","setSymbolAccess","addDependency","contextSymbol","append","TYPE_ARGUMENTS","useReference","useArguments","instantiate","access","increment","decrement","positive","negative","typeofSymbol","notSymbol","exponential","multiplication","division","modulo","subtraction","addition","lt","gt","lte","gte","instanceOf","inOp","equal","notEqual","sequal","notSequal","and","or","setStatement","setResultIdentifier","assign","unset","setValue","setBaseArgument","helperSymbol","declare","appendCode","nullFill","Compiler","createIntent","createTransformer","createCompiler","compile","DEFAULT_COMPILER","intentMethod","API","transformerMethod","global","self","window","NAME_RE","exists","get","run","const","iterator","Parser","load","data","constructor","autoDeclare","declared","declareCode","autoFinalize","finalizeCode","constant","finalized","initialized","inFixCode","postFixCode","onInitialize","constantify","symbols","index","references","splice","symbolConfig","onDeclare","list","len","c","getDeclarationValue","generateCodeLines","onDeclarePostFix","postfix","onDeclareInfix","infix","initialize","redeclare","symbol","createVariableOfMe","getCodeValue","force","item","isArray","array","isString","pending","commit","generateInfix","cl","current","generatePostFix","getHelperId","getContextId","identifier","symbolAccess","INVALID_NON_EXISTENT_TYPE","Native","super","reference","allowAccess","finalizeOnAccess","allowBinaryOperation","onAccess","createUpdateAccessSymbol","from","directAccess","accessParent","updateAccess","allowAccessUpdate","binaryOperation","operand","operation","allow","indexOf","guard","UndefinedSymbol","NullSymbol","StringSymbol","SIGN_RE","NumberSymbol","replace","BooleanSymbol","Collection","allowAppend","generated","generateItemCode","NativeObject","Identifier","disableValueRecode","accessOrigin","setAccessOrigin","isSymbolAccess","setFinalizeOnAccess","isFinalizedOnAccess","getAccessCodeValue","getAccessOrigin","generateJSONPathArray","next","unshift","apply","getPathParts","source","operator","jsonPath","codes","line","sourceId","sourceReference","NativeSymbol","0","8","9","10","11","12","13","34","39","91","92","93","JsonPath","IdentifierSymbol","ObjectSymbol","dataAccess","CollectionSymbol","Arguments","CallSymbol","arguments","constructorCall","disableContext","onUseReference","onUseArguments","args","getArgumentsCode","getCallContext","parent","ArgumentSymbol","TransformerCallSymbol","baseArgument","base","BlockSymbol","blockStatement","resultIdentifier","statement","getBlockResultCode","ArraySymbol","Block","Compile","constantLookup","lineFeed","defaultSymbolType","errorCount","errorMessages","getSymbol","update","reportError","errorMessage","fatal","console","error","warn","ignoreSymbols","generate","config","configs","contains","validProperty","property","paths","jsonFind","createJsonPath","jsonFill","jsonUnset","strEscape","isNumeric","getTransformer","found","getIntent","transform","formatReturn","rawValue","reject","Promise","executor","handleTerminal","build","handleRule","walk","reset","completed","terminal","F","me","compiled","contextObject","rawResult","e","joqx"],"mappings":"gTAKI,SAASA,EAAaC,GAYlB,OAVA,SAAkBC,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAClD,OAAIC,WAASR,GACFA,EAAGS,KAAK,SAAUT,GACrB,OAAOF,EAAOY,KAAKX,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,KAIxDT,EAAOY,KAAKX,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,ICFnE,SAASI,IACLC,KAAKC,SAAWC,mBCApB,SAASC,IACLH,KAAKC,SAAWC,mBCNpB,SAASE,EAAOC,GACZL,KAAKK,SAAWA,EAChBL,KAAKM,KAAON,KAAKM,KAEjBN,KAAKO,gBCsBT,SAASC,EAASF,EAAMG,GACpB,IAAIC,EAAON,EAEX,IAAKO,SAAOL,GACR,MAAM,IAAIM,MAAMC,GAGpB,IAAK3B,SAAOuB,MACNA,IAAUC,GAASD,EAAMK,qBAAqBJ,GAChD,MAAM,IAAIE,MAAMG,GAGpBC,EAASC,IAAIR,EAAMK,UAAUR,KAAOA,EACxBG,GCpBhB,SAKaS,EAAaC,GAClB,IAOIC,EAPAC,EAAcC,EAGdC,EAAMC,EACNC,EAAKF,EAAIG,OACTC,EAAIR,EAAQO,OACZE,EAAMC,MAAMf,UAAUgB,MAAMhC,KAAKqB,EAAS,GAK9C,IAFAS,EAAIF,OAASC,EAENA,MACHP,EAAOD,EAAQY,WAAWJ,MACdN,EACRO,EAAID,GAbI,KAaaN,EAAYD,IAG5BA,EAAO,IAAMA,EAAO,OACzBA,EAAOA,EAAKY,SAAS,IACrBJ,EAAID,GAjBFM,MAkBUV,EAAIW,UAAU,EAAGT,EAAKL,EAAKM,QAC3BN,EAAKe,eAIzB,OAAOP,EAAIQ,KAAK,IAGxB,SACaC,EAAQlB,GACb,OAAOR,SAAOQ,GACFmB,EAAWC,KAAKpB,GAChBqB,SAAOrB,GAG3B,SACasB,EAAoBC,EAAYC,GACrC,IAAIC,EAAOC,gBAAcH,GACrBI,EAAU5B,EACVS,EAAIiB,GAAQA,EAAKlB,OAErB,GAAIC,EAAG,CACH,KAAOA,KACHiB,EAAKjB,GAAK,IAAMmB,EAAQF,EAAKjB,IAAM,IAEvC,OAAe,IAARgB,EAAeC,EAAO,IAAMA,EAAKR,KAAK,KAAO,IAExD,OAAe,IAARO,KAAoB,KCzEnC,SAASI,EAAYC,GAmBjBhD,KAAKH,KAjBL,SAAcoD,EAAWC,GACrB,IAAI/B,EAAU6B,EAEVG,GAAaC,EADAlE,UACW+D,GAE5B,OAAIrD,WAASuB,GACFA,EAAQtB,KAAKoD,EAAWC,IAG/BC,IACAhC,EAAU8B,EAAU9B,IAGjB,IAAI4B,EAAY5B,KCE/B,SAASkC,EAAOC,EAAQC,GACpB,IAAIC,EAAczD,EACd0D,EAAmBtD,EAEvBH,KAAK0D,eAAiBJ,aAAkBE,EACRF,EAAS,IAAIvD,EAE7CC,KAAK2D,oBAAsBJ,aAAuBE,EAClBF,EAAc,IAAIE,EAElDzD,KAAK4D,kBACL5D,KAAK6D,eC/BT,SAASC,EAAgBC,EAASC,GAC9B,IAAIC,EAAQD,EAAOhB,MACfkB,EAAOF,EAAOE,KACdlB,EAAQiB,EAEZ,OAAQD,EAAOE,MACf,IAAK,UACDlB,EAAQe,EAAQI,aAAanB,EAAOoB,GACpC,MAEJ,IAAK,MACDpB,EAAQe,EAAQI,aAAa,GACbE,SAASrB,EAAMd,UAAU,EAAGc,EAAMtB,QAAS,IAC3C0C,GAChB,MAEJ,IAAK,QACDpB,EAAQe,EAAQI,aAAa,GACbE,SAASrB,EAAMd,UAAU,EAAGc,EAAMtB,QAAS,GAC3C0C,GAChB,MAEJ,IAAK,SACDpB,EAAQe,EAAQI,aAAa,GACbE,SAASrB,EAAMd,UAAU,EAAGc,EAAMtB,QAAS,GAC3C0C,GAChB,MAEJ,IAAK,SACL,IAAK,UACL,IAAK,OACL,IAAK,YACL,IAAK,aACL,IAAK,WACDpB,EAAQe,EAAQI,aAAanB,EAAOkB,GAKpCD,IAAUjB,GACVe,EAAQO,eAAetB,GChC/B,SACauB,EAAYlE,EAAU2D,GAC3B,IAEIQ,EAAWC,EAAOC,EAFlBT,EAAQD,EAAOhB,MACfA,EAAQiB,EAGZ,OAAQD,EAAOE,MAEf,IAAK,SACL,IAAK,aACDlB,EAAQA,EAAM,GACd,MAEJ,QACI,OAAQgB,EAAOW,MAEf,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,YACL,IAAK,cACL,IAAK,YACL,IAAK,UACL,IAAK,gBACL,IAAK,mBACL,IAAK,aACL,IAAK,eACL,IAAK,aACL,IAAK,eACL,IAAK,cACL,IAAK,gBACL,IAAK,eAEL,IAAK,eACL,IAAK,eACL,IAAK,cACD3B,EAAQA,EAAM,GACd,MAGJ,IAAK,SACDA,EAAQ3C,EAAS8D,aAAa,QAAUnB,EAAM,GAAG4B,GAAK,IACtBC,GAChBC,kBACAC,cAAc/B,EAAM,IACpC,MAGJ,IAAK,YACDA,EAAQ3C,EAAS8D,aAAa9D,EAAS2E,cAAcJ,GACrBC,GAChBC,kBAChB,MAIJ,IAAK,UACD9B,EAAQA,EAAM,GACd,MAGJ,IAAK,UACDA,EAAQ3C,EAAS8D,aAAa,KACEU,GACpBC,kBACZ,MAEJ,IAAK,UACD9B,EAAQA,EAAM,GACd,MAEJ,IAAK,aACDA,EAAQ3C,EAAS8D,aAAa,KAAM,SACxBc,OAAOjC,EAAM,IACzB,MAEJ,IAAK,aACDA,EAAQA,EAAM,GACFiC,OAAOjC,EAAM,IACzB,MAGJ,IAAK,WACDA,EAAQ3C,EAAS8D,aAAa,KAAMU,GACxBC,kBACZ,MAEJ,IAAK,WACD9B,EAAQA,EAAM,GACd,MAEJ,IAAK,eACDA,EAAQA,EAAM,GACdA,EAAQ3C,EAAS8D,aAAa,KAAM,UACxBc,OAAOjC,EAAM,GAAIA,EAAM,IACnC,MAEJ,IAAK,eACDyB,EAAQzB,EAAM,GACdA,EAAQA,EAAM,GAAGiC,OAAOR,EAAM,GAAIA,EAAM,IACxC,MAEJ,IAAK,aACL,IAAK,aACL,IAAK,aACDzB,GAASA,EAAM,GAAGA,MAAOA,EAAM,IAE/B,MAIJ,IAAK,cACDA,EAAQ3C,EAAS8D,aAAa,KAAMe,GACpC,MAEJ,IAAK,cACDlC,EAAQA,EAAM,GACd,MAEJ,IAAK,iBACDA,EAAQ3C,EAAS8D,aAAa,KAAMe,GACxBD,OAAOjC,EAAM,IACzB,MAEJ,IAAK,iBACDA,EAAQA,EAAM,GAAGiC,OAAOjC,EAAM,IAC9B,MAGJ,IAAK,YACDA,EAAQ3C,EAAS8D,aAAa,KAAM,QACxBgB,aAAanC,EAAM,IACnBoC,aAAapC,EAAM,IAC/B,MAEJ,IAAK,YACDA,EAAQA,EAAM,GAAGqC,cACjB,MAGJ,IAAK,cACDrC,EAAQ3C,EAAS2E,cAAcM,OAAOtC,EAAM,IAAI,GAChD,MAEJ,IAAK,cACDA,EAAQA,EAAM,GAAGsC,OAAOtC,EAAM,IAAI,GAClC,MAEJ,IAAK,cACDA,EAAQA,EAAM,GAAGsC,OAAOtC,EAAM,IAAI,GAClC,MAKJ,IAAK,YACDA,EAAQA,EAAM,GAAGuC,WAAU,GAC3B,MAGJ,IAAK,YACDvC,EAAQA,EAAM,GAAGwC,WAAU,GAC3B,MAIJ,IAAK,UACDxC,EAAQA,EAAM,GAAGuC,WAAU,GAC3B,MAGJ,IAAK,UACDvC,EAAQA,EAAM,GAAGwC,WAAU,GAC3B,MAGJ,IAAK,UACDxC,EAAQA,EAAM,GAAGyC,UAAS,GAC1B,MAGJ,IAAK,UACDzC,EAAQA,EAAM,GAAG0C,UAAS,GAC1B,MAGJ,IAAK,UACD1C,EAAQA,EAAM,GAAG2C,eACjB,MAGJ,IAAK,UACD3C,EAAQA,EAAM,GAAG4C,YACjB,MAGJ,IAAK,gBACD5C,EAAQA,EAAM,GAAG6C,YAAY7C,EAAM,IACnC,MAGJ,IAAK,mBACDA,EAAQA,EAAM,GAAG8C,eAAe9C,EAAM,IACtC,MAGJ,IAAK,mBACDA,EAAQA,EAAM,GAAG+C,SAAS/C,EAAM,IAChC,MAGJ,IAAK,mBACDA,EAAQA,EAAM,GAAGgD,OAAOhD,EAAM,IAC9B,MAGJ,IAAK,aACDA,EAAQA,EAAM,GAAGiD,YAAYjD,EAAM,IACnC,MAGJ,IAAK,aACDA,EAAQA,EAAM,GAAGkD,SAASlD,EAAM,IAChC,MAGJ,IAAK,eACL,IAAK,eACDA,EAAQA,EAAM,GAAGmD,GAAGnD,EAAM,IAC1B,MAGJ,IAAK,eACL,IAAK,eACDA,EAAQA,EAAM,GAAGoD,GAAGpD,EAAM,IAC1B,MAGJ,IAAK,eACL,IAAK,eACDA,EAAQA,EAAM,GAAGqD,IAAIrD,EAAM,IAC3B,MAGJ,IAAK,eACL,IAAK,eACDA,EAAQA,EAAM,GAAGsD,IAAItD,EAAM,IAC3B,MAEJ,IAAK,gBACDA,EAAQA,EAAM,GAAGuD,WAAWvD,EAAM,IAClC,MAEJ,IAAK,gBACDA,EAAQA,EAAM,GAAGwD,KAAKxD,EAAM,IAC5B,MAEJ,IAAK,aACDA,EAAQA,EAAM,GAAGyD,MAAMzD,EAAM,IAC7B,MAEJ,IAAK,aACDA,EAAQA,EAAM,GAAG0D,SAAS1D,EAAM,IAChC,MAEJ,IAAK,aACDA,EAAQA,EAAM,GAAG2D,OAAO3D,EAAM,IAC9B,MAEJ,IAAK,aACDA,EAAQA,EAAM,GAAG4D,UAAU5D,EAAM,IACjC,MAEJ,IAAK,eACL,IAAK,eACDA,EAAQA,EAAM,GAAG6D,IAAI7D,EAAM,IAC3B,MAEJ,IAAK,cACL,IAAK,cACDA,EAAQA,EAAM,GAAG8D,GAAG9D,EAAM,IAC1B,MAEJ,IAAK,gBACDyB,EAAQzB,EAAM,GACd0B,EAAQ1B,EAAM,GACdwB,EAAYxB,EAAM,GAElBA,EAAQ3C,EAAS8D,aAAa,KAAMU,GACxBC,kBACAC,cAAcP,GAE1BC,EAAQpE,EAAS8D,aAAa,KAAM,SACpB4C,cACI,OAAQvC,EAAUI,GAAI,MAE1BoC,oBAAoBhE,EAAM4B,IAC1BG,cAAcN,GAE9BC,EAAQrE,EAAS8D,aAAa,KAAM,SACpB4C,aAAa,QACbC,oBAAoBhE,EAAM4B,IAC1BG,cAAcL,GAE9B1B,EAAM+B,cAAcN,GAChBM,cAAcL,GAElB,MAGJ,IAAK,eACL,IAAK,eACL,IAAK,eACL,IAAK,eACL,IAAK,eACL,IAAK,eACL,IAAK,eACD1B,EAAQA,EAAM,GAAGiE,OAAOjE,EAAM,GAAIA,EAAM,IAGxC,MAGJ,IAAK,WACDA,EAAQA,EAAM,GAAGkE,QACjB,MAGJ,IAAK,cACDlE,EAAQA,EAAM,GAAG8B,kBACjB,MAEJ,IAAK,cACD9B,EAAQA,EAAM,GAAGmE,SAASnE,EAAM,GAAGA,MACP,IACAA,EAAM,GAAGA,OACrC,MAGJ,IAAK,gBACDA,EAAQ3C,EAAS8D,aAAa,KAAM,eACpBgB,aAAanC,EAAM,IACnC,MAEJ,IAAK,gBACDA,EAAQ3C,EAAS8D,aAAa,KAAM,eACpBgB,aAAanC,EAAM,IACnBoC,aAAapC,EAAM,IACnC,MAGJ,IAAK,cACDA,EAAQA,EAAM,GAAGoE,gBAAgBpE,EAAM,IACvC,MAGJ,IAAK,SACDA,EAAQA,EAAM,GACd,MAEJ,IAAK,SACDyB,EAAQzB,EAAM,GACd0B,EAAQ1B,EAAM,GACdA,EAAQ3C,EAAS8D,aAAa9D,EAASgH,aAAazC,GACpC,YACI1D,EAAauD,EACTvC,UAAU,EAAGuC,EAAM/C,SAAW,KAC9BgD,EAAME,GAAK,IACnBC,GACJC,kBACAC,cAAcL,GAG1B,MAEJ,IAAK,WACD1B,EAAQA,EAAM,IACRsE,UACNjH,EAASkH,YACLvE,EAAM4B,GAAI,MAAOvE,EAASgH,aAAazC,GAC3B,iBAAkB5B,EAAM4B,GAAI,iBAE5CvE,EAASmH,SAASxE,EAAM4B,IACxBvE,EAASkH,YACL,UAAWvE,EAAM4B,MAMzBX,IAAUjB,GACV3C,EAASiE,eAAetB,GC1YpC,SAASyE,EAASnE,EAAQC,GACtBvD,KAAKb,OAAS,IAAIkE,EAAOC,EAAQC,GCMrC,SAQamE,IACL,OAAO,IAAIvH,EAGnB,SACawH,IACL,OAAO,IAAIxH,EAGnB,SACayH,EAAetE,EAAQC,GAC5B,OAAO,IAAIkE,EAASnE,EAAQC,GAGpC,SACasE,EAAQ1G,GACb,OAAO2G,GAAiBD,QAAQ1G,GAGxC,SACamC,EAAOY,EAAM6D,GAElB,OADAD,GAAiBxE,OAAOY,EAAM6D,GACvBC,GAGf,SACazE,EAAYW,EAAM+D,GAEvB,OADAH,GAAiBvE,YAAYW,EAAM+D,GAC5BD,gDC3Df,MAAiC,oBAAXE,OAAyBA,OACnB,oBAATC,KAAuBA,KACZ,oBAAXC,OAAyBA,YXQ5B,8CAMhBrI,EAAOe,WAEHN,SAAU,SAAU0D,EAAMZ,GACtB,IAAIrD,EAAWD,KAAKC,SAEpB,IAAKU,SAAOuD,GACR,MAAM,IAAItD,MAAM,oCAEf,IAAKyH,EAAQ9F,KAAK2B,GACnB,MAAM,IAAItD,MAAM,sCAAwCsD,GAG5D,IAAKhF,SAAOoE,GACR,MAAM,IAAI1C,MAAM,8CACAsD,GAGpB,GAAIjE,EAASqI,OAAOpE,GAChB,MAAM,IAAItD,MAAM,2BAA6BsD,EAC7B,kBAKpB,OAFAjE,EAASgB,IAAIiD,EAAMjF,EAAaqE,IAEzBtD,MAGXsI,OAAQ,SAAUpE,GACd,OAAOlE,KAAKC,SAASqI,OAAOpE,IAGhCqE,IAAK,SAAUrE,GACX,IAAIjE,EAAWD,KAAKC,SACpB,OAAOA,EAASqI,OAAOpE,GAAQjE,EAASsI,IAAIrE,GAAQ,MAGxDsE,IAAK,SAAUtE,EAAMlB,GACjB,IAAI/C,EAAWD,KAAKC,SAEpB,OAAOA,EAASqI,OAAOpE,GAAQjE,EAASsI,IAAIrE,EAAbjE,CAAmB+C,QAAS,IC5CnEyF,IAAMJ,EAAU,gEAMhBlI,EAAYW,WAERN,SAAU,SAAU0D,EAAMX,GACtB,IAAItD,EAAWD,KAAKC,SAEpB,IAAKU,SAAOuD,GACR,MAAM,IAAItD,MAAM,yCAEf,IAAKyH,EAAQ9F,KAAK2B,GACnB,MAAM,IAAItD,MAAM,2CAA6CsD,GAGjE,IAAKhF,SAAOqE,GACR,MAAM,IAAI3C,MAAM,mDACAsD,GAGpB,GAAIjE,EAASqI,OAAOpE,GAChB,MAAM,IAAItD,MAAM,gCAAkCsD,EAClC,kBAKpB,OAFAjE,EAASgB,IAAIiD,EAAMjF,EAAasE,IAEzBvD,MAGXsI,OAAQ,SAAUpE,GACd,OAAOlE,KAAKC,SAASqI,OAAOpE,IAGhCqE,IAAK,SAAUrE,GACX,IAAIjE,EAAWD,KAAKC,SACpB,OAAOA,EAASqI,OAAOpE,GAAQjE,EAASsI,IAAIrE,GAAQ,+joCWxChDwE,EADSC,EAAOC,KAAKC,GACHH,WVK9BtI,EAAOU,WACHgI,YAAa1I,EACbwE,GAAI,KAEJmE,aAAa,EACbC,UAAU,EACVhG,MAAO,KACPiG,YAAa,KAEbC,cAAc,EACdC,aAAc,KACdC,UAAU,EAEVC,WAAW,EACXC,aAAa,EAEbC,UAAW,KACXC,YAAa,KAEbC,aAAc,SAAUpJ,EAAU2C,EAAO0G,GACrC,IAAIC,EAAUtJ,EAASsJ,QACnBC,EAAQD,EAAQjI,OAChBkD,EAAK,IAAMgF,EAEf5J,KAAK4E,GAAKA,EAGV5E,KAAKoJ,SAAWM,EAChB1J,KAAKgD,MAAQA,EACbhD,KAAK6J,cAEDH,EACAC,EAAQG,OAAO,EAAG,EAAGlF,GAGrB+E,EAAQC,GAAShF,EAGrBvE,EAAS0J,aAAanF,GAAM5E,MAIhCgK,UAAW,WAMP,IALA,IAGUhH,EAHNiH,EAAOjK,KAAK6J,WACZK,EAAMD,EAAKvI,OACXyI,GAAK,EAGFD,KACID,IAAOE,GACT7C,WAGTtE,EAAQhD,KAAKoK,wBAGTpK,KAAKqK,oBAAoBrK,KAAK4E,GAAI,MAAO5B,MAIjDsH,iBAAkB,SAAUC,GACxBvK,KAAKqK,kBAAkBE,IAG3BC,eAAgB,SAAUC,GACtBzK,KAAKqK,kBAAkBI,IAG3BC,WAAY,SAAU1H,EAAO0G,GACpB1J,KAAKsJ,cACNtJ,KAAKsJ,aAAc,EAEnBtJ,KAAKyJ,aAAazJ,KAAKK,SACH2C,GACgB,IAAhB0G,IAAwC,IAAhBA,EACpBA,EAAc1J,KAAKoJ,UAEvCpJ,KAAK+I,aACL/I,KAAKsH,YAKjBA,QAAS,WACL,IAAIjH,EAAWL,KAAKK,SAChBkK,EAAUvK,KAAKwJ,YACfiB,EAAQzK,KAAKuJ,UA2BjB,OAxBKvJ,KAAKgJ,WACNhJ,KAAKgJ,UAAW,EAEhBhJ,KAAKgK,UAAU3J,IAIfoK,IACAzK,KAAKwK,eAAeC,UAEbzK,KAAKuJ,WAIZgB,IACAvK,KAAKsK,iBAAiBC,UAGfvK,KAAKwJ,mBAGLxJ,KAAKgJ,UAGThJ,MAIX2K,UAAW,WAIP,OAHI3K,KAAKgJ,WACLhJ,KAAKgJ,UAAW,GAEbhJ,KAAKsH,WAGhBvC,cAAe,SAAU6F,GACrB,IAAIX,EAAOjK,KAAK6J,WAEhB,KAAMe,aAAkBxK,GACpB,MAAM,IAAIQ,MAAM,gCAKpB,OAFAqJ,EAAKA,EAAKvI,QAAUkJ,EAEb5K,MAGX2F,aAAc,WACV,OAAO3F,KAAK6K,mBAAmB,UAAY7K,KAAK4E,KAGpDgB,UAAW,WACP,OAAO5F,KAAK6K,mBAAmB,IAAM7K,KAAK4E,KAK9CwF,oBAAqB,WACjB,OAAOpK,KAAK8K,gBAGhBA,aAAc,WACV,OAAO9K,KAAKgD,OAGhBqH,kBAAmB,SAAUrH,EAAO+H,GAChC,IAKIZ,EAAGxI,EAAGqJ,EAAMvJ,EALZpB,EAAWL,KAAKK,SAChB4K,EAAUC,QACVC,EAAWxK,SACXyK,EAAUpL,KAAKO,aACf8K,EAASrL,KAAKgJ,WAAsB,IAAV+B,EAO9B,GAJII,EAASnI,KACTA,IAAUA,KAGViI,EAAQjI,GAER,IADAvB,EAAK2J,EAAQ1J,OACRyI,GAAK,EAAGxI,EAAIqB,EAAMtB,OAAQC,MAEvBsJ,EADJD,EAAOhI,IAAQmH,KACMgB,EAASH,MAC1BI,EAAQ3J,KAAQuJ,GAM5B,GAAIK,EAAQ,CACR,IAAKlB,GAAK,EAAGxI,EAAIyJ,EAAQ1J,OAAQC,KAC7BtB,EAASkH,WAAW6D,IAAUjB,IAElCiB,EAAQtB,OAAO,EAAGsB,EAAQ1J,QAG9B,OAAO1B,MAGXsL,cAAe,SAAUlK,GACrB,IAGI+I,EAAGxI,EAAGqJ,EAAMO,EAHZC,EAAUxL,KAAKuJ,UACf0B,EAAUC,QACVC,EAAWxK,SAWf,GARK6K,IACDA,EAAUxL,KAAKuJ,cAGf4B,EAAS/J,KACTA,GAAQA,IAGR6J,EAAQ7J,GAER,IADAmK,EAAKC,EAAQ9J,OACRyI,GAAK,EAAGxI,EAAIP,EAAKM,OAAQC,MAEtBsJ,EADJD,EAAO5J,IAAO+I,KACOgB,EAASH,MAC1BQ,EAAQD,KAAQP,IAOhCS,gBAAiB,SAAUrK,GACvB,IAGI+I,EAAGxI,EAAGqJ,EAAMO,EAHZC,EAAUxL,KAAKwJ,YACfyB,EAAUC,QACVC,EAAWxK,SAWf,GARK6K,IACDA,EAAUxL,KAAKwJ,gBAGf2B,EAAS/J,KACTA,GAAQA,IAGR6J,EAAQ7J,GAER,IADAmK,EAAKC,EAAQ9J,OACRyI,GAAK,EAAGxI,EAAIP,EAAKM,OAAQC,MAEtBsJ,EADJD,EAAO5J,IAAO+I,KACOgB,EAASH,MAC1BQ,EAAQD,KAAQP,IAMhCU,YAAa,WACT,OAAO1L,KAAKK,SAASgH,aAAazC,IAGtC+G,aAAc,WACV,OAAO3L,KAAKK,SAAS2E,cAAcJ,IAGvCiG,mBAAoB,SAAU7H,GAC1B,IAAI4I,EAcJ,OAZIV,QAAMlI,KACNA,EAAQA,EAAMZ,KAAK,KAGlBzB,SAAOqC,KACRA,EAAQhD,KAAK4E,IAGjBgH,EAAa5L,KAAKK,SAAS8D,aAAanB,EAAO,cAC/C4I,EAAWC,cAAe,EAC1BD,EAAW7G,cAAc/E,MAElB4L,ICzQf,IAAI/K,EAAe,4BACfE,EAAgB,oCAChB+K,EAA4B,4CAC5B9K,EAAWd,mBUHL6L,cAAoB,WAEV1L,GACR2L,OAAMhM,KAAAK,GAENL,KAAKiM,UACDjM,KAAK+I,YACL/I,KAAKkM,aAAc,EAEvBlM,KAAKmM,kBAAmB,EAExBnM,KAAKoM,sBACD,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,aACA,KACA,KACA,MACA,KACA,MACA,KACA,oGAKRL,YAAAM,oBACQrM,KAAKmM,kBACLnM,KAAKsH,WAIbyE,YAAAO,kCAAyBC,EAAMC,GAC3B,IAAIZ,EAUJ,OAPA5L,KAAKsH,UAGLsE,EAAa5L,KAAK6K,qBAClBe,EAAWY,aAAeA,EAC1BZ,EAAWa,aAAeF,EAEnBX,GAIXG,YAAAzG,gBAAO2G,EAAWO,GAEd,KAAMP,aAAqBvL,GACvB,MAAM,IAAIE,MAhEL,oDAmET,IAAKZ,KAAKkM,YACN,MAAM,IAAItL,MAnEO,+BA2ErB,OALA4L,GAAgC,IAAjBA,EAEfxM,KAAKqM,SAASJ,EAAWO,GAGlBP,EAAUS,aAAa1M,KAAMwM,IAIxCT,YAAAW,sBAAaH,EAAMC,GAEf,KAAMD,aAAgB7L,GAClB,MAAM,IAAIE,MAjFS,qCAoFvB,IAAKZ,KAAK2M,kBACN,MAAM,IAAI/L,MApFE,sCAoF4B2L,EAAKjM,MAGjD,OAAON,KAAKsM,yBAAyBC,EAAMC,IAI/CT,YAAA9E,kBACI,MAAM,IAAIrG,MAAM,uBAGpBmL,YAAA1G,uBACI,MAAM,IAAIzE,MAAM,0BAGpBmL,YAAA7E,iBACI,MAAM,IAAItG,MAAM,6BAIpBmL,YAAAa,yBAAgBC,EAASC,GACrB,IACIlC,EADAmC,EAAQ/M,KAAKoM,qBAGjB,KAAMS,aAAmBnM,GACrB,MAAM,IAAIE,MAAM,gCAGpB,IAAkC,IAA9BmM,EAAMC,QAAQF,GACd,MAAM,IAAIlM,MAAM,yBAA2BkM,EAC3B,QAAUD,EAAQvM,MAItC,OAAQwM,GACR,IAAK,KACDlC,EAAS5K,KAAK6K,oBAAoB,YAAa7K,KAAK4E,GAAI,IACZiI,EAAQjI,GAAI,MACxD,MAEJ,QACIgG,EAAS5K,KAAK6K,oBAAoB7K,KAAK4E,GAAI,IACXkI,EAAW,IACXD,EAAQjI,KAG5C,OAAOgG,EAAO7F,cAAc8H,IAKhCd,YAAAlG,qBAAYgH,GACR,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAjG,wBAAe+G,GACX,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAAhG,kBAAS8G,GACL,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAA/F,gBAAO6G,GACH,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAA7F,kBAAS2G,GACL,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAA9F,qBAAY4G,GACR,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAA5F,YAAG0G,GACC,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAA1F,aAAIwG,GACA,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAA3F,YAAGyG,GACC,OAAO7M,KAAK4M,gBAAgBC,EAAS,MAGzCd,YAAAzF,aAAIuG,GACA,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAxF,oBAAWsG,GACP,OAAO7M,KAAK4M,gBAAgBC,EAAS,eAGzCd,YAAAvF,cAAKqG,GACD,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAtF,eAAMoG,GACF,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAApF,gBAAOkG,GACH,OAAO7M,KAAK4M,gBAAgBC,EAAS,QAGzCd,YAAArF,kBAASmG,GACL,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAnF,mBAAUiG,GACN,OAAO7M,KAAK4M,gBAAgBC,EAAS,QAGzCd,YAAAlF,aAAIgG,GACA,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAjF,YAAG+F,GACC,OAAO7M,KAAK4M,gBAAgBC,EAAS,OAGzCd,YAAAkB,sBA5MiBvM,GCJfwM,cAA6B,WAEnB7M,GACR2L,OAAMhM,KAAAK,GACNL,KAAKkM,YACDlM,KAAK+I,aAAc,mGALDrI,GCAxByM,cAAmC,sIAAhBD,GCAnBE,cAA0B,sIAAL1M,GCD3B2M,EAAU,UAIJC,cAA0B,mIAAAA,YAE5B7H,oBACI,IAAIzC,EAAQhD,KAAKgD,MAOjB,OALIrC,SAAOqC,KACPhD,KAAKgD,MAAQ,IAAMA,EAAMuK,QAAQF,EAAS,IAC1CrN,KAAK2K,aAGF3K,MAGXsN,YAAA5H,oBACI,IAAI1C,EAAQhD,KAAKgD,MAQjB,OANIrC,SAAOqC,KACPhD,KAAKgD,MAAQ,IAAMA,EAAMuK,QAAQF,EAAS,IAC1CrN,KAAK2K,aAIF3K,SAtBYU,GCHrB8M,cAA2B,sIAAL9M,GCItB+M,cAAgC,WAEtBpN,GACR2L,OAAMhM,KAAAK,GAENL,KAAK+I,aAAc,EAEnB/I,KAAK6I,sGAIT4E,YAAAC,uBACI,OAAO,GAGXD,YAAAxI,gBAAO+F,GACH,IAAIf,EAAOjK,KAAK6I,KAEhB,KAAMmC,aAAgBtK,GAClB,MAAM,IAAIE,MAxBP,oCA2BP,IAAKZ,KAAK0N,YAAY1C,GAClB,MAAM,IAAIpK,MA3BK,0CA2B4BoK,EAAK1K,MAKpD,OAFA2J,EAAKA,EAAKvI,QAAUsJ,EAEbhL,MAIXyN,YAAA3C,wBAOI,QAFIF,EAJA/B,EAAO7I,KAAK6I,KACZsB,GAAK,EACLxI,EAAIkH,EAAKnH,OACTiM,KAGGhM,MACHiJ,EAAS/B,IAAOsB,IACT7C,UACPqG,EAAUxD,QAAUyD,iBAAiBhD,EAAQT,GAIjD,OAAOwD,EAAUvL,KAAK,MAI1BqL,YAAAG,0BAAiBhD,GACb,OAAOA,EAAOhG,OAnDGiJ,GCJnBhM,cAAmB,mIAAAA,YAErBiJ,wBACI,MAAO,IAAMkB,YAAMlB,kBAAa9K,MAAI,QAHxBU,GCGdoN,cAAgC,WAEtBzN,GACR2L,OAAMhM,KAAAK,GAENL,KAAK+I,YACD/I,KAAKwM,aACLxM,KAAK6L,aACL7L,KAAKmM,iBACLnM,KAAK+N,oBAAqB,EAE9B/N,KAAKyM,aAAe,KAEpBzM,KAAK6J,cAEL7J,KAAKkM,YACDlM,KAAK2M,mBAAoB,EAE7B3M,KAAKgO,aAAe,mGAIxBF,YAAAG,yBAAgBjD,GAEZ,OADAhL,KAAKgO,aAAehD,EACbhL,MAGX8N,YAAAhJ,yBAAgBoJ,GAEZ,OADAlO,KAAK6L,cAAkC,IAAnBqC,EACblO,MAGX8N,YAAAK,6BAAoBC,GAEhB,OADApO,KAAKmM,kBAA2C,IAAxBiC,EACjBpO,MAIX8N,YAAA1D,+BAKI,OAAOpK,KAAK6L,aACA7L,KAAK8K,eACL9K,KAAKqO,sBAGrBP,YAAA3G,kBAASnE,GAEL,OADAhD,KAAKgD,MAAQA,EACNhD,MAGX8N,YAAAhD,wBACI,IAAI9H,EAAQhD,KAAKgD,MAEjB,OAAOrC,SAAOqC,GACFhD,KAAK6L,aACD7I,EACA,IAAMA,EAAQ,IAClB,MAGhB8K,YAAAO,8BACI,OACIrO,KAAK0L,cAAe,QACR1L,KAAKsO,kBAAmB,IACxBtO,KAAKuO,wBAAyB,KAC3CnM,KAAK,KAGZ0L,YAAAQ,2BACI,IAAItD,EAAOhL,KAAKgO,aAChB,OAAOrN,SAAOqK,GAAQA,EAAOhL,KAAK2L,gBAGtCmC,YAAAS,iCAKI,IAJA,IAEIC,EAFAhD,EAAUxL,KACViK,KAGGuB,EAAQiB,aAAcjB,EAAUgD,EAKnC,GAJAvE,EAAKwE,QAAQjD,EAAQV,iBAErB0D,EAAOhD,EAAQiB,eAEW,aAAd+B,EAAKlO,KAAqB,CAClC2J,EAAKwE,QAAQC,MAAMzE,EAAMuE,EAAKG,gBAC9B,MAKR,MAAO,IAAM1E,EAAK7H,KAAK,KAAO,KAIlC0L,YAAAxB,kCAAyBC,EAAMC,GAE3B,OAAKA,GAILxM,KAAKwM,aAAeA,EACpBxM,KAAKyM,aAAeF,EAGbvM,MAPIgM,YAAMM,8BAAyBtM,KAAAuM,EAAMC,IAapDsB,YAAA7G,gBAAO2H,EAAQC,GACX,IAAIC,EAAW9O,KAAKuO,wBAChBpP,EAASa,KAAK0L,cACd3H,EAAU/D,KAAK2L,eACfoD,KACAC,EAAO,EACPC,EAAWL,EAAOhK,GAClBA,EAAK5E,KAAK4E,GACVsK,EAAkBD,EAStB,GANAjP,KAAK+E,cAAc6J,GAGnBG,EAAMC,MAAW,aAGbrO,SAAOkO,GAIP,OAFAA,EAAWA,EAAS3M,UAAU,EAAG2M,EAASnN,OAAS,IAGnD,IAAK,KACDwN,EAAkB,YAActK,EAAK,KAAOqK,EAAW,IACvD,MAEJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDC,EAAkBtK,EAAK,IAAMiK,EAAW,IAAMI,EActD,OARAF,EAAMC,MACFpK,EAAI,MAAOzF,EAAQ,QAAS4E,EAAS,IACT+K,EAAU,IACVI,EAAiB,KAGjDlP,KAAKsL,cAAcyD,GAEZ/O,MAGX8N,YAAAzI,uBAKI,OAJarF,KAAK6K,oBACM,OAAS7K,KAAK4E,IAElB,eAIxBkJ,YAAA5G,iBAKI,OAJAlH,KAAKsL,gBACDtL,KAAK0L,cAAe,UAAW1L,KAAK2L,eAAgB,IAChC3L,KAAKuO,wBAAyB,OAE/CvO,MAGX8N,YAAAvI,mBAAUgF,GAmBN,OAjBIA,GACAvK,KAAKyL,kBACGzL,KAAK0L,cAAe,QAAS1L,KAAK2L,eAAgB,IAC9B3L,KAAKuO,wBAAyB,IAC9BvO,KAAK4E,GAAI,WAGrC5E,KAAKgJ,UAAW,GAMhBhJ,KAAKiH,OAAOjH,KAAKK,SAAS8D,aAAa,IAAK,UAAW,MAIpDnE,MAIX8N,YAAAtI,mBAAU+E,GAeN,OAbIA,EACAvK,KAAKyL,kBACGzL,KAAK0L,cAAe,QAAS1L,KAAK2L,eAAgB,IAC9B3L,KAAKuO,wBAAyB,IAC9BvO,KAAK4E,GAAI,WAMrC5E,KAAKiH,OAAOjH,KAAKK,SAAS8D,aAAa,IAAK,UAAW,MAGpDnE,SAvNUmP,GjBAzB3N,EAAU,OACVc,EAAa,qBACbhB,GACI8N,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KkBZFC,cAAkC,WACxB3P,GACR2L,OAAMhM,KAAAK,GAENL,KAAK6L,cAAe,gGAGxBmE,YAAAlF,wBACI,OAAO9K,KAAKqO,sBAGhB2B,YAAArB,wBACI,IAAI/L,EAAO5C,KAAKgD,MAEhB,OADAJ,EAAOA,EAAKV,UAAU,EAAGU,EAAKlB,QACvBe,EAAoBG,GAAM,IAGrCoN,YAAAzB,iCACI,IAAI3L,EAAO5C,KAAKgD,MAEhB,OADAJ,EAAOA,EAAKV,UAAU,EAAGU,EAAKlB,QACvBe,EAAoBG,IAI/BoN,YAAA/I,gBAAO2H,EAAQC,GACX,OAAO7C,YAAM/E,YAAOjH,KAAA4O,EAAQC,OAzBboB,GCLjBC,cAAsC,WAE5B7P,GACR2L,OAAMhM,KAAAK,GACNL,KAAKmQ,4GAITD,YAAAjL,gBAAO+F,EAAM9G,GACT,IAAI+F,EAAOjK,KAAKmQ,WAEhB,OADAlG,EAAKA,EAAKvI,QAAUwC,EACb8H,YAAM/G,YAAOjF,KAAAgL,IAGxBkF,YAAApF,wBACI,MAAO,IAAMkB,YAAMlB,kBAAa9K,MAAI,KAGxCkQ,YAAAtC,0BAAiBhD,EAAQT,GAErB,OADWnK,KAAKmQ,WAAWhG,GACb,IAAMS,EAAOhG,OApBRwL,GCArBC,cAAuB,WAEbhQ,GACR2L,OAAMhM,KAAAK,GAENL,KAAK+I,aAAc,gGAKvBsH,YAAAjG,+BACI,OAAO,SAXS1J,GCOlB4P,cAA8B,WAEpBjQ,GACR2L,OAAMhM,KAAAK,GAENL,KAAK+I,YACD/I,KAAKkJ,cAAe,EAExBlJ,KAAKiM,UACDjM,KAAKuQ,UAAY,KAErBvQ,KAAKwQ,iBAAkB,EACvBxQ,KAAKyQ,gBAAiB,gGAG1BH,YAAAI,4BAIAJ,YAAAK,4BAIAL,YAAAjL,uBAEI,OADArF,KAAKwQ,iBAAkB,EAChBxQ,MAGXsQ,YAAAlG,+BACI,IAAI6B,EAAYjM,KAAKiM,UACjB2E,EAAO5Q,KAAKuQ,UAEhB,OAAItE,GACAA,EAAU3E,UAEVsJ,EAAO5Q,KAAK6Q,oBAEJ7Q,KAAKwQ,iBAEG,OAAQvE,EAAUrH,GAAI,IAAKgM,EAAM,MAGjC3E,EAAUrH,GAAI,SAAUgM,EAAM,MAC/BxO,KAAK,KAGjB,MAIXkO,YAAAO,4BACI,IAAID,EAAO5Q,KAAKuQ,UAKhB,OAHAK,EAAOA,EACKA,EAAK9F,eAAiB,GAE3B9K,KAAKwQ,gBACAI,EACA5Q,KAAK8Q,kBAAoBF,EAAO,IAAMA,EAAO,KAI7DN,YAAAQ,0BACI,IACIC,EADA9E,EAAYjM,KAAKiM,UAGrB,OAAIA,GAAgC,eAAnBA,EAAU3L,OACvByQ,EAAS9E,EAAUQ,eAEfsE,EAAOzJ,UACAyJ,EAAOnM,IAIf5E,KAAK2L,gBAGhB2E,YAAAnL,sBAAayF,GACT,KAAMA,aAAkBiD,GACpB,MAAM,IAAIjN,MApFH,yCAuFX,OAAQgK,GACR,IAAK,SACD,MAAM,IAAIhK,MAxFC,wCA8Ff,OAHAZ,KAAKiM,UAAYrB,EACjB5K,KAAK0Q,eAAe9F,GAEb5K,MAGXsQ,YAAAlL,sBAAawF,GACT,KAAMA,aAAkBoG,GACpB,MAAM,IAAIpQ,MArGF,yCA2GZ,OAHAZ,KAAKuQ,UAAY3F,EACjB5K,KAAK2Q,eAAe/F,GAEb5K,SArGU8N,GCRnBmD,cAAyC,WAC/B5Q,GACR2L,OAAMhM,KAAAK,GAENL,KAAKkR,aAAe,mGAGxBD,YAAAP,wBAAe9F,GACXA,EAAOzD,SACHnH,KAAKK,SAASgH,aAAazC,GAC3B,oBAAsBgG,EAAO5H,MAAQ,OAG7CiO,YAAA7J,yBAAgB4D,GAEZ,OADAhL,KAAK+E,cAAciG,GAAMkG,aAAelG,EACjChL,MAGXiR,YAAA7G,+BACI,IAAI6B,EAAYjM,KAAKiM,UACjB2E,EAAO5Q,KAAKuQ,UAEhB,OAAItE,GACAA,EAAU3E,UAEVsJ,EAAO5Q,KAAK6Q,oBAEF5E,EAAUrH,GAAI,IAAKgM,EAAM,KAAMxO,KAAK,KAG3C,MAIX6O,YAAAJ,4BACI,IAAID,EAAO5Q,KAAKuQ,UACZY,EAAOnR,KAAKkR,aAWhB,OATAN,EAAOA,EACKA,EAAK9F,eAAiB,GAE9BqG,IACAP,EAAOA,EACMO,EAAKvM,GAAK,IAAMgM,EAChBO,EAAKvM,IAGf5E,KAAKK,SAASgH,aAAazC,IAAMgM,EAAO,IAAMA,EAAO,QA/ChCN,GCIlCc,cAAqC,WAE3B/Q,GACR2L,OAAMhM,KAAAK,GACNL,KAAKqR,eAAiB,KACtBrR,KAAKsR,iBAAmB,mGAI5BF,YAAApH,qBACI,IAAIuH,EAAYvR,KAAKqR,eAErBE,EAAYA,EAAYA,EAAUnP,KAAK,IAAM,GAE7CpC,KAAKqK,mBAAmBkH,EAAY,wBAEpCvF,YAAMhC,eAAUhK,MAEhBA,KAAKqK,mBACDrK,KAAKwR,uBAGTxR,KAAKqK,mBAAmB,uBAG5B+G,YAAAhH,+BACI,OAAO,MAGXgH,YAAAI,8BACI,IAGI5G,EAAQxJ,EAHR6I,EAAOjK,KAAK6J,WACZ+B,EAAa5L,KAAKsR,iBAClBpH,EAAMD,EAAKvI,OAWf,OARIwI,GACAU,EAASX,EAAKC,EAAM,GACpB9I,EAAQpB,KAAK4E,GAAK,MAAQgG,EAAOhG,IAGjCxD,EAAOpB,KAAK4E,GAAK,eAGdgH,EAAaA,EAAa,MAAQxK,EAAOA,GAGpDgQ,YAAArK,sBAAawK,GAQT,OAPI5Q,SAAO4Q,KACPA,GAAaA,IAGbrG,QAAMqG,KACNvR,KAAKqR,eAAiBE,GAEnBvR,MAGXoR,YAAApK,6BAAoBpC,GAIhB,OAHIjE,SAAOiE,KACP5E,KAAKsR,iBAAmB1M,GAErB5E,SA7DWiQ,GCe1BzP,EAAS,UAAWE,GAEpBF,EAAS,OAAQ2M,GACjB3M,EAAS,YAAa0M,GAEtB1M,EAAS,SAAU4M,GACnB5M,EAAS,SAAU8M,GACnB9M,EAAS,UAAWgN,GAEpBhN,EAAS,QAASiR,GAClBjR,EAAS,SAAU0P,GACnB1P,EAAS,OAAQ8P,GAEjB9P,EAAS,aAAcsN,GACvBtN,EAAS,WAAYwP,GAErBxP,EAAS,YAAa6P,GACtB7P,EAAS,cAAeL,GACxBK,EAAS,QAASkR,GCjCd,IAAMC,EAAQ,SACEjJ,GACZ,IACQ3E,EAAS5E,EAEjBa,KAAS4R,kBACT5R,KAAS+J,gBACT/J,KAAS2J,WACT3J,KAASoB,QACTpB,KAAS0I,SAAWA,EAEpB1I,KAAS6R,SAAW,KACpB7R,KAAS8R,kBAAoB,QAE7B9R,KAAS+R,WAAa,EACtB/R,KAASgS,iBAEThS,KAASgF,cAAgBjB,EAAU/D,KAAKmE,aAAa,UAf5B,cAkBzBnE,KAASqH,aAAelI,EAASa,KAAKmE,aAAa,SAlB1B,cAsBzBJ,EAAY8H,aACR1M,EAAW0M,cAAe,EAE9B9H,EAAYuD,UACZnI,EAAWmI,WAIfqK,YAAIxN,sBAAanB,EAAO1C,EAAMoJ,GAC1B,IAAQkB,E1B3BhB,SAAqBtK,EAAMD,GACvB,IACII,EADAR,EAAWe,EAGf,IAAKL,SAAOL,GACR,MAAM,IAAIM,MAAMC,GAKpB,KAFAJ,EAAQR,EAASsI,IAAIjI,IAGjB,MAAM,IAAIM,MAAMkL,GAGpB,OAAO,IAAIrL,EAAMJ,G0BaIgF,CAAY/E,EAAMN,MAInC,OAFA4K,EAAWF,WAAW1H,EAAO0G,GAElBkB,GAGf+G,YAAIM,mBAAUrN,GAIV,OAAsB,IAHJ5E,KAAK2J,QACCqD,QAAQpI,GAEN5E,KAAK+J,aAAanF,GAAM,MAGtD+M,YAAIrN,wBAAetB,GACfhD,KAAS0I,SAASwJ,OAAOlP,IAG7B2O,YAAIpK,sBAWA,IAVA,IAQQyD,EARAf,EAAOjK,KAAKoB,KAChB8I,EAAUD,EAAKvI,OACfkP,EAAWL,UACXpG,GAAS,EACTxI,EAAQiP,EAAKlP,OACbyJ,EAAexK,SACfsK,EAAcC,QAIPvJ,KAAM,CAEb,GADAqJ,EAAW4F,IAAOzG,GACVc,EAAQD,GACZA,EAAWA,EAAK5I,KAAK,SAEhB,IAAK+I,EAASH,GACnB,SAGJf,EAASC,KAASc,IAK1B2G,YAAIQ,qBAAYC,EAAcC,GAC1B,IAAQpI,EAAOjK,KAAKgS,cAEpB/H,EAASA,EAAKvI,QAAU0Q,GACN,IAAVC,GACJrS,KAAS+R,aACTO,QAAYC,MAAMH,IAGlBE,QAAYE,KAAKJ,IAKzBT,YAAInK,kBAASiL,GACT,IACQ9Q,EAAGiI,EADHD,EAAU3J,KAAK2J,QAOvB,GALQhJ,SAAO8R,KACXA,GAAqBA,IAIjBvH,QAAMuH,GAEV,IADA9I,EAAcA,EAAQ7H,MAAM,GACnBH,EAAI8Q,EAAc/Q,OAAQC,MAEZ,KADnBiI,EAAYD,EAAQqD,QAAQyF,EAAc9Q,MAEtCgI,EAAYG,OAAOF,EAAO,GAQtC,OAFA5J,KAASuH,WAAWoC,EAAQvH,KAAK,OAAS,WAE/BpC,MAGf2R,YAAIe,oBASA,IARA,IAKO9H,EAAQ+H,EALPhJ,EAAU3J,KAAK2J,QAAQ7H,MAAM,GACjC8Q,EAAc5S,KAAK+J,aACnBI,GAAS,EACTxI,EAAQgI,EAAQjI,OAChBN,EAAWpB,KAAKoB,KAAKU,MAAM,GAIpBH,MAEPgR,EAAaC,EADbhI,EAAajB,IAAUQ,KAERf,WACXO,EAAYQ,GAAKS,EAAS,MAAQ+H,EAAO3P,OAkBjD,OAbQ5B,EAAKM,SACTN,EAAS0I,OAAO,EAAG,EAAG,6BACtB1I,EAAS0I,OAAO1I,EAAKM,OAAQ,EACzB,2BACI,UAAgB1B,KAAKqH,aAAazC,GAAK,aAC3C,mBAIA+E,EAAQjI,QACZN,EAAS0I,OAAO,EAAG,EAAG,OAASH,EAAQvH,KAAK,MAGrChB,EAAKM,OACJN,EAASgB,KAAK,IAAMpC,KAAK6R,UAAY,IAAM,IvBtH/DxO,EAAOvC,WAEHgI,YAAazF,EAEbM,oBAAqB,KACrBD,eAAgB,KAEhBmP,SAAUA,WACVrQ,OAAQA,SAERsQ,cAAe,SAAUC,GACrB,OAAOpS,SAAOoS,IAAavQ,SAAOuQ,IAGtCxK,IAAK,SAAUpH,EAAS6R,GAEpB,OAAOC,WAASjT,KAAKkT,eAAeF,GAAQ7R,IAIhDF,IAAK,SAAUE,EAAS6R,EAAOhQ,GAI3B,OAFAmQ,WAASnT,KAAKkT,eAAeF,GAAQ7R,EAAS6B,GAEvCA,GAIXkE,MAAO,SAAU/F,EAAS6R,GAEtB,OAAOI,YAAUpT,KAAKkT,eAAeF,GAAQ7R,IAIjD+R,eAAgB,SAAUF,GACtB,IAGIhI,EAHAqI,EAAYnS,EACZoS,EAAYjR,EACZV,EAAIqR,EAAMtR,OAMd,IAHAsR,EAAQA,EAAMlR,MAAM,GAGbH,KACHqJ,EAAOgI,EAAMrR,GAEbqR,EAAMrR,GAAK,KACE2R,EAAUtI,GACHA,EACA,IAAMqI,EAAUrI,GAAQ,KAAO,IAGvD,OAAOgI,EAAM5Q,KAAK,KAGtBmR,eAAgB,SAASrP,GACrB,IAEIsP,EAFAlO,EAAS,IAAMpB,EACf+F,EAAOjK,KAAK4D,eAGhB,GAAI0B,KAAU2E,EACV,OAAOA,EAAK3E,GAIhB,KADAkO,EAAQxT,KAAK2D,oBAAoB4E,IAAIrE,IAEjC,MAAM,IAAItD,MAAM,qBAAuBsD,EAAO,kBAGlD,OAAQ+F,EAAK3E,GAAUkO,GAI3BC,UAAW,SAASvP,GAChB,IAEIsP,EAFAlO,EAAS,IAAMpB,EACf+F,EAAOjK,KAAK6D,YAGhB,GAAIyB,KAAU2E,EACV,OAAOA,EAAK3E,GAIhB,KADAkO,EAAQxT,KAAK0D,eAAe6E,IAAIrE,IAE5B,MAAM,IAAItD,MAAM,gBAAkBsD,EAAO,kBAG7C,OAAQ+F,EAAK3E,GAAUkO,GAG3BlQ,OAAQ,SAAUY,EAAMlB,GACpB,OAAOhD,KAAKyT,UAAUvP,EAAflE,CAAqBA,KAAMgD,IAGtC0Q,UAAW,SAAUxP,EAAMlB,GACvB,OAAOhD,KAAKuT,eAAerP,EAApBlE,CAA0BA,KAAMgD,IAG3C2Q,aAAc,SAAU3Q,EAAO4Q,GAE3B,OAAiB,IAAbA,EACO5Q,EAGJpD,WAASoD,GAASA,EAAQ,IAAID,EAAYC,IAGrD6Q,OAAQ,SAAUtB,GACd,OAAOuB,QAAQD,OAAOtB,KChJ9B,IAAInO,EAAc,SCOdc,EAAiB,YACjBL,EAAkB,aCIdkP,GAAWC,EAAelL,YAMlCrB,EAAS3G,WAELwC,OAAQ,SAAUY,EAAMZ,GAGpB,OAFAtD,KAAKb,OAAOuE,eAAelD,SAAS0D,EAAMZ,GAEnCtD,MAGXuD,YAAa,SAAUW,EAAMX,GAIzB,OAFAvD,KAAKb,OAAOwE,oBAAoBnD,SAAS0D,EAAMX,GAExCvD,MAIXiU,MAAO,SAAU9S,GACb,IAII6C,EAAmB3D,EAJnByD,EAAkBkQ,EAClBzP,EAAc2P,EACdC,EAAOzL,EAIX,IAAK/H,SAAOQ,GACR,MAAM,IAAIP,MAAM,uCAYpB,IATAP,EAAW,IAAIsR,EAAQwC,GAEvBA,EAAKC,QACLD,EAAKlT,IAAIE,GAETgT,EAAKE,WAAY,EAEjBrQ,EAASmQ,EAAK3F,OAEPxK,EAAQA,EAASmQ,EAAK3F,QAGxBxK,EAAOsQ,SACJxQ,EACAS,GAAalE,EAAU2D,GAG/B,OAAKmQ,EAAK5B,OAAS4B,EAAKE,UAERhU,EAASqS,WAMlB,MAGX7K,QAAS,SAAU1G,GACf,IAAIoT,EAAIR,GACJS,EAAKxU,KACL2N,EAAY3N,KAAKiU,MAAM9S,GACvBsT,EAAW,KAaf,IAAK9G,EACD,MAAM,IAAI/M,MAAM,wCAKpB,OAFA6T,EAAW,IAAIF,EAAE,6BAA8B5G,GAf/C,SAAc+G,EAAeC,GACzB,IACI,OAAOF,EAASD,EAAGrV,OAAQuV,EAAeC,GAE9C,MAAOC,GACHtC,QAAQE,KAAKoC,OC9E7BnM,IAAQX,GAAmB,IAAIL,EAEvBO,IACIjI,OAAQA,EACRI,YAAaA,EAEbyH,eAAgBA,EAChBD,kBAAmBA,EACnBD,aAAcA,EAEdpE,OAAQA,EACRC,YAAaA,EACbsE,QAASA,gJoBhBdgN,KAAO7M"}