import { array, contains, createRegistry, jsonFill, jsonFind, jsonParsePath, jsonUnset, method, number, string, thenable } from 'libcore';
import Parser from 'libcore-parser-lalr';

var global$1 = typeof global !== "undefined" ? global :
            typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window : {};

function promiseGuard(method$$1) {

        function executor(helper, s1, s2, s3, s4, s5, s6, s7, s8) {
            if (thenable(s1)) {
                return s1.then(function (s1) {
                    return method$$1.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);
                });
            }

            return method$$1.call(helper, s1, s2, s3, s4, s5, s6, s7, s8);
        }

        return executor;
    }

var REGISTRY = createRegistry();
var NAME_RE = /[a-zA-Z\$][a-zA-Z0-9\$]*(\-[a-zA-Z0-9\$]+)*/;


function register(name, intent) {
        var registry = REGISTRY;

        if (!string(name)) {
            throw new Error("Invalid intent [name] parameter.");
        }
        else if (!NAME_RE.test(name)) {
            throw new Error("Malformed intent [name] parameter: " + name);
        }

        if (!method(intent)) {
            throw new Error("Invalid [intent] Function parameter named: " +
                            name);
        }

        if (registry.exists(name)) {
            throw new Error("Invalid [intent] named: " + name +
                            " already exist");
        }

        registry.set(name, promiseGuard(intent));

    }




function get(name) {
        var registry = REGISTRY;
        return registry.exists(name) ? registry.get(name) : null;
    }

var REGISTRY$1 = createRegistry();
var NAME_RE$1 = /[a-zA-Z\_\$][a-zA-Z0-9\_\$]*(\.[a-zA-Z\_\$][a-zA-Z0-9\_\$]*)*/;


function register$1(name, transformer) {
        var registry = REGISTRY$1;

        if (!string(name)) {
            throw new Error("Invalid transformer [name] parameter.");
        }
        else if (!NAME_RE$1.test(name)) {
            throw new Error("Malformed transformer [name] parameter: " + name);
        }

        if (!method(transformer)) {
            throw new Error("Invalid [transformer] Function parameter named: " +
                            name);
        }

        if (registry.exists(name)) {
            throw new Error("Invalid [transformer] named: " + name +
                            " already exist");
        }

        registry.set(name, promiseGuard(transformer));

    }




function get$1(name) {
        var registry = REGISTRY$1;
        return registry.exists(name) ? registry.get(name) : null;
    }

var augmentedRoot = "5";
var root = "4";
var start = "0";
var states = {"0":{"4":"1","6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"5","42":"f","44":"g","49":"6","3y":"2","3u":"3","4c":"4","4o":"7","4a":"8","h":"9","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1":{"3":"1f"},"2":{"l":"1g"},"3":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"5","42":"f","44":"g","49":"6","3y":"1h","4c":"4","4o":"7","4a":"8","h":"9","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"4":{},"5":{},"6":{},"7":{},"8":{"15":"1p","39":"1q","47":"1r","2d":"1i","2f":"1j","2h":"1k","2j":"1l","2l":"1m","2n":"1n","2p":"1o","p":"1s","r":"1t","3h":"1u"},"9":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4a":"1v","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"10":{"17":"2t","1t":"2l","1j":"2m","1r":"2n","1f":"2o","1p":"2p","1l":"2q","1n":"2r","1h":"2s","1d":"2u"},"11":{},"12":{},"13":{},"14":{"x":"2v","v":"30"},"15":{"11":"31","13":"32","z":"33"},"16":{"t":"34"},"17":{},"18":{},"19":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4a":"35","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"20":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3r","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"21":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4m":"3s","4l":"k","4k":"10","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"22":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4m":"3t","4l":"k","4k":"10","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"23":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4l":"3u","4k":"10","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"24":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4l":"3v","4k":"10","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"25":{"15":"1p","39":"1q","47":"1r","3h":"1u"},"26":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4k":"40","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"27":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4k":"41","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"28":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4k":"42","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"29":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4k":"43","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"30":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4i":"4o","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"31":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4h":"4p","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"32":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4h":"4q","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"33":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4h":"4r","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"34":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4g":"4s","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"35":{"15":"1p","39":"1q","47":"1r","3h":"1u"},"36":{"15":"1p","39":"1q","47":"1r","3h":"1u"},"37":{},"38":{},"39":{},"40":{"17":"2t","1t":"2l","1j":"2m","1r":"2n","1f":"2o","1p":"2p","1l":"2q","1n":"2r","1h":"2s","1d":"2u"},"41":{"17":"2t","1t":"2l","1j":"2m","1r":"2n","1f":"2o","1p":"2p","1l":"2q","1n":"2r","1h":"2s","1d":"2u"},"42":{"17":"2t","1t":"2l","1j":"2m","1r":"2n","1f":"2o","1p":"2p","1l":"2q","1n":"2r","1h":"2s","1d":"2u"},"43":{"17":"2t","1t":"2l","1j":"2m","1r":"2n","1f":"2o","1p":"2p","1l":"2q","1n":"2r","1h":"2s","1d":"2u"},"44":{},"45":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"53","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"46":{},"47":{"31":"12","33":"13","46":"54","3w":"2g","2r":"2h","3z":"2i","2u":"11"},"48":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"55","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"49":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"56","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"50":{},"51":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"59","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"52":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"5a","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"5a":{},"4v":{},"4u":{"3w":"58"},"4t":{},"4s":{},"4r":{"t":"34"},"4q":{"t":"34"},"4p":{"t":"34"},"4o":{"11":"31","13":"32","z":"33"},"4n":{"11":"31","13":"32","z":"33"},"4m":{"x":"2v","v":"30"},"4l":{"x":"2v","v":"30"},"4k":{"x":"2v","v":"30"},"4j":{"x":"2v","v":"30"},"4i":{"x":"2v","v":"30"},"4h":{"x":"2v","v":"30"},"4g":{"x":"2v","v":"30"},"4f":{"x":"2v","v":"30"},"4e":{"x":"2v","v":"30"},"4d":{"x":"2v","v":"30"},"4c":{},"4b":{},"4a":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"57","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"3v":{"25":"26","27":"27","29":"28","2b":"29"},"3u":{"25":"26","27":"27","29":"28","2b":"29"},"3t":{"19":"24","1v":"23"},"3s":{"19":"24","1v":"23"},"3r":{"23":"52"},"3q":{},"3p":{"3j":"50","3l":"51"},"3o":{},"3n":{"3b":"4v"},"3m":{},"3l":{},"3k":{},"3j":{},"3i":{},"3h":{},"3g":{},"3f":{},"3e":{},"3d":{"15":"4u","47":"4t","3h":"1u"},"3c":{},"3b":{},"3a":{"15":"1p","39":"1q","47":"1r","p":"1s","r":"1t","3h":"1u"},"2v":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4i":"4n","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2u":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4m","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2t":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4l","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2s":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4k","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2r":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4j","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2q":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4i","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2p":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4h","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2o":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4g","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2n":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4f","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2m":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4e","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2l":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4j":"4d","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"2k":{"3j":"4c"},"2j":{"3j":"4b"},"2i":{"23":"4a"},"2h":{"23":"49"},"2g":{"23":"48"},"2f":{},"2e":{"3f":"46","3l":"47"},"2d":{},"2c":{},"2b":{"3b":"44","3l":"45"},"2a":{},"1v":{"15":"1p","39":"1q","47":"1r","3h":"1u"},"1u":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3q","42":"f","44":"g","48":"3p","3j":"3o","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1t":{},"1s":{},"1r":{},"1q":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3n","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1p":{"3w":"3m"},"1o":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3l","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1n":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3k","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1m":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3j","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1l":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3i","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1k":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3h","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1j":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3g","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1i":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"3f","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"1h":{"l":"1g"},"1g":{"4q":"3c","4p":"3d","3w":"3e"},"1f":{},"1e":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4g":"3b","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"1d":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4g":"39","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e","4a":"3a","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"1c":{"31":"12","33":"13","3z":"38","2u":"11"},"1b":{"31":"12","33":"13","3z":"37","2u":"11"},"1a":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4a":"36","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"v":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"2k","42":"f","44":"g","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"u":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"5","42":"f","44":"g","49":"6","4c":"2j","4o":"7","4a":"8","h":"9","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"t":{"31":"12","33":"13","45":"2e","46":"2f","3f":"2d","3w":"2g","2r":"2h","3z":"2i","2u":"11"},"s":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","41":"2c","42":"f","43":"2b","44":"g","3b":"2a","4o":"7","4a":"8","4n":"a","4e":"b","3w":"c","4m":"d","4d":"e","4b":"h","f":"j","4l":"k","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","4k":"10","2u":"11","4j":"14","4i":"15","4h":"16","4g":"17","4f":"18","p":"19","r":"1a","v":"1b","x":"1c","j":"1d","1z":"1e"},"r":{},"q":{},"p":{},"o":{},"n":{},"m":{},"l":{},"k":{"25":"26","27":"27","29":"28","2b":"29"},"j":{"6":"l","8":"m","31":"12","33":"13","37":"r","39":"s","40":"i","42":"f","44":"g","4a":"25","4e":"b","3w":"c","4d":"e","4b":"h","f":"j","b":"n","d":"o","2r":"p","3z":"q","3d":"t","3s":"u","3h":"v","2u":"11"},"i":{},"h":{},"g":{},"f":{},"e":{},"d":{"19":"24","1v":"23"},"c":{},"b":{},"a":{"21":"20","1x":"21","1b":"22"}};
var reducers = {"1":["4o",5,2],"2":["48",3,2],"3":["4p",3,2],"4":["46",3,3],"5":["46",3,2],"6":["46",3,1],"7":["45",3,2],"8":["43",3,2],"9":["47",3,2],"10":["4m",3,3],"11":["4m",3,2],"12":["4n",3,3],"13":["4n",3,2],"14":["48",1,1],"15":["47",2,1],"16":["4a",3,3],"17":["41",3,8],"18":["41",3,7],"19":["41",3,6],"20":["4h",1,1],"21":["4i",1,1],"22":["4j",1,1],"23":["4k",1,1],"24":["3z",1,3],"25":["3z",1,2],"26":["3z",1,1],"27":["4l",1,1],"28":["4d",1,7],"29":["4d",1,6],"a":["4a",4,4],"b":["4q",2,2],"c":["4h",3,2],"d":["4i",3,4],"e":["4i",3,3],"f":["4i",3,2],"g":["4j",3,3],"h":["4j",3,2],"i":["4k",3,11],"j":["4k",3,10],"k":["4k",3,9],"l":["4k",3,8],"m":["4k",3,7],"n":["4k",3,6],"o":["4k",3,5],"p":["4k",3,4],"q":["4k",3,3],"r":["4k",3,2],"s":["40",3,1],"t":["4b",3,1],"u":["44",3,2],"v":["42",3,2],"w":["4l",3,5],"x":["4l",3,4],"y":["4l",3,3],"z":["4l",3,2],"1a":["41",3,5],"1b":["41",3,4],"1c":["41",3,3],"1d":["41",3,2],"1e":["4p",1,1],"1f":["4q",1,1],"1g":["3y",3,2],"1h":["4g",2,7],"1i":["4f",1,1],"1j":["4g",2,6],"1k":["4g",2,5],"1l":["4g",2,4],"1m":["4g",2,3],"1n":["4g",2,2],"1o":["45",1,1],"1p":["44",2,1],"1q":["43",1,1],"1r":["42",2,1],"1s":["4e",2,7],"1t":["49",2,1],"1u":["4f",2,3],"1v":["4f",2,2],"1w":["4e",2,6],"1x":["4",2,2],"1y":["5",2,1],"1z":["4g",1,1],"2a":["4d",1,5],"2b":["4d",1,4],"2c":["4d",1,3],"2d":["4d",1,2],"2e":["4d",1,1],"2f":["4m",1,1],"2g":["4e",1,5],"2h":["4e",1,4],"2i":["4e",1,3],"2j":["4e",1,2],"2k":["4e",1,1],"2l":["4n",1,1],"2m":["4a",1,2],"2n":["4a",1,1],"2o":["4o",1,1],"2p":["41",1,1],"2q":["4c",1,2],"2r":["4c",1,1],"2s":["3y",1,1],"2t":["4",1,1]};
var ends = {"2":"2t","4":"2s","5":"2r","6":"2q","7":"2p","8":"1i","10":"27","11":"26","12":"25","13":"24","14":"23","15":"22","16":"21","17":"20","18":"1z","25":"1s","35":"1n","36":"1m","37":"1l","38":"1k","39":"1j","40":"z","41":"y","42":"x","43":"w","44":"v","46":"u","50":"9","53":"8","54":"7","55":"6","56":"5","57":"4","58":"3","59":"2","5a":"1","4v":"a","4t":"b","4s":"c","4r":"d","4q":"e","4p":"f","4o":"g","4n":"h","4m":"i","4l":"j","4k":"k","4j":"l","4i":"m","4h":"n","4g":"o","4f":"p","4e":"q","4d":"r","4c":"s","4b":"t","3v":"10","3u":"11","3t":"12","3s":"13","3q":"14","3o":"15","3m":"16","3l":"17","3k":"18","3j":"19","3i":"1a","3h":"1b","3g":"1c","3f":"1d","3e":"1e","3d":"1f","3c":"1g","3b":"1h","3a":"1i","2f":"1o","2d":"1p","2c":"1q","2a":"1r","1v":"1t","1t":"1u","1s":"1v","1r":"1w","1h":"1x","1f":"1y","r":"28","q":"29","p":"2a","o":"2b","n":"2c","m":"2d","l":"2e","k":"2f","i":"2g","h":"2h","g":"2i","f":"2j","e":"2k","d":"2l","c":"2m","b":"2n","a":"2o"};
var exclude = ["3q","3n"];
var symbol = {"1":"End","2":"End'","3":"$","4":"Joqx","5":"Joqx'","6":"this","7":"/this/","8":"boolean","9":"/true/","10":"/\\%/","11":"*","12":"/\\*/","13":"/","14":"/\\//","15":".","16":"/\\./","17":"instanceof","18":"/instanceof/","19":"and","20":"/!/","21":"?","22":"/\\?/","23":":","24":"/\\:/","25":"==","26":"/==/","27":"!=","28":"/!=/","29":"===","30":"/[0-9]+\\.[0-9]+[eE][\\+\\-]?[0-9]+/","31":"hex","32":"/[\\+\\-]?0[xX][0-9a-fA-F]+/","33":"octal","34":"/[\\+\\-]?0[oO][0-7]+/","35":"binary","36":"/[\\+\\-]?0[bB][01]+/","37":"jsonpath","38":"/\\@[^ \\r\\n\\t\\.\\[]+(\\.[^ \\r\\n\\t\\.\\[]+|\\[\\'(\\\\\\'|[^\\'])+\\'\\]|\\[\\\"(\\\\\\\"|[^\\\"])+\\\"\\]|\\[[^\\]]+\\])*/","39":"[","40":"Group","41":"Assignment","42":"Array","43":"Elements","44":"Object","45":"Properties","46":"Property","47":"Arguments","48":"ArgumentList","49":"Delete","a":"/false/","b":"null","c":"/null/","d":"undefined","e":"/undefined/","f":"new","g":"/new/","h":"delete","i":"/delete/","j":"typeof","k":"/typeof/","l":"transform","m":"/\\-\\>/","n":"/\\|\\>/","o":"/then/","p":"++","q":"/\\+\\+/","r":"--","s":"/\\-\\-/","t":"**","u":"/\\*\\*/","v":"+","w":"/\\+/","x":"-","y":"/\\-/","z":"%","1a":"/and/","1b":"or","1c":"/or/","1d":"in","1e":"/in/","1f":"gt","1g":"/gt/","1h":"gte","1i":"/gte/","1j":"lt","1k":"/lt/","1l":"lte","1m":"/lte/","1n":">=","1o":"/\\>=/","1p":"<=","1q":"/<=/","1r":">","1s":"/\\>/","1t":"<","1u":"/</","1v":"&&","1w":"/\\&\\&/","1x":"||","1y":"/\\|\\|/","1z":"!","2a":"/===/","2b":"!==","2c":"/!==/","2d":"=","2e":"/=/","2f":"**=","2g":"/\\*\\*=/","2h":"*=","2i":"/\\*=/","2j":"/=","2k":"/\\/=/","2l":"%=","2m":"/\\%=/","2n":"+=","2o":"/\\+=/","2p":"-=","2q":"/\\-=/","2r":"string","2s":"/\\\"(\\\\\\\"|[^\\\"])*\\\"/","2t":"/\\'(\\\\\\'|[^\\'])*\\'/","2u":"decimal","2v":"/[0-9]+/","2w":"/\\.[0-9]+/","2x":"/[0-9]+\\.[0-9]+/","2y":"/[0-9]+[eE][\\+\\-]?[0-9]+/","2z":"/\\.[0-9]+[eE][\\+\\-]?[0-9]+/","3a":"/\\[/","3b":"]","3c":"/\\]/","3d":"{","3e":"/\\{/","3f":"}","3g":"/\\}/","3h":"(","3i":"/\\(/","3j":")","3k":"/\\)/","3l":",","3m":"/\\,/","3n":"comment","3o":"/\\/\\/[^ \\n]*/","3p":"/\\#[^ \\n]*/","3q":"white_space","3r":"/[ \\r\\n\\t]+/","3s":"void(","3t":"/void\\(/","3u":"intent","3v":"/\\?[a-zA-Z\\$][a-zA-Z0-9\\$]*(\\-[a-zA-Z0-9\\$]+)*/","3w":"identifier","3x":"/[a-zA-Z\\_\\$][a-zA-Z0-9\\_\\$]*/","3y":"Transform","3z":"Number","4a":"Updatable","4b":"Void","4c":"Javascript","4d":"Literal","4e":"Primary","4f":"PostFix","4g":"Unary","4h":"Exponential","4i":"Multiplicative","4j":"Additive","4k":"Relational","4l":"Equality","4m":"LogicalAnd","4n":"LogicalOr","4o":"Conditional","4p":"Namespace","4q":"Transformer"};
var tokens = {"stateGenId":207,"start":"start","states":{"start":{"0":["s134","s137","s140","s149","s156","s160","s164"],"1":["s134","s137","s140","s149"],"2":["s134","s137","s140","s149"],"3":["s134","s137","s140","s149"],"4":["s134","s137","s140","s149"],"5":["s134","s137","s140","s149"],"6":["s134","s137","s140","s149"],"7":["s134","s137","s140","s149"],"8":["s134","s137","s140","s149"],"9":["s134","s137","s140","s149"],"not":[],"t":["s1","s5","s36","s46","s206"],"f":["s9","s206"],"n":["s14","s27","s206"],"u":["s18","s206"],"d":["s30","s206"],"-":["s42","s52","s57","s124","s155","s159","s163"],"|":["s44","s97"],"+":["s50","s56","s122","s155","s159","s163"],"*":["s54","s59","s113","s116"],"%":["s58","s120"],"/":["s60","s118","s190"],".":["s61","s135","s144"],"i":["s62","s77","s206"],"a":["s72","s206"],"o":["s75","s206"],"g":["s79","s81","s206"],"l":["s84","s86","s206"],">":["s89","s93"],"<":["s91","s94"],"&":["s95"],"!":["s99","s104","s109"],"?":["s100","s201"],":":["s101"],"=":["s102","s106","s112"],"\"":["s126"],"'":["s130"],"@":["s167"],"[":["s183"],"]":["s184"],"{":["s185"],"}":["s186"],"(":["s187"],")":["s188"],",":["s189"],"#":["s193"]," ":["s195"],"\r":["s195"],"\n":["s195"],"\t":["s195"],"v":["s196","s206"],"b":["s206"],"c":["s206"],"e":["s206"],"h":["s206"],"j":["s206"],"k":["s206"],"m":["s206"],"p":["s206"],"q":["s206"],"r":["s206"],"s":["s206"],"w":["s206"],"x":["s206"],"y":["s206"],"z":["s206"],"A":["s206"],"B":["s206"],"C":["s206"],"D":["s206"],"E":["s206"],"F":["s206"],"G":["s206"],"H":["s206"],"I":["s206"],"J":["s206"],"K":["s206"],"L":["s206"],"M":["s206"],"N":["s206"],"O":["s206"],"P":["s206"],"Q":["s206"],"R":["s206"],"S":["s206"],"T":["s206"],"U":["s206"],"V":["s206"],"W":["s206"],"X":["s206"],"Y":["s206"],"Z":["s206"],"_":["s206"],"$":["s206"]},"s1":{"not":[],"h":["s2"]},"s2":{"not":[],"i":["s3"]},"s3":{"not":[],"s":["s4"]},"s4":{"not":[]},"s5":{"not":[],"r":["s6"]},"s6":{"not":[],"u":["s7"]},"s7":{"not":[],"e":["s8"]},"s8":{"not":[]},"s9":{"not":[],"a":["s10"]},"s10":{"not":[],"l":["s11"]},"s11":{"not":[],"s":["s12"]},"s12":{"not":[],"e":["s13"]},"s13":{"not":[]},"s14":{"not":[],"u":["s15"]},"s15":{"not":[],"l":["s16"]},"s16":{"not":[],"l":["s17"]},"s17":{"not":[]},"s18":{"not":[],"n":["s19"]},"s19":{"not":[],"d":["s20"]},"s20":{"not":[],"e":["s21"]},"s21":{"not":[],"f":["s22"]},"s22":{"not":[],"i":["s23"]},"s23":{"not":[],"n":["s24"]},"s24":{"not":[],"e":["s25"]},"s25":{"not":[],"d":["s26"]},"s26":{"not":[]},"s27":{"not":[],"e":["s28"]},"s28":{"not":[],"w":["s29"]},"s29":{"not":[]},"s30":{"not":[],"e":["s31"]},"s31":{"not":[],"l":["s32"]},"s32":{"not":[],"e":["s33"]},"s33":{"not":[],"t":["s34"]},"s34":{"not":[],"e":["s35"]},"s35":{"not":[]},"s36":{"not":[],"y":["s37"]},"s37":{"not":[],"p":["s38"]},"s38":{"not":[],"e":["s39"]},"s39":{"not":[],"o":["s40"]},"s40":{"not":[],"f":["s41"]},"s41":{"not":[]},"s42":{"not":[],">":["s43"]},"s43":{"not":[]},"s44":{"not":[],">":["s45"]},"s45":{"not":[]},"s46":{"not":[],"h":["s47"]},"s47":{"not":[],"e":["s48"]},"s48":{"not":[],"n":["s49"]},"s49":{"not":[]},"s50":{"not":[],"+":["s51"]},"s51":{"not":[]},"s52":{"not":[],"-":["s53"]},"s53":{"not":[]},"s54":{"not":[],"*":["s55"]},"s55":{"not":[]},"s56":{"not":[]},"s57":{"not":[]},"s58":{"not":[]},"s59":{"not":[]},"s60":{"not":[]},"s61":{"not":[]},"s62":{"not":[],"n":["s63"]},"s63":{"not":[],"s":["s64"]},"s64":{"not":[],"t":["s65"]},"s65":{"not":[],"a":["s66"]},"s66":{"not":[],"n":["s67"]},"s67":{"not":[],"c":["s68"]},"s68":{"not":[],"e":["s69"]},"s69":{"not":[],"o":["s70"]},"s70":{"not":[],"f":["s71"]},"s71":{"not":[]},"s72":{"not":[],"n":["s73"]},"s73":{"not":[],"d":["s74"]},"s74":{"not":[]},"s75":{"not":[],"r":["s76"]},"s76":{"not":[]},"s77":{"not":[],"n":["s78"]},"s78":{"not":[]},"s79":{"not":[],"t":["s80"]},"s80":{"not":[]},"s81":{"not":[],"t":["s82"]},"s82":{"not":[],"e":["s83"]},"s83":{"not":[]},"s84":{"not":[],"t":["s85"]},"s85":{"not":[]},"s86":{"not":[],"t":["s87"]},"s87":{"not":[],"e":["s88"]},"s88":{"not":[]},"s89":{"not":[],"=":["s90"]},"s90":{"not":[]},"s91":{"not":[],"=":["s92"]},"s92":{"not":[]},"s93":{"not":[]},"s94":{"not":[]},"s95":{"not":[],"&":["s96"]},"s96":{"not":[]},"s97":{"not":[],"|":["s98"]},"s98":{"not":[]},"s99":{"not":[]},"s100":{"not":[]},"s101":{"not":[]},"s102":{"not":[],"=":["s103"]},"s103":{"not":[]},"s104":{"not":[],"=":["s105"]},"s105":{"not":[]},"s106":{"not":[],"=":["s107"]},"s107":{"not":[],"=":["s108"]},"s108":{"not":[]},"s109":{"not":[],"=":["s110"]},"s110":{"not":[],"=":["s111"]},"s111":{"not":[]},"s112":{"not":[]},"s113":{"not":[],"*":["s114"]},"s114":{"not":[],"=":["s115"]},"s115":{"not":[]},"s116":{"not":[],"=":["s117"]},"s117":{"not":[]},"s118":{"not":[],"=":["s119"]},"s119":{"not":[]},"s120":{"not":[],"=":["s121"]},"s121":{"not":[]},"s122":{"not":[],"=":["s123"]},"s123":{"not":[]},"s124":{"not":[],"=":["s125"]},"s125":{"not":[]},"s126":{"not":[["s128",{"\"":1}]],"\\":["s127"],"\"":["s129"]},"s127":{"not":[],"\"":["s128"]},"s128":{"not":[["s128",{"\"":1}]],"\"":["s129"],"\\":["s127"]},"s129":{"not":[]},"s130":{"not":[["s132",{"'":1}]],"\\":["s131"],"'":["s133"]},"s131":{"not":[],"'":["s132"]},"s132":{"not":[["s132",{"'":1}]],"'":["s133"],"\\":["s131"]},"s133":{"not":[]},"s134":{"0":["s134"],"1":["s134"],"2":["s134"],"3":["s134"],"4":["s134"],"5":["s134"],"6":["s134"],"7":["s134"],"8":["s134"],"9":["s134"],"not":[]},"s135":{"0":["s136"],"1":["s136"],"2":["s136"],"3":["s136"],"4":["s136"],"5":["s136"],"6":["s136"],"7":["s136"],"8":["s136"],"9":["s136"],"not":[]},"s136":{"0":["s136"],"1":["s136"],"2":["s136"],"3":["s136"],"4":["s136"],"5":["s136"],"6":["s136"],"7":["s136"],"8":["s136"],"9":["s136"],"not":[]},"s137":{"0":["s137"],"1":["s137"],"2":["s137"],"3":["s137"],"4":["s137"],"5":["s137"],"6":["s137"],"7":["s137"],"8":["s137"],"9":["s137"],"not":[],".":["s138"]},"s138":{"0":["s139"],"1":["s139"],"2":["s139"],"3":["s139"],"4":["s139"],"5":["s139"],"6":["s139"],"7":["s139"],"8":["s139"],"9":["s139"],"not":[]},"s139":{"0":["s139"],"1":["s139"],"2":["s139"],"3":["s139"],"4":["s139"],"5":["s139"],"6":["s139"],"7":["s139"],"8":["s139"],"9":["s139"],"not":[]},"s140":{"0":["s140"],"1":["s140"],"2":["s140"],"3":["s140"],"4":["s140"],"5":["s140"],"6":["s140"],"7":["s140"],"8":["s140"],"9":["s140"],"not":[],"e":["s141"],"E":["s141"]},"s141":{"0":["s143"],"1":["s143"],"2":["s143"],"3":["s143"],"4":["s143"],"5":["s143"],"6":["s143"],"7":["s143"],"8":["s143"],"9":["s143"],"not":[],"+":["s142"],"-":["s142"]},"s142":{"0":["s143"],"1":["s143"],"2":["s143"],"3":["s143"],"4":["s143"],"5":["s143"],"6":["s143"],"7":["s143"],"8":["s143"],"9":["s143"],"not":[]},"s143":{"0":["s143"],"1":["s143"],"2":["s143"],"3":["s143"],"4":["s143"],"5":["s143"],"6":["s143"],"7":["s143"],"8":["s143"],"9":["s143"],"not":[]},"s144":{"0":["s145"],"1":["s145"],"2":["s145"],"3":["s145"],"4":["s145"],"5":["s145"],"6":["s145"],"7":["s145"],"8":["s145"],"9":["s145"],"not":[]},"s145":{"0":["s145"],"1":["s145"],"2":["s145"],"3":["s145"],"4":["s145"],"5":["s145"],"6":["s145"],"7":["s145"],"8":["s145"],"9":["s145"],"not":[],"e":["s146"],"E":["s146"]},"s146":{"0":["s148"],"1":["s148"],"2":["s148"],"3":["s148"],"4":["s148"],"5":["s148"],"6":["s148"],"7":["s148"],"8":["s148"],"9":["s148"],"not":[],"+":["s147"],"-":["s147"]},"s147":{"0":["s148"],"1":["s148"],"2":["s148"],"3":["s148"],"4":["s148"],"5":["s148"],"6":["s148"],"7":["s148"],"8":["s148"],"9":["s148"],"not":[]},"s148":{"0":["s148"],"1":["s148"],"2":["s148"],"3":["s148"],"4":["s148"],"5":["s148"],"6":["s148"],"7":["s148"],"8":["s148"],"9":["s148"],"not":[]},"s149":{"0":["s149"],"1":["s149"],"2":["s149"],"3":["s149"],"4":["s149"],"5":["s149"],"6":["s149"],"7":["s149"],"8":["s149"],"9":["s149"],"not":[],".":["s150"]},"s150":{"0":["s151"],"1":["s151"],"2":["s151"],"3":["s151"],"4":["s151"],"5":["s151"],"6":["s151"],"7":["s151"],"8":["s151"],"9":["s151"],"not":[]},"s151":{"0":["s151"],"1":["s151"],"2":["s151"],"3":["s151"],"4":["s151"],"5":["s151"],"6":["s151"],"7":["s151"],"8":["s151"],"9":["s151"],"not":[],"e":["s152"],"E":["s152"]},"s152":{"0":["s154"],"1":["s154"],"2":["s154"],"3":["s154"],"4":["s154"],"5":["s154"],"6":["s154"],"7":["s154"],"8":["s154"],"9":["s154"],"not":[],"+":["s153"],"-":["s153"]},"s153":{"0":["s154"],"1":["s154"],"2":["s154"],"3":["s154"],"4":["s154"],"5":["s154"],"6":["s154"],"7":["s154"],"8":["s154"],"9":["s154"],"not":[]},"s154":{"0":["s154"],"1":["s154"],"2":["s154"],"3":["s154"],"4":["s154"],"5":["s154"],"6":["s154"],"7":["s154"],"8":["s154"],"9":["s154"],"not":[]},"s155":{"0":["s156"],"not":[]},"s156":{"not":[],"x":["s157"],"X":["s157"]},"s157":{"0":["s158"],"1":["s158"],"2":["s158"],"3":["s158"],"4":["s158"],"5":["s158"],"6":["s158"],"7":["s158"],"8":["s158"],"9":["s158"],"not":[],"a":["s158"],"b":["s158"],"c":["s158"],"d":["s158"],"e":["s158"],"f":["s158"],"A":["s158"],"B":["s158"],"C":["s158"],"D":["s158"],"E":["s158"],"F":["s158"]},"s158":{"0":["s158"],"1":["s158"],"2":["s158"],"3":["s158"],"4":["s158"],"5":["s158"],"6":["s158"],"7":["s158"],"8":["s158"],"9":["s158"],"not":[],"a":["s158"],"b":["s158"],"c":["s158"],"d":["s158"],"e":["s158"],"f":["s158"],"A":["s158"],"B":["s158"],"C":["s158"],"D":["s158"],"E":["s158"],"F":["s158"]},"s159":{"0":["s160"],"not":[]},"s160":{"not":[],"o":["s161"],"O":["s161"]},"s161":{"0":["s162"],"1":["s162"],"2":["s162"],"3":["s162"],"4":["s162"],"5":["s162"],"6":["s162"],"7":["s162"],"not":[]},"s162":{"0":["s162"],"1":["s162"],"2":["s162"],"3":["s162"],"4":["s162"],"5":["s162"],"6":["s162"],"7":["s162"],"not":[]},"s163":{"0":["s164"],"not":[]},"s164":{"not":[],"b":["s165"],"B":["s165"]},"s165":{"0":["s166"],"1":["s166"],"not":[]},"s166":{"0":["s166"],"1":["s166"],"not":[]},"s167":{"not":[["s168",{" ":1,"\r":1,"\n":1,"\t":1,".":1,"[":1}]]},"s168":{"not":[["s168",{" ":1,"\r":1,"\n":1,"\t":1,".":1,"[":1}],["s173",{" ":1,"\r":1,"\n":1,"\t":1,".":1,"[":1}]],".":["s169"],"[":["s170","s171","s172"]},"s169":{"not":[["s173",{" ":1,"\r":1,"\n":1,"\t":1,".":1,"[":1}]]},"s170":{"not":[],"'":["s174"]},"s171":{"not":[],"\"":["s175"]},"s172":{"not":[["s176",{"]":1}]]},"s173":{"not":[["s173",{" ":1,"\r":1,"\n":1,"\t":1,".":1,"[":1}]]},"s174":{"not":[["s178",{"'":1}]],"\\":["s177"]},"s175":{"not":[["s180",{"\"":1}]],"\\":["s179"]},"s176":{"not":[["s176",{"]":1}]],"]":["s173"]},"s177":{"not":[],"'":["s178"]},"s178":{"not":[["s178",{"'":1}]],"'":["s181"],"\\":["s177"]},"s179":{"not":[],"\"":["s180"]},"s180":{"not":[["s180",{"\"":1}]],"\"":["s182"],"\\":["s179"]},"s181":{"not":[],"]":["s173"]},"s182":{"not":[],"]":["s173"]},"s183":{"not":[]},"s184":{"not":[]},"s185":{"not":[]},"s186":{"not":[]},"s187":{"not":[]},"s188":{"not":[]},"s189":{"not":[]},"s190":{"not":[],"/":["s191"]},"s191":{"not":[["s192",{" ":1,"\n":1}]]},"s192":{"not":[["s192",{" ":1,"\n":1}]]},"s193":{"not":[["s194",{" ":1,"\n":1}]]},"s194":{"not":[["s194",{" ":1,"\n":1}]]},"s195":{"not":[]," ":["s195"],"\r":["s195"],"\n":["s195"],"\t":["s195"]},"s196":{"not":[],"o":["s197"]},"s197":{"not":[],"i":["s198"]},"s198":{"not":[],"d":["s199"]},"s199":{"not":[],"(":["s200"]},"s200":{"not":[]},"s201":{"not":[],"a":["s202"],"b":["s202"],"c":["s202"],"d":["s202"],"e":["s202"],"f":["s202"],"g":["s202"],"h":["s202"],"i":["s202"],"j":["s202"],"k":["s202"],"l":["s202"],"m":["s202"],"n":["s202"],"o":["s202"],"p":["s202"],"q":["s202"],"r":["s202"],"s":["s202"],"t":["s202"],"u":["s202"],"v":["s202"],"w":["s202"],"x":["s202"],"y":["s202"],"z":["s202"],"A":["s202"],"B":["s202"],"C":["s202"],"D":["s202"],"E":["s202"],"F":["s202"],"G":["s202"],"H":["s202"],"I":["s202"],"J":["s202"],"K":["s202"],"L":["s202"],"M":["s202"],"N":["s202"],"O":["s202"],"P":["s202"],"Q":["s202"],"R":["s202"],"S":["s202"],"T":["s202"],"U":["s202"],"V":["s202"],"W":["s202"],"X":["s202"],"Y":["s202"],"Z":["s202"],"$":["s202"]},"s202":{"0":["s203","s205"],"1":["s203","s205"],"2":["s203","s205"],"3":["s203","s205"],"4":["s203","s205"],"5":["s203","s205"],"6":["s203","s205"],"7":["s203","s205"],"8":["s203","s205"],"9":["s203","s205"],"not":[],"a":["s203","s205"],"b":["s203","s205"],"c":["s203","s205"],"d":["s203","s205"],"e":["s203","s205"],"f":["s203","s205"],"g":["s203","s205"],"h":["s203","s205"],"i":["s203","s205"],"j":["s203","s205"],"k":["s203","s205"],"l":["s203","s205"],"m":["s203","s205"],"n":["s203","s205"],"o":["s203","s205"],"p":["s203","s205"],"q":["s203","s205"],"r":["s203","s205"],"s":["s203","s205"],"t":["s203","s205"],"u":["s203","s205"],"v":["s203","s205"],"w":["s203","s205"],"x":["s203","s205"],"y":["s203","s205"],"z":["s203","s205"],"A":["s203","s205"],"B":["s203","s205"],"C":["s203","s205"],"D":["s203","s205"],"E":["s203","s205"],"F":["s203","s205"],"G":["s203","s205"],"H":["s203","s205"],"I":["s203","s205"],"J":["s203","s205"],"K":["s203","s205"],"L":["s203","s205"],"M":["s203","s205"],"N":["s203","s205"],"O":["s203","s205"],"P":["s203","s205"],"Q":["s203","s205"],"R":["s203","s205"],"S":["s203","s205"],"T":["s203","s205"],"U":["s203","s205"],"V":["s203","s205"],"W":["s203","s205"],"X":["s203","s205"],"Y":["s203","s205"],"Z":["s203","s205"],"$":["s203","s205"],"-":["s204"]},"s203":{"0":["s203","s205"],"1":["s203","s205"],"2":["s203","s205"],"3":["s203","s205"],"4":["s203","s205"],"5":["s203","s205"],"6":["s203","s205"],"7":["s203","s205"],"8":["s203","s205"],"9":["s203","s205"],"not":[],"-":["s204"],"a":["s203","s205"],"b":["s203","s205"],"c":["s203","s205"],"d":["s203","s205"],"e":["s203","s205"],"f":["s203","s205"],"g":["s203","s205"],"h":["s203","s205"],"i":["s203","s205"],"j":["s203","s205"],"k":["s203","s205"],"l":["s203","s205"],"m":["s203","s205"],"n":["s203","s205"],"o":["s203","s205"],"p":["s203","s205"],"q":["s203","s205"],"r":["s203","s205"],"s":["s203","s205"],"t":["s203","s205"],"u":["s203","s205"],"v":["s203","s205"],"w":["s203","s205"],"x":["s203","s205"],"y":["s203","s205"],"z":["s203","s205"],"A":["s203","s205"],"B":["s203","s205"],"C":["s203","s205"],"D":["s203","s205"],"E":["s203","s205"],"F":["s203","s205"],"G":["s203","s205"],"H":["s203","s205"],"I":["s203","s205"],"J":["s203","s205"],"K":["s203","s205"],"L":["s203","s205"],"M":["s203","s205"],"N":["s203","s205"],"O":["s203","s205"],"P":["s203","s205"],"Q":["s203","s205"],"R":["s203","s205"],"S":["s203","s205"],"T":["s203","s205"],"U":["s203","s205"],"V":["s203","s205"],"W":["s203","s205"],"X":["s203","s205"],"Y":["s203","s205"],"Z":["s203","s205"],"$":["s203","s205"]},"s204":{"0":["s205"],"1":["s205"],"2":["s205"],"3":["s205"],"4":["s205"],"5":["s205"],"6":["s205"],"7":["s205"],"8":["s205"],"9":["s205"],"not":[],"a":["s205"],"b":["s205"],"c":["s205"],"d":["s205"],"e":["s205"],"f":["s205"],"g":["s205"],"h":["s205"],"i":["s205"],"j":["s205"],"k":["s205"],"l":["s205"],"m":["s205"],"n":["s205"],"o":["s205"],"p":["s205"],"q":["s205"],"r":["s205"],"s":["s205"],"t":["s205"],"u":["s205"],"v":["s205"],"w":["s205"],"x":["s205"],"y":["s205"],"z":["s205"],"A":["s205"],"B":["s205"],"C":["s205"],"D":["s205"],"E":["s205"],"F":["s205"],"G":["s205"],"H":["s205"],"I":["s205"],"J":["s205"],"K":["s205"],"L":["s205"],"M":["s205"],"N":["s205"],"O":["s205"],"P":["s205"],"Q":["s205"],"R":["s205"],"S":["s205"],"T":["s205"],"U":["s205"],"V":["s205"],"W":["s205"],"X":["s205"],"Y":["s205"],"Z":["s205"],"$":["s205"]},"s205":{"0":["s205"],"1":["s205"],"2":["s205"],"3":["s205"],"4":["s205"],"5":["s205"],"6":["s205"],"7":["s205"],"8":["s205"],"9":["s205"],"not":[],"a":["s205"],"b":["s205"],"c":["s205"],"d":["s205"],"e":["s205"],"f":["s205"],"g":["s205"],"h":["s205"],"i":["s205"],"j":["s205"],"k":["s205"],"l":["s205"],"m":["s205"],"n":["s205"],"o":["s205"],"p":["s205"],"q":["s205"],"r":["s205"],"s":["s205"],"t":["s205"],"u":["s205"],"v":["s205"],"w":["s205"],"x":["s205"],"y":["s205"],"z":["s205"],"A":["s205"],"B":["s205"],"C":["s205"],"D":["s205"],"E":["s205"],"F":["s205"],"G":["s205"],"H":["s205"],"I":["s205"],"J":["s205"],"K":["s205"],"L":["s205"],"M":["s205"],"N":["s205"],"O":["s205"],"P":["s205"],"Q":["s205"],"R":["s205"],"S":["s205"],"T":["s205"],"U":["s205"],"V":["s205"],"W":["s205"],"X":["s205"],"Y":["s205"],"Z":["s205"],"$":["s205"]},"s206":{"0":["s207"],"1":["s207"],"2":["s207"],"3":["s207"],"4":["s207"],"5":["s207"],"6":["s207"],"7":["s207"],"8":["s207"],"9":["s207"],"not":[],"a":["s207"],"b":["s207"],"c":["s207"],"d":["s207"],"e":["s207"],"f":["s207"],"g":["s207"],"h":["s207"],"i":["s207"],"j":["s207"],"k":["s207"],"l":["s207"],"m":["s207"],"n":["s207"],"o":["s207"],"p":["s207"],"q":["s207"],"r":["s207"],"s":["s207"],"t":["s207"],"u":["s207"],"v":["s207"],"w":["s207"],"x":["s207"],"y":["s207"],"z":["s207"],"A":["s207"],"B":["s207"],"C":["s207"],"D":["s207"],"E":["s207"],"F":["s207"],"G":["s207"],"H":["s207"],"I":["s207"],"J":["s207"],"K":["s207"],"L":["s207"],"M":["s207"],"N":["s207"],"O":["s207"],"P":["s207"],"Q":["s207"],"R":["s207"],"S":["s207"],"T":["s207"],"U":["s207"],"V":["s207"],"W":["s207"],"X":["s207"],"Y":["s207"],"Z":["s207"],"_":["s207"],"$":["s207"]},"s207":{"0":["s207"],"1":["s207"],"2":["s207"],"3":["s207"],"4":["s207"],"5":["s207"],"6":["s207"],"7":["s207"],"8":["s207"],"9":["s207"],"not":[],"a":["s207"],"b":["s207"],"c":["s207"],"d":["s207"],"e":["s207"],"f":["s207"],"g":["s207"],"h":["s207"],"i":["s207"],"j":["s207"],"k":["s207"],"l":["s207"],"m":["s207"],"n":["s207"],"o":["s207"],"p":["s207"],"q":["s207"],"r":["s207"],"s":["s207"],"t":["s207"],"u":["s207"],"v":["s207"],"w":["s207"],"x":["s207"],"y":["s207"],"z":["s207"],"A":["s207"],"B":["s207"],"C":["s207"],"D":["s207"],"E":["s207"],"F":["s207"],"G":["s207"],"H":["s207"],"I":["s207"],"J":["s207"],"K":["s207"],"L":["s207"],"M":["s207"],"N":["s207"],"O":["s207"],"P":["s207"],"Q":["s207"],"R":["s207"],"S":["s207"],"T":["s207"],"U":["s207"],"V":["s207"],"W":["s207"],"X":["s207"],"Y":["s207"],"Z":["s207"],"_":["s207"],"$":["s207"]}},"ends":{"s4":"6","s8":"8","s13":"8","s17":"b","s26":"d","s29":"f","s35":"h","s41":"j","s43":"l","s45":"l","s49":"l","s51":"p","s53":"r","s55":"t","s56":"v","s57":"x","s58":"z","s59":"11","s60":"13","s61":"15","s71":"17","s74":"19","s76":"1b","s78":"1d","s80":"1f","s83":"1h","s85":"1j","s88":"1l","s90":"1n","s92":"1p","s93":"1r","s94":"1t","s96":"1v","s98":"1x","s99":"1z","s100":"21","s101":"23","s103":"25","s105":"27","s108":"29","s111":"2b","s112":"2d","s115":"2f","s117":"2h","s119":"2j","s121":"2l","s123":"2n","s125":"2p","s126":"2r","s129":"2r","s130":"2r","s133":"2r","s134":"2u","s136":"2u","s139":"2u","s141":"2u","s143":"2u","s146":"2u","s148":"2u","s152":"2u","s154":"2u","s158":"31","s162":"33","s166":"35","s168":"37","s173":"37","s183":"39","s184":"3b","s185":"3d","s186":"3f","s187":"3h","s188":"3j","s189":"3l","s191":"3n","s192":"3n","s193":"3n","s194":"3n","s195":"3q","s200":"3s","s203":"3u","s202":"3u","s205":"3u","s206":"3w","s207":"3w"},"priority":["6","8","b","d","f","h","j","l","p","r","t","v","x","z","11","13","15","17","19","1b","1d","1f","1h","1j","1l","1n","1p","1r","1t","1v","1x","1z","21","23","25","27","29","2b","2d","2f","2h","2j","2l","2n","2p","2r","2u","31","33","35","37","39","3b","3d","3f","3h","3j","3l","3n","3q","3s","3u","3w"]};
var data = {
	augmentedRoot: augmentedRoot,
	root: root,
	start: start,
	states: states,
	reducers: reducers,
	ends: ends,
	exclude: exclude,
	symbol: symbol,
	tokens: tokens
};

var parser = Parser.load(data);
    var iterator = parser.iterator();

function Symbol(compiler) {
    this.compiler = compiler;
    this.type = this.type;

    this.pendingCodes = [];
}

Symbol.prototype = {
    constructor: Symbol,
    id: null,
    
    autoDeclare: false,
    declared: false,
    value: null,
    declareCode: null,

    autoFinalize: false,
    finalizeCode: null,
    constant: false,

    finalized: false,
    initialized: false,

    inFixCode: null,
    postFixCode: null,

    onInitialize: function (compiler, value, constantify) {
        var symbols = compiler.symbols,
            index = symbols.length,
            id = 's' + index;

        this.id = id;

        // register
        this.constant = constantify;
        this.value = value;
        this.references = [];

        if (constantify) {
            symbols.splice(0, 0, id);
        }
        else {
            symbols[index] = id;
        }

        compiler.symbolConfig[id] = this;

    },

    onDeclare: function () {
        var list = this.references,
            len = list.length,
            c = -1;
        var item, value;

        for (; len--;) {
            item = list[++c];
            item.declare();
        }

        value = this.getDeclarationValue();

        if (value) {
            this.generateCodeLines([[this.id, ' = ', value]]);
        }
    },

    onDeclarePostFix: function (postfix) {
        this.generateCodeLines(postfix);
    },

    onDeclareInfix: function (infix) {
        this.generateCodeLines(infix);
    },

    initialize: function (value, constantify) {
        if (!this.initialized) {
            this.initialized = true;
            
            this.onInitialize(this.compiler,
                                value,
                                constantify === true || constantify === false ?
                                    constantify : this.constant);

            if (this.autoDeclare) {
                this.declare();
            }
        }
    },

    declare: function () {
        var compiler = this.compiler,
            postfix = this.postFixCode,
            infix = this.inFixCode;

        // run declaration
        if (!this.declared) {
            this.declared = true;

            this.onDeclare(compiler);
        }

        // run infix
        if (infix) {
            this.onDeclareInfix(infix);

            delete this.inFixCode;
        }
        
        // postfix code
        if (postfix) {
            this.onDeclarePostFix(postfix);

            // run once
            delete this.postFixCode;

            // should redeclare when needed again
            delete this.declared;
        }

        return this;

    },

    redeclare: function () {
        if (this.declared) {
            this.declared = false;
        }
        return this.declare();
    },

    addDependency: function (symbol) {
        var list = this.references;

        if (!(symbol instanceof Symbol)) {
            throw new Error("Invalid [symbol] dependency.");
        }

        list[list.length] = symbol;

        return this;
    },

    typeofSymbol: function () {
        return this.createVariableOfMe('typeof ' + this.id);
    },

    notSymbol: function () {
        return this.createVariableOfMe('!' + this.id);
    },

    

    getDeclarationValue: function () {
        return this.getCodeValue();
    },

    getCodeValue: function () {
        return this.value;
    },

    generateCodeLines: function (value, force) {
        var compiler = this.compiler,
            isArray = array,
            isString = string,
            pending = this.pendingCodes,
            commit = this.declared || force === true;
        var c, l, item, pl;

        if (isString(value)) {
            value = [[value]];
        }

        if (isArray(value)) {
            pl = pending.length;
            for (c = -1, l = value.length; l--;) {
                item = value[++c];
                if (isArray(item) || isString(item)) {
                    pending[pl++] = item;
                }
            }
        }

        // commit
        if (commit) {
            for (c = -1, l = pending.length; l--;) {
                compiler.appendCode(pending[++c]);
            }
            pending.splice(0, pending.length);
        }

        return this;
    },

    generateInfix: function (code) {
        var current = this.inFixCode,
            isArray = array,
            isString = string;
        var c, l, item, cl;

        if (!current) {
            current = this.inFixCode = [];
        }
        
        if (isString(code)) {
            code = [code];
        }

        if (isArray(code)) {
            cl = current.length;
            for (c = -1, l = code.length; l--;) {
                item = code[++c];
                if (isArray(item) || isString(item)) {
                    current[cl++] = item;
                }
            }
        }

    },

    generatePostFix: function (code) {
        var current = this.postFixCode,
            isArray = array,
            isString = string;
        var c, l, item, cl;

        if (!current) {
            current = this.postFixCode = [];
        }
        
        if (isString(code)) {
            code = [code];
        }

        if (isArray(code)) {
            cl = current.length;
            for (c = -1, l = code.length; l--;) {
                item = code[++c];
                if (isArray(item) || isString(item)) {
                    current[cl++] = item;
                }
            }
        }
    },

    getHelperId: function () {
        return this.compiler.helperSymbol.id;
    },

    getContextId: function () {
        return this.compiler.contextSymbol.id;
    },

    createVariableOfMe: function (value) {
        var identifier;

        if (array(value)) {
            value = value.join('');
        }

        if (!string(value)) {
            value = this.id;
        }

        identifier = this.compiler.createSymbol(value, "identifier");
        identifier.symbolAccess = true;
        identifier.addDependency(this);

        return identifier;

    }


};

var INVALID_TYPE = "Invalid [type] parameter.";
var INVALID_CLASS = "Invalid Symbol [Class] parameter.";
var INVALID_NON_EXISTENT_TYPE = "Symbol do not exist from [type] parameter";
var REGISTRY$2 = createRegistry();

function instantiate(type, compiler) {
    var registry = REGISTRY$2;
    var Class;

    if (!string(type)) {
        throw new Error(INVALID_TYPE);
    }

    Class = registry.get(type);

    if (!Class) {
        throw new Error(INVALID_NON_EXISTENT_TYPE);
    }

    return new Class(compiler);
    
}

function register$2(type, Class) {
    var Base$$1 = Symbol;

    if (!string(type)) {
        throw new Error(INVALID_TYPE);
    }

    if (!method(Class) ||
        !(Class === Base$$1 || (Class.prototype instanceof Base$$1))) {
        throw new Error(INVALID_CLASS);
    }
    
    REGISTRY$2.set(Class.prototype.type = type,
                Class);
}

var INVALID_ACCESS = "Invalid object access in [reference] parameter. ";
var INVALID_ACCESS_NOT_ALLOWED = "Unable to access property. ";
var INVALID_UPDATE_ACCESS_OBJECT = "Invalid Object to update access. ";
var INVALID_ACCESS_UPDATE = "Unable to update access of object. ";

var Native = (function (Base) {
    function Native(compiler) {
            Base.call(this, compiler);

            this.reference =
                this.autoDeclare = 
                this.allowAccess = true;

            this.finalizeOnAccess = true;

            this.allowBinaryOperation = [
                '**',
                '*',
                '/',
                '%',
                '+',
                '-',
                '<',
                '>',
                '<=',
                '>=',
                'instanceof',
                'in',
                '==',
                '===',
                '!=',
                '!==',
                '&&',
                '||'
            ];

        }

    if ( Base ) Native.__proto__ = Base;
    Native.prototype = Object.create( Base && Base.prototype );
    Native.prototype.constructor = Native;

        Native.prototype.onAccess = function onAccess () {
            if (this.finalizeOnAccess) {
                this.declare();
            }
        };

        Native.prototype.createUpdateAccessSymbol = function createUpdateAccessSymbol (from, directAccess) {
            var identifier;

            // pray that runtime can generate string
            this.declare();

            // create identifier
            identifier = this.createVariableOfMe();
            identifier.directAccess = directAccess;
            identifier.accessParent = from;
            
            return identifier;
            
        };

        Native.prototype.access = function access (reference, directAccess) {

            if (!(reference instanceof Base)) {
                throw new Error(INVALID_ACCESS);
            }

            if (!this.allowAccess) {
                throw new Error(INVALID_ACCESS_NOT_ALLOWED);
            }
            
            directAccess = directAccess === true;

            this.onAccess(reference, directAccess);

            // update access
            return reference.updateAccess(this, directAccess);

        };

        Native.prototype.updateAccess = function updateAccess (from, directAccess) {

            if (!(from instanceof Base)) {
                throw new Error(INVALID_UPDATE_ACCESS_OBJECT);
            }

            if (!this.allowAccessUpdate) {
                throw new Error(INVALID_ACCESS_UPDATE + from.type);
            }

            return this.createUpdateAccessSymbol(from, directAccess);

        };

        Native.prototype.assign = function assign () {
            throw new Error("Invalid Assignment");
        };

        Native.prototype.instantiate = function instantiate () {
            throw new Error("Invalid Instantiation");
        };

        Native.prototype.unset = function unset () {
            throw new Error("Invalid Delete statement");
        };

// arithmetic
        Native.prototype.binaryOperation = function binaryOperation (operand, operation) {
            var allow = this.allowBinaryOperation;

            if (!(operand instanceof Base)) {
                throw new Error("Invalid [operand] parameter.");
            }

            if (allow.indexOf(operation) === -1) {
                throw new Error("Operation not allowed " + operation +
                                " for " + operand.type);
            }

            return this.createVariableOfMe([this.id, ' ',
                                            operation, ' ',
                                            operand.id]).
                        addDependency(operand);


        };

        Native.prototype.exponential = function exponential (operand) {
            return this.binaryOperation(operand, '**');
        };

        Native.prototype.multiplication = function multiplication (operand) {
            return this.binaryOperation(operand, '*');
        };

        Native.prototype.division = function division (operand) {
            return this.binaryOperation(operand, '/');
        };

        Native.prototype.modulo = function modulo (operand) {
            return this.binaryOperation(operand, '%');
        };

        Native.prototype.addition = function addition (operand) {
            return this.binaryOperation(operand, '+');
        };

        Native.prototype.subtraction = function subtraction (operand) {
            return this.binaryOperation(operand, '-');
        };

        Native.prototype.lt = function lt (operand) {
            return this.binaryOperation(operand, '<');
        };

        Native.prototype.lte = function lte (operand) {
            return this.binaryOperation(operand, '<=');
        };

        Native.prototype.gt = function gt (operand) {
            return this.binaryOperation(operand, '>');
        };

        Native.prototype.gte = function gte (operand) {
            return this.binaryOperation(operand, '>=');
        };

        Native.prototype.instanceOf = function instanceOf (operand) {
            return this.binaryOperation(operand, 'instanceof');
        };

        Native.prototype.inOp = function inOp (operand) {
            return this.binaryOperation(operand, 'in');
        };

        Native.prototype.equal = function equal (operand) {
            return this.binaryOperation(operand, '==');
        };

        Native.prototype.sequal = function sequal (operand) {
            return this.binaryOperation(operand, '===');
        };

        Native.prototype.notEqual = function notEqual (operand) {
            return this.binaryOperation(operand, '!=');
        };

        Native.prototype.notSequal = function notSequal (operand) {
            return this.binaryOperation(operand, '!==');
        };

        Native.prototype.and = function and (operand) {
            return this.binaryOperation(operand, '&&');
        };

        Native.prototype.or = function or (operand) {
            return this.binaryOperation(operand, '||');
        };

        Native.prototype.guard = function guard () {

        };

    return Native;
}(Symbol));

var UndefinedSymbol = (function (Base) {
    function UndefinedSymbol(compiler) {
            Base.call(this, compiler);
            this.allowAccess = 
                this.autoDeclare = false;
            
        }

    if ( Base ) UndefinedSymbol.__proto__ = Base;
    UndefinedSymbol.prototype = Object.create( Base && Base.prototype );
    UndefinedSymbol.prototype.constructor = UndefinedSymbol;

    return UndefinedSymbol;
}(Native));

var NullSymbol = (function (UndefinedSymbol$$1) {
    function NullSymbol () {
        UndefinedSymbol$$1.apply(this, arguments);
    }if ( UndefinedSymbol$$1 ) NullSymbol.__proto__ = UndefinedSymbol$$1;
    NullSymbol.prototype = Object.create( UndefinedSymbol$$1 && UndefinedSymbol$$1.prototype );
    NullSymbol.prototype.constructor = NullSymbol;

    

    return NullSymbol;
}(UndefinedSymbol));

var StringSymbol = (function (Base) {
    function StringSymbol () {
        Base.apply(this, arguments);
    }if ( Base ) StringSymbol.__proto__ = Base;
    StringSymbol.prototype = Object.create( Base && Base.prototype );
    StringSymbol.prototype.constructor = StringSymbol;

    

    return StringSymbol;
}(Native));

var SIGN_RE = /[\-\+]/g;


var NumberSymbol = (function (Base) {
    function NumberSymbol () {
        Base.apply(this, arguments);
    }

    if ( Base ) NumberSymbol.__proto__ = Base;
    NumberSymbol.prototype = Object.create( Base && Base.prototype );
    NumberSymbol.prototype.constructor = NumberSymbol;

    NumberSymbol.prototype.positive = function positive () {
            var value = this.value;

            if (string(value)) {
                this.value = '+' + value.replace(SIGN_RE, '');
                this.redeclare();
            }

            return this;
        };

        NumberSymbol.prototype.negative = function negative () {
            var value = this.value;

            if (string(value)) {
                this.value = '-' + value.replace(SIGN_RE, '');
                this.redeclare();
            }


            return this;
        };

    return NumberSymbol;
}(Native));

var BooleanSymbol = (function (Base) {
    function BooleanSymbol () {
        Base.apply(this, arguments);
    }if ( Base ) BooleanSymbol.__proto__ = Base;
    BooleanSymbol.prototype = Object.create( Base && Base.prototype );
    BooleanSymbol.prototype.constructor = BooleanSymbol;

    

    return BooleanSymbol;
}(Native));

var INVALID_ITEM = "Invalid Symbol [item] parameter.";
var INVALID_NOT_ALLOWED_ITEM = "Appending Symbol [item] is not allowed.";


var Collection = (function (NativeObject) {
    function Collection(compiler) {
            NativeObject.call(this, compiler);

            this.autoDeclare = false;

            this.data = [];

        }

    if ( NativeObject ) Collection.__proto__ = NativeObject;
    Collection.prototype = Object.create( NativeObject && NativeObject.prototype );
    Collection.prototype.constructor = Collection;

        Collection.prototype.allowAppend = function allowAppend () {
            return true;
        };

        Collection.prototype.append = function append (item) {
            var list = this.data;

            if (!(item instanceof Symbol)) {
                throw new Error(INVALID_ITEM);
            }

            if (!this.allowAppend(item)) {
                throw new Error(INVALID_NOT_ALLOWED_ITEM + item.type);
            }

            list[list.length] = item;

            return this;

        };

        Collection.prototype.getCodeValue = function getCodeValue () {
            var this$1 = this;

            var data = this.data,
                c = -1,
                l = data.length,
                generated = [];
            var symbol;

            for (; l--;) {
                symbol = data[++c];
                symbol.declare();
                generated[c] = this$1.generateItemCode(symbol, c);
                
            }

            return generated.join(',');

        };

        Collection.prototype.generateItemCode = function generateItemCode (symbol) {
            return symbol.id;
        };

    return Collection;
}(Native));

var Array$1 = (function (Base) {
    function Array () {
        Base.apply(this, arguments);
    }

    if ( Base ) Array.__proto__ = Base;
    Array.prototype = Object.create( Base && Base.prototype );
    Array.prototype.constructor = Array;

    Array.prototype.getCodeValue = function getCodeValue () {
            return '[' + Base.prototype.getCodeValue.call(this) + ']';
        };

    return Array;
}(Collection));

var Identifier = (function (NativeSymbol) {
    function Identifier(compiler) {
            NativeSymbol.call(this, compiler);

            this.autoDeclare =
                this.directAccess = 
                this.symbolAccess =
                this.finalizeOnAccess = 
                this.disableValueRecode = false;

            this.accessParent = null;

            this.references = [];
            
            this.allowAccess = 
                this.allowAccessUpdate = true;

            this.accessOrigin = null;

        }

    if ( NativeSymbol ) Identifier.__proto__ = NativeSymbol;
    Identifier.prototype = Object.create( NativeSymbol && NativeSymbol.prototype );
    Identifier.prototype.constructor = Identifier;

        Identifier.prototype.setAccessOrigin = function setAccessOrigin (item) {
            this.accessOrigin = item;
            return this;
        };

        Identifier.prototype.setSymbolAccess = function setSymbolAccess (isSymbolAccess) {
            this.symbolAccess = isSymbolAccess !== false;
            return this;
        };

        Identifier.prototype.setFinalizeOnAccess = function setFinalizeOnAccess (isFinalizedOnAccess) {
            this.finalizeOnAccess = isFinalizedOnAccess !== false;
            return this;
        };

        // do not declare
        Identifier.prototype.getDeclarationValue = function getDeclarationValue () {
            // if (this.disableValueRecode) {
            //     return '';
            // }
            
            return this.symbolAccess ?
                        this.getCodeValue() :
                        this.getAccessCodeValue();
        };

        Identifier.prototype.setValue = function setValue (value) {
            this.value = value;
            return this;
        };

        Identifier.prototype.getCodeValue = function getCodeValue () {
            var value = this.value;
            
            return string(value) ?
                        this.symbolAccess ?
                            value :
                            '"' + value + '"' :
                        null;
        };

        Identifier.prototype.getAccessCodeValue = function getAccessCodeValue () {
            return ([
                this.getHelperId(), ".get(",
                            this.getAccessOrigin(), ',',
                            this.generateJSONPathArray(), ')'
            ]).join('');
        };

        Identifier.prototype.getAccessOrigin = function getAccessOrigin () {
            var item = this.accessOrigin;
            return string(item) ? item : this.getContextId();
        };

        Identifier.prototype.generateJSONPathArray = function generateJSONPathArray () {
            var current = this,
                list = [],
                len = 0;

            for (; current.accessParent; current = current.accessParent) {
                list[len++] = current.getCodeValue();
            }

            list.reverse();

            return '[' + list.join(',') + ']';

        };

        Identifier.prototype.createUpdateAccessSymbol = function createUpdateAccessSymbol (from, directAccess) {
            // if not direct access, resolve value and create another identifier
            if (!directAccess) {
                return NativeSymbol.prototype.createUpdateAccessSymbol.call(this, from, directAccess);
            }
            
            this.directAccess = directAccess;
            this.accessParent = from;
            
            // reuse me
            return this;
            
        };

        

        Identifier.prototype.assign = function assign (source, operator) {
            var jsonPath = this.generateJSONPathArray(),
                helper = this.getHelperId(),
                context = this.getContextId(),
                codes = [],
                line = 0,
                sourceId = source.id,
                id = this.id,
                sourceReference = sourceId;

            // source should be finalized if not yet finalized
            this.addDependency(source);

            codes[line++] = ['// assign'];
            
            // for arithmetic assignment
            if (string(operator)) {

                operator = operator.substring(0, operator.length - 1);

                switch (operator) {
                case '**':
                case '*':
                case '/':
                case '%':
                case '+':
                case '-':
                    sourceReference = id + ' ' + operator + ' ' + sourceId;
                }
            }


            // assign
            codes[line++] = [
                id, ' = ', helper, '.set(', context, ',',
                                            jsonPath, ',',
                                            sourceReference, ')'
            ];
            
            this.generateInfix(codes);

            return this;
        };

        Identifier.prototype.instantiate = function instantiate () {
            var symbol = this.createVariableOfMe([
                                    'new ' + this.id
                                ],
                                "identifier");
            return symbol;
        };

        Identifier.prototype.unset = function unset () {
            this.generateInfix([[
                this.getHelperId(), '.unset(', this.getContextId(), ',',
                                    this.generateJSONPathArray(), ')'
            ]]);
            return this;
        };

        Identifier.prototype.increment = function increment (postfix) {

            if (postfix) {
                this.generatePostFix([[
                        this.getHelperId(), '.set(', this.getContextId(), ',',
                                            this.generateJSONPathArray(), ',',
                                            this.id, ' + 1)'
                    ]]);

                this.declared = false;


            }
            // infix is normal call to assign with += operator
            else {
                this.assign(this.compiler.createSymbol('1', "number"), '+=');
            }
            

            return this;

        };

        Identifier.prototype.decrement = function decrement (postfix) {
            
            if (postfix) {
                this.generatePostFix([[
                        this.getHelperId(), '.set(', this.getContextId(), ',',
                                            this.generateJSONPathArray(), ',',
                                            this.id, ' - 1)'
                    ]]);

            }
            // infix is normal call to assign with += operator
            else {
                this.assign(this.compiler.createSymbol('1', "number"), '-=');
            }

            return this;

        };

    return Identifier;
}(Native));

var UTF_PAD = '0000';
var NUMERIC_RE = /^([1-9][0-9]*|0)$/g;
var ESCAPE_CHARS = {
        0: '0',
        8: 'b',
        9: 't',
        10: 'n',
        11: 'v',
        12: 'f',
        13: 'r',
        34: '"',
        39: "'",
        91: "[",
        92: '\\',
        93: "]"
    };

function escapeString(subject) {
        var escapeIndex = ESCAPE_CHARS,
            backslash = '\\',
            utf = backslash + "u",
            pad = UTF_PAD,
            pl = pad.length,
            l = subject.length,
            out = Array.prototype.slice.call(subject, 0);
        var code;

        out.length = l;

        for (; l--;) {
            code = subject.charCodeAt(l);
            if (code in escapeIndex) {
                out[l] = backslash + escapeIndex[code];

            }
            else if (code < 32 || code > 126) {
                code = code.toString(16);
                out[l] = utf +
                            pad.substring(0, pl - code.length) +
                            code.toLowerCase();
            }
        }

        return out.join('');
    }

function numeric(subject) {
        return string(subject) ?
                    NUMERIC_RE.test(subject) :
                    number(subject);
    }

function jsonRecodeArrayPath(jsonString) {
        var path = jsonParsePath(jsonString),
            cescape = escapeString,
            l = path && path.length;

        if (l) {
            for (; l--;) {
                path[l] = '"' + cescape(path[l]) + '"';
            }
            return '[' + path.join(',') + ']';
        }
        return '[]';
    }

var JsonPath = (function (IdentifierSymbol$$1) {
    function JsonPath(compiler) {
            IdentifierSymbol$$1.call(this, compiler);

            this.symbolAccess = true;
        }

    if ( IdentifierSymbol$$1 ) JsonPath.__proto__ = IdentifierSymbol$$1;
    JsonPath.prototype = Object.create( IdentifierSymbol$$1 && IdentifierSymbol$$1.prototype );
    JsonPath.prototype.constructor = JsonPath;

        JsonPath.prototype.getCodeValue = function getCodeValue () {
            return this.getAccessCodeValue();
        };


        JsonPath.prototype.generateJSONPathArray = function generateJSONPathArray () {
            var path = this.value;
            path = path.substring(1, path.length);
            return jsonRecodeArrayPath(path);
            
        };

    return JsonPath;
}(Identifier));

var ObjectSymbol = (function (CollectionSymbol) {
    function ObjectSymbol(compiler) {
            CollectionSymbol.call(this, compiler);
            this.dataAccess = [];

        }

    if ( CollectionSymbol ) ObjectSymbol.__proto__ = CollectionSymbol;
    ObjectSymbol.prototype = Object.create( CollectionSymbol && CollectionSymbol.prototype );
    ObjectSymbol.prototype.constructor = ObjectSymbol;

        ObjectSymbol.prototype.append = function append (item, name) {
            var list = this.dataAccess;
            list[list.length] = name;
            return CollectionSymbol.prototype.append.call(this, item);
        };
        
        ObjectSymbol.prototype.getCodeValue = function getCodeValue () {
            return '{' + CollectionSymbol.prototype.getCodeValue.call(this) + '}';
        };

        ObjectSymbol.prototype.generateItemCode = function generateItemCode (symbol, c) {
            var name = this.dataAccess[c];
            return name + ':' + symbol.id;
        };

    return ObjectSymbol;
}(Collection));

var Arguments = (function (Base) {
    function Arguments(compiler) {
            Base.call(this, compiler);

            this.autoDeclare = false;

        }

    if ( Base ) Arguments.__proto__ = Base;
    Arguments.prototype = Object.create( Base && Base.prototype );
    Arguments.prototype.constructor = Arguments;

        // arguments should not be declared
        Arguments.prototype.getDeclarationValue = function getDeclarationValue () {
            return null;
        };

    return Arguments;
}(Collection));

var INVALID_ARGUMENTS = "Invalid Arguments [symbol] parameter.";
var INVALID_CALLABLE = "Invalid Callable [symbol] parameter. ";
var INVALID_NOT_CALLABLE = "Reference [symbol] is not callable. ";


var CallSymbol = (function (Identifier$$1) {
    function CallSymbol(compiler) {
            Identifier$$1.call(this, compiler);

            this.autoDeclare =
                this.autoFinalize = false;

            this.reference = 
                this.arguments = null;

            this.constructorCall = false;
            this.disableContext = false;
        }

    if ( Identifier$$1 ) CallSymbol.__proto__ = Identifier$$1;
    CallSymbol.prototype = Object.create( Identifier$$1 && Identifier$$1.prototype );
    CallSymbol.prototype.constructor = CallSymbol;

        CallSymbol.prototype.onUseReference = function onUseReference () {

        };

        CallSymbol.prototype.onUseArguments = function onUseArguments () {

        };

        CallSymbol.prototype.instantiate = function instantiate () {
            this.constructorCall = true;
            return this;
        };

        CallSymbol.prototype.getDeclarationValue = function getDeclarationValue () {
            var reference = this.reference,
                args = this.arguments;

            if (reference) {
                reference.declare();

                args = this.getArgumentsCode();

                return (this.constructorCall ?
                            [
                                'new ', reference.id, '(', args, ')'
                            ] :
                            [
                                reference.id, '.call(', args, ')'
                            ]).join('');

            }
            return null;

        };

        CallSymbol.prototype.getArgumentsCode = function getArgumentsCode () {
            var args = this.arguments;

            args = args ?
                        args.getCodeValue() : '';

            return this.constructorCall ?
                        args :
                        this.getCallContext() + (args ? ',' + args : '');

        };

        CallSymbol.prototype.getCallContext = function getCallContext () {
            var reference = this.reference;
            var parent;

            if (reference && reference.type === "identifier") {
                parent = reference.accessParent;
                if (parent) {
                    parent.declare();
                    return parent.id;
                }
            }

            return this.getContextId();
        };

        CallSymbol.prototype.useReference = function useReference (symbol) {
            if (!(symbol instanceof Native)) {
                throw new Error(INVALID_CALLABLE);
            }

            switch (symbol) {
            case "number":
                throw new Error(INVALID_NOT_CALLABLE);
            }

            this.reference = symbol;
            this.onUseReference(symbol);

            return this;
        };

        CallSymbol.prototype.useArguments = function useArguments (symbol) {
            if (!(symbol instanceof Arguments)) {
                throw new Error(INVALID_ARGUMENTS);
            }

            this.arguments = symbol;
            this.onUseArguments(symbol);

            return this;
        };

    return CallSymbol;
}(Identifier));

var TransformerCallSymbol = (function (CallSymbol$$1) {
    function TransformerCallSymbol(compiler) {
            CallSymbol$$1.call(this, compiler);

            this.baseArgument = null;
        }

    if ( CallSymbol$$1 ) TransformerCallSymbol.__proto__ = CallSymbol$$1;
    TransformerCallSymbol.prototype = Object.create( CallSymbol$$1 && CallSymbol$$1.prototype );
    TransformerCallSymbol.prototype.constructor = TransformerCallSymbol;

        TransformerCallSymbol.prototype.onUseReference = function onUseReference (symbol) {
            symbol.setValue(
                this.compiler.helperSymbol.id +
                '.getTransformer("' + symbol.value + '")');
        };

        TransformerCallSymbol.prototype.setBaseArgument = function setBaseArgument (item) {
            this.addDependency(item).baseArgument = item;
            return this;
        };

        TransformerCallSymbol.prototype.getDeclarationValue = function getDeclarationValue () {
            var reference = this.reference,
                args = this.arguments;

            if (reference) {
                reference.declare();

                args = this.getArgumentsCode();

                return ([ reference.id, '(', args, ')']).join('');

            }
            return null;

        };

        TransformerCallSymbol.prototype.getArgumentsCode = function getArgumentsCode () {
            var args = this.arguments,
                base = this.baseArgument;

            args = args ?
                        args.getCodeValue() : '';

            if (base) {
                args = args ?
                             base.id + ',' + args :
                             base.id;
            }

            return this.compiler.helperSymbol.id + (args ? ',' + args : '');

        };

    return TransformerCallSymbol;
}(CallSymbol));

var BlockSymbol = (function (IdentifierSymbol) {
    function BlockSymbol(compiler) {
        IdentifierSymbol.call(this, compiler);
        this.blockStatement = null;
        this.resultIdentifier = null;
    }

    if ( IdentifierSymbol ) BlockSymbol.__proto__ = IdentifierSymbol;
    BlockSymbol.prototype = Object.create( IdentifierSymbol && IdentifierSymbol.prototype );
    BlockSymbol.prototype.constructor = BlockSymbol;


    BlockSymbol.prototype.onDeclare = function onDeclare () {
        var statement = this.blockStatement;

        statement = statement ? statement.join('') : '';

        this.generateCodeLines([statement + '{ // start of block']);

        IdentifierSymbol.prototype.onDeclare.call(this);

        this.generateCodeLines([
            this.getBlockResultCode()
        ]);

        this.generateCodeLines(['} // end of block']);
    };

    BlockSymbol.prototype.getDeclarationValue = function getDeclarationValue () {
        return null;
    };

    BlockSymbol.prototype.getBlockResultCode = function getBlockResultCode () {
        var list = this.references,
            identifier = this.resultIdentifier,
            len = list.length;
        var symbol, code;

        if (len) {
            symbol = list[len - 1];
            code =  this.id + ' = ' + symbol.id;
        }
        else {
            code = this.id + ' = undefined';
        }
        
        return identifier ? identifier + ' = ' + code : code;
    };

    BlockSymbol.prototype.setStatement = function setStatement (statement) {
        if (string(statement)) {
            statement = [statement];
        }

        if (array(statement)) {
            this.blockStatement = statement;
        }
        return this;
    };

    BlockSymbol.prototype.setResultIdentifier = function setResultIdentifier (id) {
        if (string(id)) {
            this.resultIdentifier = id;
        }
        return this;
    };

    return BlockSymbol;
}(Identifier));

register$2("default", Symbol);

register$2("null", NullSymbol);
register$2("undefined", UndefinedSymbol);

register$2("string", StringSymbol);
register$2("number", NumberSymbol);
register$2("boolean", BooleanSymbol);

register$2("array", Array$1);
register$2("object", ObjectSymbol);
register$2("call", CallSymbol);

register$2("identifier", Identifier);
register$2("jsonpath", JsonPath);

register$2("arguments", Arguments);
register$2("transformer", TransformerCallSymbol);
register$2("block", BlockSymbol);

var Compile = function Compile(iterator) {
        var identifierType = "identifier";
        var context, helper;

        this.constantLookup = {};
        this.symbolConfig = {};
        this.symbols = [];
        this.code = [];
        this.iterator = iterator;

        this.lineFeed = "\n";
        this.defaultSymbolType = "mixed";

        this.errorCount = 0;
        this.errorMessages = [];

        this.contextSymbol = context = this.createSymbol('context',
                                                        identifierType);

        this.helperSymbol = helper = this.createSymbol('helper',
                                                        identifierType);
            
        // these are final symbols
        context.symbolAccess =
            helper.symbolAccess = true;

        context.declare();
        helper.declare();
            
    };

    Compile.prototype.createSymbol = function createSymbol (value, type, constantify) {
        var symbol = instantiate(type, this);

        symbol.initialize(value, constantify);

        return symbol;
    };
        
    Compile.prototype.getSymbol = function getSymbol (id) {
        var symbols = this.symbols,
            index = symbols.indexOf(id);

        return index !== -1 ? this.symbolConfig[id] : null;
    };

    Compile.prototype.updateIterator = function updateIterator (value) {
        this.iterator.update(value);
    };

    Compile.prototype.appendCode = function appendCode () {
        var list = this.code,
            len = list.length,
            args = arguments,
            c = -1,
            l = args.length,
            isString = string,
            isArray = array;

        var item;

        for (; l--;) {
            item = args[++c];
            if (isArray(item)) {
                item = item.join('');
            }
            else if (!isString(item)) {
                continue;
            }

            list[len++] = item;
        }

    };

    Compile.prototype.reportError = function reportError (errorMessage, fatal) {
        var list = this.errorMessages;

        list[list.length] = errorMessage;
        if (fatal === true) {
            this.errorCount++;
            console.error(errorMessage);
        }
        else {
            console.warn(errorMessage);
        }

    };

    Compile.prototype.nullFill = function nullFill (ignoreSymbols) {
        var symbols = this.symbols;
        var l, index;
        if (string(ignoreSymbols)) {
            ignoreSymbols = [ignoreSymbols];
        }

        // filter
        if (array(ignoreSymbols)) {
            symbols = symbols.slice(0);
            for (l = ignoreSymbols.length; l--;) {
                index = symbols.indexOf(ignoreSymbols[l]);
                if (index !== -1) {
                    symbols.splice(index, 1);
                }
            }
                
        }

        this.appendCode(symbols.join(' = ') + ' = null');

        return this;
    };

    Compile.prototype.generate = function generate () {
        var symbols = this.symbols.slice(0),
            configs = this.symbolConfig,
            c = -1,
            l = symbols.length,
            code = this.code.slice(0);
       var symbol, config;

        // declare variables
        for (; l--;) {
            symbol = symbols[++c];
            config = configs[symbol];
            if (config.constant) {
                symbols[c] = symbol + ' = ' + config.value;
            }
        }

        // add try catch
        if (code.length) {
            code.splice(2, 0, 'try { // catch all errors');
            code.splice(code.length, 0,
                '} catch (e) { // end try',
                    'return ' + this.helperSymbol.id + '.reject(e)', 
                '} // end catch');
        }

        // declare variables
        if (symbols.length) {
            code.splice(0, 0, 'var ' + symbols.join(','));
        }

        return code.length ?
                    code.join(';' + this.lineFeed) + ";" : "";
    };

function Helper() {
    this.transformCache = {};
    this.intentCache = {};
}

Helper.prototype = {

    constructor: Helper,

    contains: contains,
    number: number,

    validProperty: function (property) {
        return string(property) || number(property);
    },

    get: function (subject, paths) {
        
        return jsonFind(this.createJsonPath(paths), subject);
        
    },

    set: function (subject, paths, value) {

        jsonFill(this.createJsonPath(paths), subject, value);

        return value;
        
    },

    unset: function (subject, paths) {
        
        return jsonUnset(this.createJsonPath(paths), subject);
        
    },

    createJsonPath: function (paths) {
        var strEscape = escapeString,
            isNumeric = numeric,
            l = paths.length;
        var item;

        paths = paths.slice(0);

        // create path
        for (; l--;) {
            item = paths[l];
            // quote
            paths[l] = '[' +
                        (isNumeric(item) ?
                                item :
                                '"' + strEscape(item) + '"') + ']';
        }

        return paths.join('');
    },

    getTransformer: function(name) {
        var access = ':' + name,
            list = this.transformCache;
        var found;

        if (access in list) {
            return list[access];
        }

        found = get$1(name);
        if (!found) {
            throw new Error("Transformer named " + name + " do not exist.");
        }

        return (list[access] = found);

    },

    getIntent: function(name) {
        var access = ':' + name,
            list = this.intentCache;
        var found;

        if (access in list) {
            return list[access];
        }

        found = get(name);
        if (!found) {
            throw new Error("Intent named " + name + " do not exist.");
        }

        return (list[access] = found);
    },

    intent: function (name, value) {
        return this.getIntent(name)(this, value);
    },

    transform: function (name, value) {
        return this.getTransformer(name)(this, value);
    },

    formatReturn: function (value) {
        return thenable(value) ?
                    value : Promise.resolve(value);
    },

    reject: function (error) {
        return Promise.reject(error);
    }

    
};

var TYPE_NUMBER = 'number';

function compileTerminal(context, lexeme) {
    var cache = lexeme.value,
        name = lexeme.name,
        value = cache;

    switch (lexeme.name) {
    case "decimal":
        value = context.createSymbol(value, TYPE_NUMBER);
        break;

    case "hex":
        value = context.createSymbol('' +
                        parseInt(value.substring(2, value.length), 16),
                        TYPE_NUMBER);
        break;

    case "binary":
        value = context.createSymbol('' +
                        parseInt(value.substring(2, value.length), 2),
                        TYPE_NUMBER);
        break;
        
    case "string":
    case "boolean":
    case "null":
    case "undefined":
    case "identifier":
    case "jsonpath":
        value = context.createSymbol(value, name);
        break;
    }
    

    if (cache !== value) {
        context.updateIterator(value);
    }
}

var TYPE_ARGUMENTS = "arguments";
var TYPE_IDENTIFIER = "identifier";

function compileRule(compiler, lexeme) {
        var cache = lexeme.value,
            value = cache;
        var condition, item1, item2;
        
        switch (lexeme.name) {
        // relay all
        case "Number":
        case "Javascript":
            value = value[0];
            break;

        default:
            switch (lexeme.rule) {
            // relay rules
            case "2:Literal":
            case "3:Literal":
            case "4:Literal":
            case "5:Literal":
            case "6:Literal":
            case "7:Literal":
            case "1:Primary":
            case "2:Primary":
            case "3:Primary":
            case "4:Primary":
            case "5:Primary":
            case "1:Updatable":
            case "1:PostFix":
            case "1:Unary":
            case "1:Exponential":
            case "1:Multiplicative":
            case "1:Additive":
            case "1:Relational":
            case "1:Equality":
            case "1:LogicalAnd":
            case "1:LogicalOr":
            case "1:Conditional":
            case "1:Assignment":
            
            case "1:Javascript":
            case "2:Javascript":
            case "1:Transform":
                value = value[0];
                break;

            // void
            case "1:Void":
                value = compiler.createSymbol("void(" + value[1].id + ')',
                                                TYPE_IDENTIFIER).
                                setSymbolAccess().
                                addDependency(value[1]);
                break;
            
            // this
            case "1:Literal":
                value = compiler.createSymbol(compiler.contextSymbol.id,
                                                TYPE_IDENTIFIER).
                                setSymbolAccess();
                break;


            // relay group
            case "1:Group":
                value = value[1];
                break;
            
            // array
            case "1:Array":
                value = compiler.createSymbol("[]",
                                                TYPE_IDENTIFIER).
                            setSymbolAccess();
                break;

            case "2:Array": // relay Elements
                value = value[1];
                break;

            case "1:Elements":
                value = compiler.createSymbol(null, "array").
                            append(value[0]);
                break;

            case "2:Elements":
                value = value[0].
                            append(value[2]);
                break;

            // object
            case "1:Object":
                value = compiler.createSymbol("{}", TYPE_IDENTIFIER).
                            setSymbolAccess();
                break;

            case "2:Object":
                value = value[1];
                break;

            case "1:Properties":
                value = value[0];
                value = compiler.createSymbol(null, "object").
                            append(value[1], value[0]);
                break;
            
            case "2:Properties":
                item1 = value[2];
                value = value[0].append(item1[1], item1[0]);
                break;

            case "1:Property": // relay
            case "2:Property": // relay
            case "3:Property": // relay
                value = [value[0].value, value[2]];
                
                break;
            
            
            // arguments
            case "1:Arguments": // relay
                value = compiler.createSymbol(null, TYPE_ARGUMENTS);
                break;

            case "2:Arguments": // relay
                value = value[1];
                break;

            case "1:ArgumentList":
                value = compiler.createSymbol(null, TYPE_ARGUMENTS).
                            append(value[0]);
                break;

            case "2:ArgumentList":
                value = value[0].append(value[2]);
                break;

            // function call
            case "6:Primary":
                value = compiler.createSymbol(null, "call").
                            useReference(value[0]).
                            useArguments(value[1]);
                break;
            // new object
            case "7:Primary":
                value = value[1].instantiate();
                break;

            // direct access is a property of context symbol
            case "2:Updatable":
                value = compiler.contextSymbol.access(value[0], true);
                break;

            case "3:Updatable":
                value = value[0].access(value[2], true);
                break;

            case "4:Updatable":
                value = value[0].access(value[2], false);
                break;

            

            // ++
            case "2:PostFix":
                value = value[0].increment(true);
                break;

            // -- 
            case "3:PostFix":
                value = value[0].decrement(true);
                break;


            // ++ infix
            case "2:Unary":
                value = value[1].increment(false);
                break;

            // -- infix
            case "3:Unary":
                value = value[1].decrement(false);
                break;
            
            // positive sign
            case "4:Unary":
                value = value[1].positive(false);
                break;

            // negative sign
            case "5:Unary":
                value = value[1].negative(false);
                break;

            // typeof
            case "6:Unary":
                value = value[1].typeofSymbol();
                break;

            // !not
            case "7:Unary":
                value = value[1].notSymbol();
                break;

            // ***
            case "2:Exponential":
                value = value[0].exponential(value[2]);
                break;
            
            // *
            case "2:Multiplicative":
                value = value[0].multiplication(value[2]);
                break;

            // /
            case "3:Multiplicative":
                value = value[0].division(value[2]);
                break;

            // %
            case "3:Multiplicative":
                value = value[0].modulo(value[2]);
                break;

            // -
            case "2:Additive":
                value = value[0].subtraction(value[2]);
                break;

            // +
            case "3:Additive":
                value = value[0].addition(value[2]);
                break;
            
            // <
            case "2:Relational":
            case "3:Relational":
                value = value[0].lt(value[2]);
                break;
            
            // >
            case "4:Relational":
            case "5:Relational":
                value = value[0].gt(value[2]);
                break;

            // <=
            case "6:Relational":
            case "7:Relational":
                value = value[0].lte(value[2]);
                break;

            // >=
            case "8:Relational":
            case "9:Relational":
                value = value[0].gte(value[2]);
                break;

            case "2:Equality":
                value = value[0].equal(value[2]);
                break;

            case "3:Equality":
                value = value[0].notEqual(value[2]);
                break;

            case "4:Equality":
                value = value[0].sequal(value[2]);
                break;

            case "5:Equality":
                value = value[0].notSequal(value[2]);
                break;

            case "2:LogicalAnd":
            case "3:LogicalAnd":
                value = value[0].and(value[2]);
                break;

            case "4:LogicalOr":
            case "5:LogicalOr":
                value = value[0].or(value[2]);
                break;

            case "2:Conditional":
                item1 = value[2];
                item2 = value[4];
                condition = value[0];

                value = compiler.createSymbol(null, TYPE_IDENTIFIER).
                            setSymbolAccess().
                            addDependency(condition);

                item1 = compiler.createSymbol(null, "block").
                                setStatement([
                                    'if (', condition.id, ')'
                                ]).
                                setResultIdentifier(value.id).
                                addDependency(item1);
                
                item2 = compiler.createSymbol(null, "block").
                                setStatement('else').
                                setResultIdentifier(value.id).
                                addDependency(item2);

                value.addDependency(item1).
                    addDependency(item2);

                break;

            // assignment
            case "2:Assignment":
            case "3:Assignment":
            case "4:Assignment":
            case "5:Assignment":
            case "6:Assignment":
            case "7:Assignment":
            case "8:Assignment":
                value = value[0].assign(value[2], value[1]);
                //value = assign(context, value[1], value[0], value[2]);

                break;
            
            // delete statement
            case "1:Delete":
                value = value[1].unset();
                break;

            // transformer namespace
            case "1:Namespace":
                value = value[0].setSymbolAccess();
                break;

            case "2:Namespace":
                value = value[0].setValue(value[0].value +
                                            '.' +
                                            value[2].value);
                break;

            // transformer
            case "1:Transformer": // relay
                value = compiler.createSymbol(null, "transformer").
                                useReference(value[0]);
                break;

            case "2:Transformer": // relay
                value = compiler.createSymbol(null, "transformer").
                                useReference(value[0]).
                                useArguments(value[1]);
                break;

            // transform
            case "2:Transform":
                value = value[2].setBaseArgument(value[0]);
                break;

            // last
            case "1:Joqx":
                value = value[0];
                break;

            case "2:Joqx":
                item1 = value[0];
                item2 = value[1];
                value = compiler.createSymbol(compiler.helperSymbol.id +
                                '.intent("' +
                                    escapeString(item1.
                                        substring(1, item1.length)) + '",' +
                                        item2.id + ')',
                                TYPE_IDENTIFIER).
                            setSymbolAccess().
                            addDependency(item2);
                // console.log("intent ", value[0]);
                // value = value[1];
                break;

            case "1:Joqx'":
                value = value[0];
                value.declare();
                compiler.appendCode([
                    value.id, ' = ', compiler.helperSymbol.id,
                                '.formatReturn(', value.id, ')'
                ]);
                compiler.nullFill(value.id);
                compiler.appendCode([
                    'return ', value.id
                ]);
            }
        }

        // update lexeme value
        if (cache !== value) {
            compiler.updateIterator(value);
        }
    }

var helper = new Helper();

function compile(subject) {
    var F = compile.constructor,
        compileTerminal$$1 = compileTerminal,
        compileRule$$1 = compileRule,
        compiled = null,
        walk = iterator;

    var lexeme, generated, compiler;

    function exec(contextObject) {
        try {
            return compiled(helper, contextObject);
        }
        catch (e) {
            console.warn(e);
        }
        
        return undefined;
    }

    if (!string(subject)) {
        throw new Error("Invalid String [subject] parameter.");
    }

    compiler = new Compile(walk);
    
    walk.reset();
    walk.set(subject);

    walk.completed = false;

    lexeme = walk.next();

    for (; lexeme; lexeme = walk.next()) {
        
        // for terminal
        (lexeme.terminal ?
            compileTerminal$$1 :
            compileRule$$1)(compiler, lexeme);
    }

    if (!walk.error && walk.completed) {

        generated = compiler.generate();

        //console.log(generated);

        compiled = new F('helper, context', generated);

        return exec;
    
    }

    return null;

    

}

// test
var API$1 = {
            intent: intent,
            transformer: transformer,
            compile: compile
        };

function intent(name, intentMethod) {
        register(name, intentMethod);
        return API$1;
    }

function transformer(name, transformerMethod) {
        register$1(name, transformerMethod);
        return API$1;
    }




var API$3 = Object.freeze({
	default: API$1,
	compile: compile,
	intent: intent,
	transformer: transformer
});

global$1.joqx = API$3;

export { compile, intent, transformer };
export default API$3;
//# sourceMappingURL=joqx.es.js.map
